{   v_import("loop.void");
    v_import("arithmetic.void");
    v_import("function_hack.void");
}

{   v_import("printf.void");
}

{   voidc_enable_statement_block();
    voidc_enable_statement_if_then_else();
    voidc_enable_statement_loop();
}


//---------------------------------------------------------------------
{
    i = v_alloca(int, 2);
    j = v_getelementptr(i, 1);

    i = v_reference(i);
    j = v_reference(j);

    v_assign(i, 0);

    loop
    {
        c = v_icmp(LLVMIntEQ, i, 5);

        if (c)  v_break();


        v_assign(j, 0);

        loop
        {
            c = v_icmp(LLVMIntEQ, j, 7);

            if (c)  v_break();


            printf("i,j: %d, %d\n", i, j);


            j1 = v_binop(LLVMAdd, j, 1);

            v_assign(j, j1);
        }


        i1 = v_binop(LLVMAdd, i, 1);

        v_assign(i, i1);
    }

    printf("\n");
}


//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr);

    v_store(int, typ);

    ft = v_function_type(long_long, typ, 1, false);

    //-----------------------------------------------------------------
    f = v_function_hack("fib", ft);

    v_add_parameter_name(f, 0, "n", int);
}
{
    v0 = v_alloca(long_long, 2);
    v1 = v_getelementptr(v0, 1);

    v0 = v_reference(v0);
    v1 = v_reference(v1);

    v_assign(v0, 1);
    v_assign(v1, 0);

    i = v_alloca(int);
    i = v_reference(i);

    v_assign(i, 0);

    loop
    {
        c = v_icmp(LLVMIntEQ, i, n);

        if (c)  v_break();

        v2 = v_binop(LLVMAdd, v0, v1);

        v_assign(v0, v1);
        v_assign(v1, v2);

        i1 = v_binop(LLVMAdd, i, 1);

        v_assign(i, i1);
    }

    v_return(v1);
}

//---------------------------------------------------------------------
{   n = v_cast(93, int);

    v = fib(n);

    printf("fib(%d): %llu\n", n, v);
}




