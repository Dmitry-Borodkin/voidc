{   v_import("loop.void");
    v_import("arithmetic.void");
    v_import("function_hack.void");
}

{   voidc_enable_statement_block();
    voidc_enable_statement_if_then_else();
    voidc_enable_statement_loop();
}


//---------------------------------------------------------------------
{
    vn0 = v_alloca(int, 2);
    vn1 = v_getelementptr(vn0, 1);

    v_store(0, vn0);

    loop
    {
        i = v_load(vn0);

        c = v_icmp(LLVMIntEQ, i, 5);

        if (c)  v_break();


        v_store(0, vn1);

        loop
        {
            j = v_load(vn1);

            c = v_icmp(LLVMIntEQ, j, 7);

            if (c)  v_break();


            printf("i,j: %d, %d\n", i, j);


            j1 = v_binop(LLVMAdd, j, 1);

            v_store(j1, vn1);
        }


        i1 = v_binop(LLVMAdd, i, 1);

        v_store(i1, vn0);
    }

    printf("\n");
}


//---------------------------------------------------------------------
{   typ = v_alloca(LLVMTypeRef);

    v_store(int, typ);

    ft = LLVMFunctionType(long_long, typ, 1, 0);

    f = v_function_hack("fib", ft);

    p0 = LLVMGetParam(f, 0);    v_add_variable("n", p0);
}
{
    v0 = v_alloca(long_long, 2);
    v1 = v_getelementptr(v0, 1);

    v_store(1, v0);
    v_store(0, v1);

    vn = v_alloca(int);

    v_store(0, vn);

    loop
    {
        i = v_load(vn);

        c = v_icmp(LLVMIntEQ, i, n);

        if (c)  v_break();

        t0 = v_load(v0);
        t1 = v_load(v1);

        t2 = v_binop(LLVMAdd, t0, t1);

        v_store(t1, v0);
        v_store(t2, v1);

        i = v_binop(LLVMAdd, i, 1);

        v_store(i, vn);
    }

    r = v_load(v1);

    v_return(r);
}

//---------------------------------------------------------------------
{   n = v_cast(LLVMZExt, 92, int);

    v = fib(n);

    printf("fib(%d): %lld\n", n, v);
}




