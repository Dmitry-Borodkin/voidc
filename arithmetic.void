//---------------------------------------------------------------------
//- Copyright (C) 2020 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_import("arithmetic.void"); }

{   v_import("function_hack.void"); }


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = LLVMModuleCreateWithName("voidc_arithmetic_intrinsic_module");

    v_set_module(module);       //- Sic!

    void_ptr = v_pointer_type(void, 0);
    v_add_local_symbol("void_ptr", voidc_opaque_type, void_ptr);
}


//---------------------------------------------------------------------
//- v_binop
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_binop_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "visitor",  voidc_visitor_ref);
    v_add_parameter_name(f, 1, "aux",      void_ptr);
    v_add_parameter_name(f, 2, "arg_list", v_ast_arg_list_ref);
}
{
    builder = v_target_get_builder();

    arg_base = v_cast(arg_list, v_ast_base_ref);

    v_ast_accept_visitor(arg_base, visitor, aux);

    arg0 = v_get_argument_value(0);

    opv = LLVMConstIntGetZExtValue(arg0);

    opc = v_cast(opv, LLVMOpcode);

    lhs = v_get_argument_value(1);
    rhs = v_get_argument_value(2);

    rname = v_get_return_name();

    ret = LLVMBuildBinOp(builder, opc, lhs, rhs, rname);

    v_set_return_value(ret);

    t = v_get_argument_type(1);
    v_set_return_type(t);

    v_clear_arguments();
}


//---------------------------------------------------------------------
//- v_icmp
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_icmp_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "visitor",  voidc_visitor_ref);
    v_add_parameter_name(f, 1, "aux",      void_ptr);
    v_add_parameter_name(f, 2, "arg_list", v_ast_arg_list_ref);
}
{
    builder = v_target_get_builder();

    arg_base = v_cast(arg_list, v_ast_base_ref);

    v_ast_accept_visitor(arg_base, visitor, aux);

    arg0 = v_get_argument_value(0);

    opv = LLVMConstIntGetZExtValue(arg0);

    opc = v_cast(opv, LLVMIntPredicate);

    lhs = v_get_argument_value(1);
    rhs = v_get_argument_value(2);

    rname = v_get_return_name();

    ret = LLVMBuildICmp(builder, opc, lhs, rhs, rname);

    v_set_return_value(ret);
    v_set_return_type(bool);

    v_clear_arguments();
}


//---------------------------------------------------------------------
//- v_fcmp
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_fcmp_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "visitor",  voidc_visitor_ref);
    v_add_parameter_name(f, 1, "aux",      void_ptr);
    v_add_parameter_name(f, 2, "arg_list", v_ast_arg_list_ref);
}
{
    builder = v_target_get_builder();

    arg_base = v_cast(arg_list, v_ast_base_ref);

    v_ast_accept_visitor(arg_base, visitor, aux);

    arg0 = v_get_argument_value(0);

    opv = LLVMConstIntGetZExtValue(arg0);

    opc = v_cast(opv, LLVMRealPredicate);

    lhs = v_get_argument_value(1);
    rhs = v_get_argument_value(2);

    rname = v_get_return_name();

    ret = LLVMBuildFCmp(builder, opc, lhs, rhs, rname);

    v_set_return_value(ret);
    v_set_return_type(bool);

    v_clear_arguments();
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    v_set_module(0);

    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_prepare_module_for_jit(module);

    //-----------------------------------------------------------------
    PH = v_alloca(LLVMOrcModuleHandle);

    LLVMOrcAddEagerlyCompiledIR(voidc_jit, PH, module,
                                voidc_resolver, 0
                               );
}

{   v_add_intrinsic("v_binop", voidc_binop_intrinsic);
    v_add_intrinsic("v_icmp",  voidc_icmp_intrinsic);
    v_add_intrinsic("v_fcmp",  voidc_fcmp_intrinsic);
}


