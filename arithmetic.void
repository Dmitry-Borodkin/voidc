//---------------------------------------------------------------------
//- Copyright (C) 2020-2021 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("arithmetic.void  must be imported into the voidc target only!");

    v_import("voidc_target.void");
    v_import("voidc_types.void");
    v_import("voidc_util.void");
    v_import("voidc_ast.void");
    v_import("voidc_visitor.void");

    v_import("llvm-c/Core.void");

    v_import("function_hack.void");
    v_import("if_then_else.void");
}

{   voidc_enable_statement_if_then_else();
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   v_add_type("void_ptr", v_pointer_type(void, 0));
}


//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("voidc_arithmetic_intrinsic_module");

    v_set_module(module);       //- Sic!

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}


//---------------------------------------------------------------------
//- v_binop
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_binop_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "aux",     void_ptr);
    v_add_parameter_name(f, 2, "list",    v_ast_generic_list_ptr);
}
{
    builder = v_target_get_builder();

    tt = v_get_result_type();


    arg0 = v_alloca(v_ast_opaque_expr_sptr, 3);
    v_initialize(arg0, 3);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    base_arg = v_cast(arg0, v_ast_base_ptr);

    v_list_get_items(list, 0, base_arg);

    arg_list = v_cast(arg0, v_ast_expr_list_ptr);

    v_list_get_items(arg_list, 0, arg0, 3);


    v_set_result_type(UNREFERENCE_TAG);

    arg_base = v_cast(arg0, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor);

    arg = v_get_result_value();

    opv = LLVMConstIntGetZExtValue(arg);

    opc = v_cast(opv, LLVMOpcode);


    v_set_result_type(UNREFERENCE_TAG);

    arg_base = v_cast(arg1, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor);

    lhs = v_get_result_value();

    t = v_get_result_type();


    v_set_result_type(UNREFERENCE_TAG);

    arg_base = v_cast(arg2, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor);

    rhs = v_get_result_value();


    ret = LLVMBuildBinOp(builder, opc, lhs, rhs, "");


    v_set_result_type(tt);

    v_adopt_result(t, ret);


    v_terminate(arg0, 3);
}


//---------------------------------------------------------------------
//- Some utility...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr);

    v_store(v_type_ptr, typ0);

    ft = v_function_type(v_type_ptr, typ0, 1, false);

    //-----------------------------------------------------------------
    f = v_function_hack("make_return_type", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "type", v_type_ptr);
}
{
    f = v_type_is_vector(type);

    if (f)  ;
    else    v_return(bool);

    sz = v_type_vector_get_size(type);
    sc = v_type_vector_is_scalable(type);

    if (sc) v_return(v_svector_type(bool, sz));
    else    v_return(v_vector_type(bool, sz));
}


//---------------------------------------------------------------------
//- v_icmp
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_icmp_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "aux",     void_ptr);
    v_add_parameter_name(f, 2, "list",    v_ast_generic_list_ptr);
}
{
    builder = v_target_get_builder();

    tt = v_get_result_type();


    arg0 = v_alloca(v_ast_opaque_expr_sptr, 3);
    v_initialize(arg0, 3);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    base_arg = v_cast(arg0, v_ast_base_ptr);

    v_list_get_items(list, 0, base_arg);

    arg_list = v_cast(arg0, v_ast_expr_list_ptr);

    v_list_get_items(arg_list, 0, arg0, 3);


    v_set_result_type(UNREFERENCE_TAG);

    arg_base = v_cast(arg0, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor);

    arg = v_get_result_value();

    opv = LLVMConstIntGetZExtValue(arg);

    opc = v_cast(opv, LLVMIntPredicate);


    v_set_result_type(UNREFERENCE_TAG);

    arg_base = v_cast(arg1, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor);

    lhs = v_get_result_value();

    t = v_get_result_type();


    v_set_result_type(UNREFERENCE_TAG);

    arg_base = v_cast(arg2, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor);

    rhs = v_get_result_value();


    ret = LLVMBuildICmp(builder, opc, lhs, rhs, "");


    t = make_return_type(t);


    v_set_result_type(tt);

    v_adopt_result(t, ret);


    v_terminate(arg0, 3);
}


//---------------------------------------------------------------------
//- v_fcmp
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_fcmp_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "aux",     void_ptr);
    v_add_parameter_name(f, 2, "list",    v_ast_generic_list_ptr);
}
{
    builder = v_target_get_builder();

    tt = v_get_result_type();


    arg0 = v_alloca(v_ast_opaque_expr_sptr, 3);
    v_initialize(arg0, 3);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    base_arg = v_cast(arg0, v_ast_base_ptr);

    v_list_get_items(list, 0, base_arg);

    arg_list = v_cast(arg0, v_ast_expr_list_ptr);

    v_list_get_items(arg_list, 0, arg0, 3);


    v_set_result_type(UNREFERENCE_TAG);

    arg_base = v_cast(arg0, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor);

    arg = v_get_result_value();

    opv = LLVMConstIntGetZExtValue(arg);

    opc = v_cast(opv, LLVMRealPredicate);


    v_set_result_type(UNREFERENCE_TAG);

    arg_base = v_cast(arg1, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor);

    lhs = v_get_result_value();

    t = v_get_result_type();


    v_set_result_type(UNREFERENCE_TAG);

    arg_base = v_cast(arg2, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor);

    rhs = v_get_result_value();


    ret = LLVMBuildFCmp(builder, opc, lhs, rhs, "");


    t = make_return_type(t);


    v_set_result_type(tt);

    v_adopt_result(t, ret);


    v_terminate(arg0, 3);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_unit_load_module_to_jit(module);

    LLVMDisposeModule(module);
    v_set_module(0);
}

{   v_export_intrinsic("v_binop", voidc_binop_intrinsic, 0);
    v_export_intrinsic("v_icmp",  voidc_icmp_intrinsic, 0);
    v_export_intrinsic("v_fcmp",  voidc_fcmp_intrinsic, 0);
}


