//---------------------------------------------------------------------
//- Copyright (C) 2020-2021 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_import("function_hack.void"); }

{   v_import("vpeg_context.void");
    v_import("voidc_ast.void");
    v_import("voidc_compiler.void");

    v_import("llvm-c/Analysis.void");
    v_import("llvm-c/BitReader.void");
    v_import("llvm-c/BitWriter.void");
    v_import("llvm-c/Linker.void");
}



{   v_import("printf.void");
}



//---------------------------------------------------------------------
//- Some utility...
//---------------------------------------------------------------------
{   void_ptr  = v_pointer_type(void, 0);
    void_ptr_ = v_type_get_llvm_type(void_ptr);

    v_add_local_symbol("void_ptr_llvm_type", LLVMOpaqueType, void_ptr_);
}


//---------------------------------------------------------------------
//- Function Hack module #1
//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("function_hack_module_N1");

    v_set_module(module);

    typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    val0 = v_alloca(LLVMValueRef, 5);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);
    val3 = v_getelementptr(val0, 3);
    val4 = v_getelementptr(val0, 4);

    char_ptr = v_pointer_type(char, 0);
    void_ptr = v_pointer_type(void, 0);

    void_ptr_ = v_type_get_llvm_type(void_ptr);

    size_t_ = v_type_get_llvm_type(size_t);

    int_ = v_type_get_llvm_type(int);

    n0 = LLVMConstInt(int_, 0, 0);
    n1 = LLVMConstInt(int_, 1, 0);
    n2 = LLVMConstInt(int_, 2, 0);
    n3 = LLVMConstInt(int_, 3, 0);

    //-----------------------------------------------------------------
    builder = v_target_get_voidc_builder();


    //-----------------------------------------------------------------
    //- Saved global variables
    //-----------------------------------------------------------------
    //- var saved_module_g:   LLVMModuleRef;
    //- var saved_compiler_g: voidc_opaque_visitor_sptr;
    //-----------------------------------------------------------------
    LLVMModuleRef_ = v_type_get_llvm_type(LLVMModuleRef);

    saved_module_g = LLVMAddGlobal(module, LLVMModuleRef_, "saved_module_g");
    LLVMSetLinkage(saved_module_g, LLVMPrivateLinkage);

    saved_module_u = LLVMGetUndef(LLVMModuleRef_);

    LLVMSetInitializer(saved_module_g, saved_module_u);


    voidc_opaque_visitor_sptr_ = v_type_get_llvm_type(voidc_opaque_visitor_sptr);

    saved_compiler_g = LLVMAddGlobal(module, voidc_opaque_visitor_sptr_, "saved_compiler_g");
    LLVMSetLinkage(saved_compiler_g, LLVMPrivateLinkage);

    saved_compiler_u = LLVMGetUndef(voidc_opaque_visitor_sptr_);

    LLVMSetInitializer(saved_compiler_g, saved_compiler_u);


    //-----------------------------------------------------------------
    //- "Function hack" unit action helper
    //-----------------------------------------------------------------
    //- fun voidc_function_hack_unit_action_helper(buf: char_ptr, len: size_t)
    //- {
    //-     mod_buf = LLVMCreateMemoryBufferWithMemoryRange(buf, len, "mod_buf", 0);
    //-
    //-     mod_ptr = v_alloca(LLVMModuleRef);
    //-
    //-     llvm_ctx = v_target_get_llvm_ctx();
    //-
    //-     LLVMParseBitcodeInContext2(llvm_ctx, mod_buf, mod_ptr);
    //-
    //-     LLVMDisposeMemoryBuffer(mod_buf);
    //-
    //-     module = v_load(mod_ptr);
    //-
    //- //  LLVMDumpModule(module);
    //-
    //-     cur_module = v_get_module();
    //-
    //-     if (cur_module)
    //-     {
    //-         LLVMLinkModules2(cur_module, module);
    //-     }
    //-     else
    //-     {
    //-         voidc_prepare_module_for_jit(module);
    //-
    //-         PH = v_alloca(LLVMOrcModuleHandle);
    //-
    //-         LLVMOrcAddEagerlyCompiledIR(voidc_jit, PH, module,
    //-                                     voidc_resolver, 0
    //-                                    );
    //-     }
    //- }
    //-----------------------------------------------------------------
    v_store(char_ptr, typ0);
    v_store(size_t,   typ1);

    unit_action_helper_ft  = v_function_type(void, typ0, 2, false);
    unit_action_helper_ft_ = v_type_get_llvm_type(unit_action_helper_ft);
    unit_action_helper_f   = LLVMAddFunction(module, "voidc_function_hack_unit_action_helper", unit_action_helper_ft_);

    buffer = LLVMGetParam(unit_action_helper_f, 0);
    length = LLVMGetParam(unit_action_helper_f, 1);

    entry = LLVMAppendBasicBlock(unit_action_helper_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);


    mod_buf_n = LLVMBuildGlobalStringPtr(builder, "mod_buf", "mod_buf_n");

    v_store(buffer,    val0);
    v_store(length,    val1);
    v_store(mod_buf_n, val2);
    v_store(n0,        val3);

    llvm_create_memory_buffer_with_memory_range_f = v_obtain_function("LLVMCreateMemoryBufferWithMemoryRange");

    mod_buf_v = LLVMBuildCall(builder, llvm_create_memory_buffer_with_memory_range_f, val0, 4, "mod_buf_v");


    mod_ptr_v = LLVMBuildAlloca(builder, LLVMModuleRef_, "mod_ptr_v");


    get_llvm_ctx_f = v_obtain_function("v_target_get_llvm_ctx");

    llvm_ctx_v = LLVMBuildCall(builder, get_llvm_ctx_f, 0, 0, "llvm_ctx_v");


    v_store(llvm_ctx_v, val0);
    v_store(mod_buf_v,  val1);
    v_store(mod_ptr_v,  val2);

    llvm_parse_bitcode_in_context_2_f = v_obtain_function("LLVMParseBitcodeInContext2");

    ok_v = LLVMBuildCall(builder, llvm_parse_bitcode_in_context_2_f, val0, 3, "ok_v");


    v_store(mod_buf_v, val0);

    llvm_dispose_memory_buffer_f = v_obtain_function("LLVMDisposeMemoryBuffer");

    LLVMBuildCall(builder, llvm_dispose_memory_buffer_f, val0, 1, "");


    module_v = LLVMBuildLoad(builder, mod_ptr_v, "module_v");


//    v_store(module_v, val0);
//
//    llvm_dump_module_f = v_obtain_function("LLVMDumpModule");
//
//    LLVMBuildCall(builder, llvm_dump_module_f, val0, 1, "");


    get_module_f = v_obtain_function("v_get_module");

    cur_module_v = LLVMBuildCall(builder, get_module_f, 0, 0, "cur_module_v");


    then_b = LLVMAppendBasicBlock(unit_action_helper_f, "then_b");
    else_b = LLVMAppendBasicBlock(unit_action_helper_f, "else_b");


    ok_v = LLVMBuildIsNotNull(builder, cur_module_v, "ok_v");

    LLVMBuildCondBr(builder, ok_v, then_b, else_b);


    LLVMPositionBuilderAtEnd(builder, then_b);


    v_store(cur_module_v, val0);
    v_store(module_v,     val1);

    llvm_link_modules_2_f = v_obtain_function("LLVMLinkModules2");

    ok_v = LLVMBuildCall(builder, llvm_link_modules_2_f, val0, 2, "ok_v");


    LLVMBuildRetVoid(builder);


    LLVMPositionBuilderAtEnd(builder, else_b);


    //-----------------------------------------------------------------
    v_store(module_v, val0);

    prepare_for_jit_f = v_obtain_function("voidc_prepare_module_for_jit");

    LLVMBuildCall(builder, prepare_for_jit_f, val0, 1, "");


    //-----------------------------------------------------------------
    LLVMOrcModuleHandle_ = v_type_get_llvm_type(LLVMOrcModuleHandle);

    PH_v = LLVMBuildAlloca(builder, LLVMOrcModuleHandle_, "PH_v");

    jit_v = v_obtain_global("voidc_jit");

    resolver_v = v_obtain_global("voidc_resolver");

    nullptr_v = LLVMConstNull(void_ptr_);

    v_store(jit_v,      val0);
    v_store(PH_v,       val1);
    v_store(module_v,   val2);
    v_store(resolver_v, val3);
    v_store(nullptr_v,  val4);

    llvm_orc_add_eagerly_compiled_ir_f = v_obtain_function("LLVMOrcAddEagerlyCompiledIR");

    LLVMBuildCall(builder, llvm_orc_add_eagerly_compiled_ir_f, val0, 5, "");


    LLVMBuildRetVoid(builder);


    //-----------------------------------------------------------------
    //- "Function hack" compiler visitor method
    //-----------------------------------------------------------------
    //- private
    //- fun voidc_function_hack_visitor_method(visitor:   voidc_visitor_ptr,
    //-                                        aux:       void_ptr,
    //-                                        stmt_list: v_ast_stmt_list_ptr,
    //-                                        line:      int,
    //-                                        column:    int
    //-                                       )
    //- {
    //-     base_ast = v_cast(stmt_list, v_ast_base_ptr);
    //-
    //-     v_ast_accept_visitor(base_ast, visitor, aux);
    //-
    //-     builder = v_target_get_builder();
    //-
    //-     cur_b = LLVMGetInserBlock(builder);
    //-
    //-     trm = LLVMGetBasicBlockTerminator(cur_b);
    //-
    //-     if (trm) ;
    //-     else
    //-     {
    //-         LLVMBuildRetVoid(builder);
    //-     }
    //-
    //-     fun_module = v_get_module();
    //-
    //-     v_verify_module(fun_module);
    //-
    //-     old_module = v_load(saved_module_g);
    //-
    //-     v_set_module(old_module);
    //-
    //-     v_move(voidc_compiler, saved_compiler_g);
    //-
    //-     saved_target = v_target_get_global_ctx();
    //-
    //-     voidc_target = v_target_get_voidc_global_ctx();
    //-
    //-     v_target_set_global_ctx(voidc_target);
    //-
    //-     saved_module = v_get_module();                  //- WTF?
    //-
    //-     voidc_prepare_unit_action(line, column);
    //-
    //-     builder = v_target_get_builder();
    //-
    //-     fun_buffer = LLVMWriteBitcodeToMemoryBuffer(fun_module);
    //-
    //-     LLVMDisposeModule(fun_module);
    //-
    //-     fun_buffer_ptr  = LLVMGetBufferStart(fun_buffer);
    //-     fun_buffer_size = LLVMGetBufferSize(fun_buffer);
    //-
    //-     fun_buffer_len = v_cast(fun_buffer_size, int);
    //-
    //-     fun_buf_const = LLVMConstString(fun_buffer_ptr, fun_buffer_len, 1);
    //-
    //-     fun_buf_const_type = LLVMTypeOf(fun_buf_const);
    //-
    //-     unit_module = v_get_module();
    //-
    //-     fun_buf_glob = LLVMAddGlobal(unit_module, fun_buf_const_type, "fun_buffer_g");
    //-
    //-     LLVMSetInitializer(fun_buf_glob, fun_buf_const);
    //-
    //-     val0 = v_alloca(LLVMValueRef, 2);
    //-     val1 = v_getelementptr(val0, 1);
    //-
    //-     int_ = v_type_get_llvm_type(int);
    //-
    //-     n0 = LLVMConstInt(int_, 0, 0);
    //-
    //-     v_store(n0, val0);
    //-     v_store(n0, val1);
    //-
    //-     fun_buf_const_ptr = LLVMBuildGEP(builder, fun_buf_glob, val0, 2, "fun_buf_const_ptr");
    //-
    //-     unit_action_helper_f = v_obtain_function("voidc_function_hack_unit_action_helper");
    //-
    //-     size_t_ = v_type_get_llvm_type(size_t);
    //-
    //-     fun_buf_size_const = LLVMConstInt(size_t_, fun_buffer_size, 0);
    //-
    //-     v_store(fun_buf_const_ptr,  val0);
    //-     v_store(fun_buf_size_const, val1);
    //-
    //-     LLVMBuildCall(builder, unit_action_helper_f, val0, 2, "");
    //-
    //-     voidc_finish_unit_action();
    //-
    //-     LLVMDisposeMemoryBuffer(fun_buffer);
    //-
    //-     v_set_module(saved_module);
    //-
    //-     v_target_set_global_ctx(saved_target);
    //- }
    //-----------------------------------------------------------------
    v_ast_unit_visitor_method_t_ = v_type_get_llvm_type(v_ast_unit_visitor_method_t);

    method_f = LLVMAddFunction(module, "voidc_function_hack_visitor_method", v_ast_unit_visitor_method_t_);
    LLVMSetLinkage(method_f, LLVMPrivateLinkage);

    visitor   = LLVMGetParam(method_f, 0);
    aux       = LLVMGetParam(method_f, 1);
    stmt_list = LLVMGetParam(method_f, 2);
    line      = LLVMGetParam(method_f, 3);
    column    = LLVMGetParam(method_f, 4);

    entry = LLVMAppendBasicBlock(method_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);


    v_ast_base_ptr_ = v_type_get_llvm_type(v_ast_base_ptr);

    base_ast = LLVMBuildBitCast(builder, stmt_list, v_ast_base_ptr_, "base_ast");

    v_store(base_ast, val0);
    v_store(visitor,  val1);
    v_store(aux,      val2);

    accept_visitor_f = v_obtain_function("v_ast_accept_visitor");

    LLVMBuildCall(builder, accept_visitor_f, val0, 3, "");


    get_builder_f = v_obtain_function("v_target_get_builder");

    builder_v = LLVMBuildCall(builder, get_builder_f, val0, 0, "builder_v");


    v_store(builder_v, val0);

    llvm_get_insert_block_f = v_obtain_function("LLVMGetInsertBlock");

    cur_b = LLVMBuildCall(builder, llvm_get_insert_block_f, val0, 1, "cur_b");


    v_store(cur_b, val0);

    llvm_get_basic_block_terminator_f = v_obtain_function("LLVMGetBasicBlockTerminator");

    trm_v = LLVMBuildCall(builder, llvm_get_basic_block_terminator_f, val0, 1, "trm_v");


    then_b = LLVMAppendBasicBlock(method_f, "then_b");
    else_b = LLVMAppendBasicBlock(method_f, "else_b");


    ok_v = LLVMBuildIsNull(builder, trm_v, "ok_v");

    LLVMBuildCondBr(builder, ok_v, then_b, else_b);


    LLVMPositionBuilderAtEnd(builder, then_b);


    v_store(builder_v, val0);

    llvm_build_ret_void_f = v_obtain_function("LLVMBuildRetVoid");

    LLVMBuildCall(builder, llvm_build_ret_void_f, val0, 1, "");


    LLVMBuildBr(builder, else_b);


    LLVMPositionBuilderAtEnd(builder, else_b);


    fun_module_v = LLVMBuildCall(builder, get_module_f, 0, 0, "fun_module_v");


    voidc_verify_module_f = v_obtain_function("v_verify_module");

    v_store(fun_module_v, val0);

    LLVMBuildCall(builder, voidc_verify_module_f, val0, 1, "");


    old_module_v = LLVMBuildLoad(builder, saved_module_g, "old_module_v");

    v_store(old_module_v, val0);

    set_module_f = v_obtain_function("v_set_module");

    LLVMBuildCall(builder, set_module_f, val0, 1, "");


    voidc_compiler_v = v_obtain_global("voidc_compiler");

    v_store(voidc_compiler_v, val0);
    v_store(saved_compiler_g, val1);
    v_store(n1,               val2);

    vis_move_f = v_obtain_dict_function(v_util_move_dict, voidc_opaque_visitor_sptr);

    LLVMBuildCall(builder, vis_move_f, val0, 3, "");


    get_global_ctx_f = v_obtain_function("v_target_get_global_ctx");

    saved_target_v = LLVMBuildCall(builder, get_global_ctx_f, val0, 0, "saved_target_v");


    get_voidc_global_ctx_f = v_obtain_function("v_target_get_voidc_global_ctx");

    voidc_target_v = LLVMBuildCall(builder, get_voidc_global_ctx_f, val0, 0, "voidc_target_v");


    v_store(voidc_target_v, val0);

    set_global_ctx_f = v_obtain_function("v_target_set_global_ctx");

    LLVMBuildCall(builder, set_global_ctx_f, val0, 1, "");


    saved_module_v = LLVMBuildCall(builder, get_module_f, 0, 0, "saved_module_v");


    v_store(line,   val0);
    v_store(column, val1);

    prepare_unit_act_f = v_obtain_function("voidc_prepare_unit_action");

    LLVMBuildCall(builder, prepare_unit_act_f, val0, 2, "");


    builder_v = LLVMBuildCall(builder, get_builder_f, val0, 0, "builder_v");


    v_store(fun_module_v, val0);

    llvm_write_bitcode_to_memory_buffer_f = v_obtain_function("LLVMWriteBitcodeToMemoryBuffer");

    fun_buffer_v = LLVMBuildCall(builder, llvm_write_bitcode_to_memory_buffer_f, val0, 1, "fun_buffer_v");


    llvm_dispose_module_f = v_obtain_function("LLVMDisposeModule");

    LLVMBuildCall(builder, llvm_dispose_module_f, val0, 1, "");


    v_store(fun_buffer_v, val0);

    llvm_get_buffer_start_f = v_obtain_function("LLVMGetBufferStart");

    fun_buffer_ptr_v = LLVMBuildCall(builder, llvm_get_buffer_start_f, val0, 1, "fun_buffer_ptr_v");

    llvm_get_buffer_size_f = v_obtain_function("LLVMGetBufferSize");

    fun_buffer_size_v = LLVMBuildCall(builder, llvm_get_buffer_size_f, val0, 1, "fun_buffer_size_v");


    fun_buffer_len_v = LLVMBuildTrunc(builder, fun_buffer_size_v, int_, "fun_buffer_len_v");

    v_store(fun_buffer_ptr_v, val0);
    v_store(fun_buffer_len_v, val1);
    v_store(n1,               val2);

    llvm_const_string_f = v_obtain_function("LLVMConstString");

    fun_buf_const_v = LLVMBuildCall(builder, llvm_const_string_f, val0, 3, "fun_buf_const_v");


    v_store(fun_buf_const_v, val0);

    llvm_type_of_f = v_obtain_function("LLVMTypeOf");

    fun_buf_const_type_v = LLVMBuildCall(builder, llvm_type_of_f, val0, 1, "fun_buf_const_type_v");


    unit_module_v = LLVMBuildCall(builder, get_module_f, 0, 0, "unit_module_v");

    fun_buf_const_n = LLVMBuildGlobalStringPtr(builder, "fun_buffer_g", "fun_buf_const_n");

    v_store(unit_module_v,        val0);
    v_store(fun_buf_const_type_v, val1);
    v_store(fun_buf_const_n,      val2);

    llvm_add_global_f = v_obtain_function("LLVMAddGlobal");

    fun_buf_glob_v = LLVMBuildCall(builder, llvm_add_global_f, val0, 3, "fun_buf_glob_v");


    v_store(fun_buf_glob_v,  val0);
    v_store(fun_buf_const_v, val1);

    llvm_set_initializer_f = v_obtain_function("LLVMSetInitializer");

    LLVMBuildCall(builder, llvm_set_initializer_f, val0, 2, "");


    LLVMValueRef_ = v_type_get_llvm_type(LLVMValueRef);

    val0_v = LLVMBuildArrayAlloca(builder, LLVMValueRef_, n2, "val0_v");

    v_store(n1, val0);

    val1_v = LLVMBuildGEP(builder, val0_v, val0, 1, "val1_v");


    int_v = v_obtain_global("int");

    v_store(int_v, val0);

    get_llvm_type_f = v_obtain_function("v_type_get_llvm_type");

    int__v = LLVMBuildCall(builder, get_llvm_type_f, val0, 1, "int__v");

    long_long_ = v_type_get_llvm_type(long_long);

    n0ll = LLVMBuildZExtOrBitCast(builder, n0, long_long_, "n0ll");

    v_store(int__v, val0);
    v_store(n0ll,   val1);
    v_store(n0,     val2);

    llvm_const_int_f = v_obtain_function("LLVMConstInt");

    n0_v = LLVMBuildCall(builder, llvm_const_int_f, val0, 3, "n0_v");


    LLVMBuildStore(builder, n0_v, val0_v);
    LLVMBuildStore(builder, n0_v, val1_v);


    fun_buf_const_ptr_n = LLVMBuildGlobalStringPtr(builder, "fun_buf_const_ptr_vv", "fun_buf_const_ptr_n");

    v_store(builder_v,           val0);
    v_store(fun_buf_glob_v,      val1);
    v_store(val0_v,              val2);
    v_store(n2,                  val3);
    v_store(fun_buf_const_ptr_n, val4);

    llvm_build_gep_f = v_obtain_function("LLVMBuildGEP");

    fun_buf_const_ptr_v = LLVMBuildCall(builder, llvm_build_gep_f, val0, 5, "fun_buf_const_ptr_v");


    unit_action_helper_n = LLVMBuildGlobalStringPtr(builder, "voidc_function_hack_unit_action_helper", "unit_action_helper_n");

    v_store(unit_action_helper_n, val0);

    obtain_fun_f = v_obtain_function("v_obtain_function");

    unit_action_helper_fv = LLVMBuildCall(builder, obtain_fun_f, val0, 1, "unit_action_helper_fv");


    size_t_v = v_obtain_global("size_t");

    v_store(size_t_v, val0);

    size_t__v = LLVMBuildCall(builder, get_llvm_type_f, val0, 1, "size_t__v");

    v_store(size_t__v,         val0);
    v_store(fun_buffer_size_v, val1);
    v_store(n0,                val2);

    fun_buf_size_const_v = LLVMBuildCall(builder, llvm_const_int_f, val0, 3, "fun_buf_size_const_v");


    LLVMBuildStore(builder, fun_buf_const_ptr_v,  val0_v);
    LLVMBuildStore(builder, fun_buf_size_const_v, val1_v);


    empty_str = LLVMBuildGlobalStringPtr(builder, "", "empty_str");

    v_store(builder_v,             val0);
    v_store(unit_action_helper_fv, val1);
    v_store(val0_v,                val2);
    v_store(n2,                    val3);
    v_store(empty_str,             val4);

    llvm_build_call_f = v_obtain_function("LLVMBuildCall");

    LLVMBuildCall(builder, llvm_build_call_f, val0, 5, "");


    finish_unit_act_f = v_obtain_function("voidc_finish_unit_action");

    LLVMBuildCall(builder, finish_unit_act_f, 0, 0, "");


    v_store(fun_buffer_v, val0);

    LLVMBuildCall(builder, llvm_dispose_memory_buffer_f, val0, 1, "");


    v_store(saved_module_v, val0);

    LLVMBuildCall(builder, set_module_f, val0, 1, "");


    v_store(saved_target_v, val0);

    LLVMBuildCall(builder, set_global_ctx_f, val0, 1, "");


    LLVMBuildRetVoid(builder);


    //-----------------------------------------------------------------
    //- "Function hack" intrinsic helper
    //-----------------------------------------------------------------
    //- fun voidc_function_hack_intrinsic_helper(fun_name: char_ptr, fun_type: v_type_ptr) -> LLVMValueRef
    //- {
    //-     old_module = v_get_module();
    //-
    //-     v_store(old_module, saved_module_g);
    //-
    //-     llvm_ctx = v_target_get_llvm_ctx();
    //-
    //-     fun_module = LLVMModuleCreateWithNameInContext("voidc_function_hack_function_module", llvm_ctx);
    //-
    //-     v_set_module(fun_module);
    //-
    //-     fun_type_ = v_type_get_llvm_type(fun_type);
    //-
    //-     fun_value = LLVMAddFunction(fun_module, fun_name, fun_type_);
    //-
    //-     entry = LLVMAppendBasicBlock(fun_value, "entry");
    //-
    //-     builder = v_target_get_builder();
    //-
    //-     LLVMPositionBuilderAtEnd(builder, entry);
    //-
    //-     ret_type = v_type_function_get_return_type(fun_type);
    //-
    //-     v_add_variable("voidc.internal_return_type", ret_type, 0);
    //-
    //-     v_initialize(saved_compiler_g);
    //-
    //-     v_copy(saved_compiler_g, voidc_compiler);
    //-
    //-     v_visitor_set_method_ast_unit_t(voidc_compiler, voidc_compiler, voidc_function_hack_visitor_method);
    //-
    //-     v_return(fun_value);
    //- }
    //-----------------------------------------------------------------
    v_store(char_ptr,   typ0);
    v_store(v_type_ptr, typ1);

    helper_ft  = v_function_type(LLVMValueRef, typ0, 2, 0);
    helper_ft_ = v_type_get_llvm_type(helper_ft);
    helper_f   = LLVMAddFunction(module, "voidc_function_hack_intrinsic_helper", helper_ft_);

    fun_name = LLVMGetParam(helper_f, 0);       //- :char_ptr
    fun_type = LLVMGetParam(helper_f, 1);       //- :v_type_ptr

    entry = LLVMAppendBasicBlock(helper_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);


    old_module_v = LLVMBuildCall(builder, get_module_f, 0, 0, "old_module_v");

    LLVMBuildStore(builder, old_module_v, saved_module_g);


    llvm_ctx_v = LLVMBuildCall(builder, get_llvm_ctx_f, 0, 0, "llvm_ctx_v");


    fun_module_n = LLVMBuildGlobalStringPtr(builder, "voidc_function_hack_function_module", "fun_module_n");

    v_store(fun_module_n, val0);
    v_store(llvm_ctx_v,   val1);

    llvm_module_create_with_name_in_context_f = v_obtain_function("LLVMModuleCreateWithNameInContext");

    fun_module_v = LLVMBuildCall(builder, llvm_module_create_with_name_in_context_f, val0, 2, "fun_module_v");


    v_store(fun_module_v, val0);

    LLVMBuildCall(builder, set_module_f, val0, 1, "");


    v_store(fun_type, val0);

    fun_type_ = LLVMBuildCall(builder, get_llvm_type_f, val0, 1, "fun_type_");


    v_store(fun_module_v, val0);
    v_store(fun_name,     val1);
    v_store(fun_type_,    val2);

    llvm_add_function_f = v_obtain_function("LLVMAddFunction");

    fun_value = LLVMBuildCall(builder, llvm_add_function_f, val0, 3, "fun_value");


    entry_n = LLVMBuildGlobalStringPtr(builder, "entry", "entry_n");

    v_store(fun_value, val0);
    v_store(entry_n,   val1);

    llvm_append_basic_block_f = v_obtain_function("LLVMAppendBasicBlock");

    entry_v = LLVMBuildCall(builder, llvm_append_basic_block_f, val0, 2, "entry_v");


    builder_v = LLVMBuildCall(builder, get_builder_f, val0, 0, "builder_v");


    v_store(builder_v, val0);
    v_store(entry_v,   val1);

    llvm_position_builder_at_end_f = v_obtain_function("LLVMPositionBuilderAtEnd");

    LLVMBuildCall(builder, llvm_position_builder_at_end_f, val0, 2, "");


    v_store(fun_type, val0);

    get_return_type_f = v_obtain_function("v_type_function_get_return_type");

    ret_type_v = LLVMBuildCall(builder, get_return_type_f, val0, 1, "ret_type_v");


    ret_type_var_n = LLVMBuildGlobalStringPtr(builder, "voidc.internal_return_type", "ret_type_var_n");

    LLVMValueRef_    = v_type_get_llvm_type(LLVMValueRef);
    null_value_ref_v = LLVMConstNull(LLVMValueRef_);

    v_store(ret_type_var_n,   val0);
    v_store(ret_type_v,       val1);
    v_store(null_value_ref_v, val2);

    add_var_f = v_obtain_function("v_add_variable");

    LLVMBuildCall(builder, add_var_f, val0, 3, "");


    v_store(saved_compiler_g, val0);
    v_store(n1,               val1);

    vis_init_f = v_obtain_dict_function(v_util_initialize_dict, voidc_opaque_visitor_sptr);

    LLVMBuildCall(builder, vis_init_f, val0, 2, "");


//  v_store(saved_compiler_g, val0);
    v_store(voidc_compiler_v, val1);
    v_store(n1,               val2);

    vis_copy_f = v_obtain_dict_function(v_util_copy_dict, voidc_opaque_visitor_sptr);

    LLVMBuildCall(builder, vis_copy_f, val0, 3, "");


    v_store(voidc_compiler_v, val0);
//  v_store(voidc_compiler_v, val1);
    v_store(method_f,         val2);

    set_method_f = v_obtain_function("v_visitor_set_method_ast_unit_t");

    LLVMBuildCall(builder, set_method_f, val0, 3, "");


    LLVMBuildRet(builder, fun_value);


    //-----------------------------------------------------------------
    //- "Function hack" intrinsic
    //-----------------------------------------------------------------
    //- fun voidc_function_hack_intrinsic(visitor: voidc_visitor_ptr, aux: void_ptr, arg_list: v_ast_arg_list_ptr)
    //- {
    //-     builder = v_target_get_builder();
    //-
    //-     base_args = v_cast(arg_list, v_ast_base_ptr);
    //-
    //-     v_ast_accept_visitor(base_args, visitor, aux);
    //-
    //-     fun_name = v_get_argument_value(0);     //- :char_ptr
    //-     fun_type = v_get_argument_value(1);     //- :v_type_ptr
    //-
    //-     add_loc_sym_f = v_obtain_function("v_add_local_symbol");
    //-
    //-     arg0 = v_alloca(LLVMValueRef, 3);
    //-     arg1 = v_getelementptr(arg0, 1);
    //-     arg2 = v_getelementptr(arg0, 2);
    //-
    //-     v_store(fun_name, arg0);
    //-     v_store(fun_type, arg1);
    //-     v_store(0,        arg2);
    //-
    //-     LLVMBuildCall(builder, add_loc_sym_f, arg0, 3, "");
    //-
    //-     has_grammar_f = v_obtain_function("voidc_has_grammar");
    //-
    //-     ok_v = LLVMBuildCall(builder, has_grammar_f, arg0, 0, "ok_v");
    //-
    //-     cur_b = LLVMGetInsertBlock(builder);
    //-     cur_f = LLVMGetBasicBlockParent(cur_b);
    //-
    //-     else_b = LLVMAppendBasicBlock(cur_f, "else_b");     //- "else" first!
    //-     then_b = LLVMAppendBasicBlock(cur_f, "then_b");
    //-
    //-     LLVMBuildCondBr(builder, ok_v, then_b, else_b);
    //-
    //-     LLVMPositionBuilderAtEnd(builder, else_b);          //- "else" first!
    //-
    //-     LLVMBuildRetVoid(builder);
    //-
    //-     LLVMPositionBuilderAtEnd(builder, then_b);
    //-
    //-     helper_f = v_obtain_function("voidc_function_hack_intrinsic_helper");
    //-
    //-     ret = LLVMBuildCall(builder, helper_f, arg0, 2, "");
    //-
    //-     v_set_return_type(LLVMValueRef);
    //-     v_set_return_value(ret);
    //-
    //-     v_clear_arguments();
    //- }
    //-----------------------------------------------------------------
    voidc_intrinsic_t_ = v_type_get_llvm_type(voidc_intrinsic_t);

    intrinsic_f = LLVMAddFunction(module, "voidc_function_hack_intrinsic", voidc_intrinsic_t_);

    visitor  = LLVMGetParam(intrinsic_f, 0);
    aux      = LLVMGetParam(intrinsic_f, 1);
    arg_list = LLVMGetParam(intrinsic_f, 2);

    entry = LLVMAppendBasicBlock(intrinsic_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);


    builder_v = LLVMBuildCall(builder, get_builder_f, val0, 0, "builder_v");


    v_ast_base_ptr_ = v_type_get_llvm_type(v_ast_base_ptr);

    base_args = LLVMBuildBitCast(builder, arg_list, v_ast_base_ptr_, "base_args");

    accept_visitor_f = v_obtain_function("v_ast_accept_visitor");

    v_store(base_args, val0);
    v_store(visitor,   val1);
    v_store(aux,       val2);

    LLVMBuildCall(builder, accept_visitor_f, val0, 3, "");


    get_arg_val_f = v_obtain_function("v_get_argument_value");

    v_store(n0, val0);

    fun_name = LLVMBuildCall(builder, get_arg_val_f, val0, 1, "fun_name");

    v_store(n1, val0);

    fun_type = LLVMBuildCall(builder, get_arg_val_f, val0, 1, "fun_type");


    add_loc_sym_fn = LLVMBuildGlobalStringPtr(builder, "v_add_local_symbol", "add_loc_sym_fn");

    v_store(add_loc_sym_fn, val0);

    add_loc_sym_fv = LLVMBuildCall(builder, obtain_fun_f, val0, 1, "add_loc_sym_fv");


    arg0 = LLVMBuildArrayAlloca(builder, LLVMValueRef_, n3, "arg0");

    LLVMBuildStore(builder, fun_name, arg0);

    v_store(n1, val0);

    arg1 = LLVMBuildGEP(builder, arg0, val0, 1, "arg1");

    LLVMBuildStore(builder, fun_type, arg1);

    v_store(n2, val0);

    arg2 = LLVMBuildGEP(builder, arg0, val0, 1, "arg2");

    void_ptr__v = v_obtain_global("void_ptr_llvm_type");

    v_store(void_ptr__v, val0);

    llvm_const_null_f = v_obtain_function("LLVMConstNull");

    vnull_v = LLVMBuildCall(builder, llvm_const_null_f, val0, 1, "vnull_v");

    LLVMBuildStore(builder, vnull_v, arg2);


    v_store(builder_v,      val0);
    v_store(add_loc_sym_fv, val1);
    v_store(arg0,           val2);
    v_store(n3,             val3);
    v_store(empty_str,      val4);

    LLVMBuildCall(builder, llvm_build_call_f, val0, 5, "");


    has_grammar_fn = LLVMBuildGlobalStringPtr(builder, "voidc_has_grammar", "has_grammar_fn");

    v_store(has_grammar_fn, val0);

    has_grammar_fv = LLVMBuildCall(builder, obtain_fun_f, val0, 1, "has_grammar_fv");


    ok_str = LLVMBuildGlobalStringPtr(builder, "ok", "ok_str");


    v_store(builder_v,      val0);
    v_store(has_grammar_fv, val1);
    v_store(arg0,           val2);
    v_store(n0,             val3);
    v_store(ok_str,         val4);

    ok_v = LLVMBuildCall(builder, llvm_build_call_f, val0, 5, "ok_v");


    v_store(builder_v, val0);

    cur_b = LLVMBuildCall(builder, llvm_get_insert_block_f, val0, 1, "cur_b");

    llvm_get_basic_block_parent_f = v_obtain_function("LLVMGetBasicBlockParent");

    v_store(cur_b, val0);

    cur_fv = LLVMBuildCall(builder, llvm_get_basic_block_parent_f, val0, 1, "cur_fv");

    llvm_append_basic_block_f = v_obtain_function("LLVMAppendBasicBlock");

    then_b_str = LLVMBuildGlobalStringPtr(builder, "then_b", "then_b_str");
    else_b_str = LLVMBuildGlobalStringPtr(builder, "else_b", "else_b_str");

    v_store(cur_fv,     val0);
    v_store(else_b_str, val1);      //- "else" first!

    else_bv = LLVMBuildCall(builder, llvm_append_basic_block_f, val0, 2, "else_bv");

    v_store(then_b_str, val1);

    then_bv = LLVMBuildCall(builder, llvm_append_basic_block_f, val0, 2, "then_bv");


    llvm_build_cond_br_f = v_obtain_function("LLVMBuildCondBr");

    v_store(builder_v, val0);
    v_store(ok_v,      val1);
    v_store(then_bv,   val2);
    v_store(else_bv,   val3);

    LLVMBuildCall(builder, llvm_build_cond_br_f, val0, 4, "");


    v_store(else_bv, val1);         //- "else" first!

    LLVMBuildCall(builder, llvm_position_builder_at_end_f, val0, 2, "");

    LLVMBuildCall(builder, llvm_build_ret_void_f, val0, 1, "");


    v_store(then_bv, val1);

    LLVMBuildCall(builder, llvm_position_builder_at_end_f, val0, 2, "");


    helper_fn = LLVMBuildGlobalStringPtr(builder, "voidc_function_hack_intrinsic_helper", "helper_fn");

    v_store(helper_fn, val0);

    helper_fv = LLVMBuildCall(builder, obtain_fun_f, val0, 1, "helper_fv");


    v_store(builder_v, val0);
    v_store(helper_fv, val1);
    v_store(arg0,      val2);
    v_store(n2,        val3);
    v_store(empty_str, val4);

    ret_v = LLVMBuildCall(builder, llvm_build_call_f, val0, 5, "ret_v");


    set_ret_type_f = v_obtain_function("v_set_return_type");

    llvm_value_ref_v = v_obtain_global("LLVMValueRef");

    v_store(llvm_value_ref_v, val0);

    LLVMBuildCall(builder, set_ret_type_f, val0, 1, "");


    set_ret_value_f = v_obtain_function("v_set_return_value");

    v_store(ret_v, val0);

    LLVMBuildCall(builder, set_ret_value_f, val0, 1, "");


    //- That's it...

    clear_args_f = v_obtain_function("v_clear_arguments");

    LLVMBuildCall(builder, clear_args_f, 0, 0, "");


    LLVMBuildRetVoid(builder);


    //-----------------------------------------------------------------
    //- "Return" intrinsic
    //-----------------------------------------------------------------
    //- fun voidc_function_hack_return_intrinsic(visitor: voidc_visitor_ptr, aux: void_ptr, arg_list: v_ast_arg_list_ptr)
    //- {
    //-     builder = v_target_get_builder();
    //-
    //-     args_count = v_list_get_size(arg_list);
    //-
    //-     if (args_count)
    //-     {
    //-         arg0 = v_alloca(v_ast_opaque_argument_sptr);
    //-         v_initialize(arg0);
    //-
    //-         v_list_get_items(arg_list, 0, arg0, 1);
    //-
    //-         ret_type = v_get_variable_type("voidc.internal_return_type");
    //-
    //-         v_add_argument_type(ret_type);
    //-
    //-         base_arg0 = v_cast(arg0, v_ast_base_ptr);
    //-
    //-         v_ast_accept_visitor(base_arg0, visitor, aux);
    //-
    //-         ret = v_get_argument_value(0);
    //-
    //-         LLVMBuildRet(builder, ret);
    //-
    //-         v_terminate(arg0);
    //-
    //-         v_clear_arguments();
    //-     }
    //-     else
    //-     {
    //-         LLVMBuildRetVoid(builder);
    //-     }
    //- }
    //-----------------------------------------------------------------
    return_f = LLVMAddFunction(module, "voidc_function_hack_return_intrinsic", voidc_intrinsic_t_);

    visitor  = LLVMGetParam(return_f, 0);
    aux      = LLVMGetParam(return_f, 1);
    arg_list = LLVMGetParam(return_f, 2);

    entry = LLVMAppendBasicBlock(return_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);


    builder_v = LLVMBuildCall(builder, get_builder_f, val0, 0, "builder_v");


    v_store(arg_list, val0);

    list_get_size_f = v_obtain_dict_function(v_util_list_get_size_dict, v_ast_opaque_arg_list_sptr);

    args_count_v = LLVMBuildCall(builder, list_get_size_f, val0, 1, "args_count_v");


    then_b = LLVMAppendBasicBlock(return_f, "then_b");
    else_b = LLVMAppendBasicBlock(return_f, "else_b");


    ok_v = LLVMBuildIsNotNull(builder, args_count_v, "ok_v");

    LLVMBuildCondBr(builder, ok_v, then_b, else_b);


    LLVMPositionBuilderAtEnd(builder, then_b);


    v_ast_opaque_argument_sptr_ = v_type_get_llvm_type(v_ast_opaque_argument_sptr);

    arg0_v = LLVMBuildAlloca(builder, v_ast_opaque_argument_sptr_, "arg0_v");


    v_store(arg0_v, val0);
    v_store(n1,     val1);

    arg_init_f = v_obtain_dict_function(v_util_initialize_dict, v_ast_opaque_argument_sptr);

    LLVMBuildCall(builder, arg_init_f, val0, 2, "");


    v_store(arg_list, val0);
    v_store(n0,       val1);
    v_store(arg0_v,   val2);
    v_store(n1,       val3);

    list_get_items_f = v_obtain_dict_function(v_util_list_get_items_dict, v_ast_opaque_arg_list_sptr);

    LLVMBuildCall(builder, list_get_items_f, val0, 4, "");


    v_store(ret_type_var_n, val0);

    get_var_type_f = v_obtain_function("v_get_variable_type");

    ret_type_v = LLVMBuildCall(builder, get_var_type_f, val0, 1, "ret_type_v");


    v_store(ret_type_v, val0);

    add_arg_type_f = v_obtain_function("v_add_argument_type");

    LLVMBuildCall(builder, add_arg_type_f, val0, 1, "");


    base_arg0 = LLVMBuildBitCast(builder, arg0_v, v_ast_base_ptr_, "base_arg0");

    v_store(base_arg0, val0);
    v_store(visitor,   val1);
    v_store(aux,       val2);

    LLVMBuildCall(builder, accept_visitor_f, val0, 3, "");


    v_store(n0, val0);

    ret_v = LLVMBuildCall(builder, get_arg_val_f, val0, 1, "ret_v");


    v_store(builder_v, val0);
    v_store(ret_v,     val1);

    llvm_build_ret_f = v_obtain_function("LLVMBuildRet");

    LLVMBuildCall(builder, llvm_build_ret_f, val0, 2, "");


    v_store(arg0_v, val0);
    v_store(n1,     val1);

    arg_term_f = v_obtain_dict_function(v_util_terminate_dict, v_ast_opaque_argument_sptr);

    LLVMBuildCall(builder, arg_term_f, val0, 2, "");


    LLVMBuildCall(builder, clear_args_f, 0, 0, "");


    LLVMBuildRetVoid(builder);


    LLVMPositionBuilderAtEnd(builder, else_b);


    v_store(builder_v, val0);

    LLVMBuildCall(builder, llvm_build_ret_void_f, val0, 1, "");


    LLVMBuildRetVoid(builder);


    //-----------------------------------------------------------------
    LLVMClearInsertionPosition(builder);


    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_prepare_module_for_jit(module);

    //-----------------------------------------------------------------
    PH = v_alloca(LLVMOrcModuleHandle);

    LLVMOrcAddEagerlyCompiledIR(voidc_jit, PH, module,
                                voidc_resolver, 0
                               );

    //-----------------------------------------------------------------
    v_add_symbol_type("voidc_function_hack_unit_action_helper", unit_action_helper_ft);
    v_add_symbol_type("voidc_function_hack_intrinsic_helper",   helper_ft);

    v_add_local_symbol("voidc_function_hack_intrinsic",        voidc_intrinsic_t, 0);   //- Sic!
    v_add_local_symbol("voidc_function_hack_return_intrinsic", voidc_intrinsic_t, 0);   //- Sic!
}

{   v_add_intrinsic("v_function_hack", voidc_function_hack_intrinsic);
    v_add_intrinsic("v_return",        voidc_function_hack_return_intrinsic);
}


//---------------------------------------------------------------------
//- Function Hack module #2
//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("function_hack_module_N2");

    v_set_module(module);


    char_ptr = v_pointer_type(char, 0);

    v_add_local_symbol("char_ptr", voidc_opaque_type, char_ptr);
}


//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(LLVMValueRef, typ0);
    v_store(int,          typ1);
    v_store(char_ptr,     typ2);
    v_store(v_type_ptr,   typ3);

    ft = v_function_type(LLVMValueRef, typ0, 4, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_add_parameter_name", ft);

    p0 = LLVMGetParam(f, 0);    v_add_variable("fun",  LLVMValueRef, p0);
    p1 = LLVMGetParam(f, 1);    v_add_variable("num",  int,          p1);
    p2 = LLVMGetParam(f, 2);    v_add_variable("name", char_ptr,     p2);
    p3 = LLVMGetParam(f, 3);    v_add_variable("type", v_type_ptr,   p3);
}
{
    p = LLVMGetParam(fun, num);

    LLVMSetValueName(p, name);

    v_add_variable(name, type, p);

    v_return(p);
}


//---------------------------------------------------------------------
{
    typ = v_alloca(v_type_ptr);

    v_store(char_ptr, typ);

    ft = v_function_type(void, typ, 1, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_make_symbol_global", ft);

    p0 = LLVMGetParam(f, 0);    v_add_variable("sym_name", char_ptr, p0);
}
{
    sym_type = v_find_symbol_type(sym_name);

    v_add_symbol_type(sym_name, sym_type);
}


//---------------------------------------------------------------------
{
    typ = v_alloca(v_type_ptr);

    v_store(char_ptr, typ);

    ft = v_function_type(void, typ, 1, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_make_function_private", ft);

    p0 = LLVMGetParam(f, 0);    v_add_variable("fun_name", char_ptr, p0);
}
{
    module = v_get_module();

    f = LLVMGetNamedFunction(module, fun_name);

    LLVMSetLinkage(f, LLVMPrivateLinkage);
}

//---------------------------------------------------------------------
{
    typ = v_alloca(v_type_ptr);

    v_store(char_ptr, typ);

    ft = v_function_type(void, typ, 1, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_make_global_private", ft);

    p0 = LLVMGetParam(f, 0);    v_add_variable("var_name", char_ptr, p0);
}
{
    module = v_get_module();

    g = LLVMGetNamedGlobal(module, var_name);

    LLVMSetLinkage(g, LLVMPrivateLinkage);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_prepare_module_for_jit(module);

    //-----------------------------------------------------------------
    PH = v_alloca(LLVMOrcModuleHandle);

    LLVMOrcAddEagerlyCompiledIR(voidc_jit, PH, module,
                                voidc_resolver, 0
                               );

    //-----------------------------------------------------------------
    v_set_module(0);
}


//---------------------------------------------------------------------
{
    v_make_symbol_global("v_add_parameter_name");
    v_make_symbol_global("v_make_symbol_global");
    v_make_symbol_global("v_make_function_private");
    v_make_symbol_global("v_make_global_private");
}


