//---------------------------------------------------------------------
//- Copyright (C) 2020 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_import("voidc_context.void"); }

{   v_import("vpeg_grammar.void"); }

{   arg = v_alloca(LLVMTypeRef);

    v_store(v_peg_grammar_ref, arg);

    fun_t = LLVMFunctionType(void, arg, 1, 0);

    v_add_symbol_type("v_peg_get_grammar", fun_t);
    v_add_symbol_type("v_peg_set_grammar", fun_t);
}


//---------------------------------------------------------------------
//- vpeg_context.void support module
//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("vpeg_context_void_module");

    v_set_module(module);

    typ0 = v_alloca(LLVMTypeRef);

    val0 = v_alloca(LLVMValueRef, 4);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);
    val3 = v_getelementptr(val0, 3);

    char_ptr = LLVMPointerType(char, 0);
    int_ptr  = LLVMPointerType(int,  0);

    n1 = LLVMConstInt(int, 1, 0);

    //-----------------------------------------------------------------
    builder = v_target_get_voidc_builder();


    //-----------------------------------------------------------------
    //- bool voidc_has_grammar(void)
    //-----------------------------------------------------------------
    has_grammar_ft = LLVMFunctionType(bool, 0, 0, 0);
    has_grammar_f  = LLVMAddFunction(module, "voidc_has_grammar", has_grammar_ft);

    entry = LLVMAppendBasicBlock(has_grammar_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);

    grm = LLVMBuildAlloca(builder, v_peg_opaque_grammar_ptr, "grm");

    grammar_init_f = v_obtain_dict_function(v_util_initialize_dict, v_peg_opaque_grammar_ptr);

    v_store(grm, val0);
    v_store(n1,  val1);

    LLVMBuildCall(builder, grammar_init_f, val0, 2, "");

    get_grammar_f = v_obtain_function("v_peg_get_grammar");

    LLVMBuildCall(builder, get_grammar_f, val0, 1, "");

    grammar_empty_f = v_obtain_dict_function(v_util_empty_dict, v_peg_opaque_grammar_ptr);

    nok = LLVMBuildCall(builder, grammar_empty_f, val0, 1, "nok");

    ok = LLVMBuildNot(builder, nok, "ok");

    grammar_term_f = v_obtain_dict_function(v_util_terminate_dict, v_peg_opaque_grammar_ptr);

//  v_store(grm, val0);
//  v_store(n1,  val1);

    LLVMBuildCall(builder, grammar_term_f, val0, 2, "");

    LLVMBuildRet(builder, ok);


    //-----------------------------------------------------------------
    //- bool voidc_grammar_has_parser(const char *name)
    //-----------------------------------------------------------------
    v_store(char_ptr, typ0);

    has_parser_ft = LLVMFunctionType(bool, typ0, 1, 0);
    has_parser_f  = LLVMAddFunction(module, "voidc_grammar_has_parser", has_parser_ft);

    name = LLVMGetParam(has_parser_f, 0);

    entry = LLVMAppendBasicBlock(has_parser_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);


    gr0 = LLVMBuildAlloca(builder, v_peg_opaque_grammar_ptr, "gr0");

    v_store(gr0, val0);
    v_store(n1,  val1);

    LLVMBuildCall(builder, grammar_init_f, val0, 2, "");

    LLVMBuildCall(builder, get_grammar_f, val0, 1, "");


    pr0 = LLVMBuildAlloca(builder, v_peg_opaque_parser_ptr, "pr0");

    parser_init_f = v_obtain_dict_function(v_util_initialize_dict, v_peg_opaque_parser_ptr);

    v_store(pr0, val0);
//  v_store(n1,  val1);

    LLVMBuildCall(builder, parser_init_f, val0, 2, "");


    get_parser_f = v_obtain_function("v_peg_grammar_get_parser");

    ip0 = LLVMConstNull(int_ptr);

    v_store(gr0,  val0);
    v_store(name, val1);
    v_store(pr0,  val2);
    v_store(ip0,  val3);

    LLVMBuildCall(builder, get_parser_f, val0, 4, "");


    parser_empty_f = v_obtain_dict_function(v_util_empty_dict, v_peg_opaque_parser_ptr);

    v_store(pr0, val0);

    nok = LLVMBuildCall(builder, parser_empty_f, val0, 1, "nok");

    ok = LLVMBuildNot(builder, nok, "ok");


    parser_term_f = v_obtain_dict_function(v_util_terminate_dict, v_peg_opaque_parser_ptr);

//  v_store(pr0, val0);
    v_store(n1,  val1);

    LLVMBuildCall(builder, parser_term_f, val0, 2, "");


    v_store(gr0, val0);
//  v_store(n1,  val1);

    LLVMBuildCall(builder, grammar_term_f, val0, 2, "");


    LLVMBuildRet(builder, ok);


    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_prepare_module_for_jit(module);

    //-----------------------------------------------------------------
    PH = v_alloca(LLVMOrcModuleHandle);

    LLVMOrcAddEagerlyCompiledIR(voidc_jit, PH, module,
                                voidc_resolver, 0
                               );

    //-----------------------------------------------------------------
    v_add_symbol_type("voidc_has_grammar",        has_grammar_ft);
    v_add_symbol_type("voidc_grammar_has_parser", has_parser_ft);
}


