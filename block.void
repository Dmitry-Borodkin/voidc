//---------------------------------------------------------------------
//- Copyright (C) 2020 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   v_import("vpeg_context.void");
    v_import("voidc_ast.void");
    v_import("function_hack.void");
    v_import("memory.void");
}

{   v_import("printf.void"); }


{   typ0 = v_alloca(LLVMTypeRef, 2);
    typ1 = v_getelementptr(typ0, 1);


    //-----------------------------------------------------------------
    //- quark ...
    //-----------------------------------------------------------------
    quark_v = v_quark_from_string("v_ast_stmt_block_t_visitor_method_tag");

    quark_ll = v_cast(LLVMZExt, quark_v, long_long);

    quark = LLVMConstInt(v_quark_t, quark_ll, 0);

    v_add_local_constant("quark", quark);


    //-----------------------------------------------------------------
    //- method ...
    //-----------------------------------------------------------------
    v_store(voidc_visitor_ref,   typ0);
    v_store(v_ast_stmt_list_ref, typ1);

    method_ft  = LLVMFunctionType(void, typ0, 2, 0);
    method_ref = LLVMPointerType(method_ft, 0);

    v_add_local_symbol("method_ft",  LLVMOpaqueType, method_ft);
    v_add_local_symbol("method_ref", LLVMOpaqueType, method_ref);


    //-----------------------------------------------------------------
    //- ast_stmt_block_t ...
    //-----------------------------------------------------------------
    gc = LLVMGetGlobalContext();

    ast_stmt_block_t = LLVMStructCreateNamed(gc, "struct.ast_stmt_block_t");

    v_store(v_ast_opaque_stmt_list_ptr, typ0);

    LLVMStructSetBody(ast_stmt_block_t, typ0, 1, 0);

    ast_stmt_block_ref = LLVMPointerType(ast_stmt_block_t, 0);

    v_add_local_symbol("ast_stmt_block_t",   LLVMOpaqueType, ast_stmt_block_t);
    v_add_local_symbol("ast_stmt_block_ref", LLVMOpaqueType, ast_stmt_block_ref);
}


//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("my_stmt_block_mod");

    v_set_module(module);
}


//---------------------------------------------------------------------
//- destroy ...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(LLVMTypeRef);

    v_store(void_ptr, typ0);

    destroy_ft = LLVMFunctionType(void, typ0, 1, 0);

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_block_destroy", destroy_ft);

    p0 = LLVMGetParam(f, 0);    v_add_variable("void_obj", p0);
}
{
    obj = v_cast(LLVMBitCast, void_obj, ast_stmt_block_ref);

    stmt_list = v_getelementptr(obj, 0, 0);

    v_reset(stmt_list);

    v_mfree(obj);
}


//---------------------------------------------------------------------
//- accept ...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(LLVMTypeRef, 2);
    typ1 = v_getelementptr(typ0, 1);

    v_store(void_ptr,          typ0);
    v_store(voidc_visitor_ref, typ1);

    accept_ft = LLVMFunctionType(void, typ0, 2, 0);

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_block_accept", accept_ft);

    p0 = LLVMGetParam(f, 0);    v_add_variable("void_obj", p0);
    p1 = LLVMGetParam(f, 1);    v_add_variable("visitor",  p1);
}
{
    obj = v_cast(LLVMBitCast, void_obj, ast_stmt_block_ref);

    stmt_list = v_getelementptr(obj, 0, 0);

    void_method = voidc_visitor_get_void_method(visitor, quark);

    method = v_cast(LLVMBitCast, void_method, method_ref);

    method(visitor, stmt_list);
}


//-----------------------------------------------------------------------
//- vtable ...
//-------------------------------------------------------------------
{
    module = v_get_module();

    val0 = v_alloca(LLVMValueRef, 3);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);

    destroy_f = v_find_function("voidc_ast_stmt_block_destroy");
    accept_f  = v_find_function("voidc_ast_stmt_block_accept");

    quark_ll = v_cast(LLVMZExt, quark, long_long);

    quark_v = LLVMConstInt(v_quark_t, quark_ll, 0);

    v_store(destroy_f, val0);
    v_store(accept_f,  val1);
    v_store(quark_v,   val2);

    vtable_v = LLVMConstNamedStruct(v_ast_generic_vtable, val0, 3);

    vtable_g = LLVMAddGlobal(module, v_ast_generic_vtable, "voidc_ast_stmt_block_vtable");

    LLVMSetInitializer(vtable_g, vtable_v);

    v_add_local_symbol("voidc_ast_stmt_block_vtable", v_ast_generic_vtable, vtable_g);
}


//---------------------------------------------------------------------
//- v_ast_make_stmt_block - ...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(LLVMTypeRef, 2);
    typ1 = v_getelementptr(typ0, 1);

    v_store(v_ast_stmt_ref,      typ0);
    v_store(v_ast_stmt_list_ref, typ1);

    ft = LLVMFunctionType(void, typ0, 2, 0);

    f = v_function_hack("v_ast_make_stmt_block", ft);

    p0 = LLVMGetParam(f, 0);    v_add_variable("ret",       p0);
    p1 = LLVMGetParam(f, 1);    v_add_variable("stmt_list", p1);
}
{
    obj = v_malloc(ast_stmt_block_t);

    obj_stmt_list = v_getelementptr(obj, 0, 0);

    v_initialize(obj_stmt_list);

    v_copy(obj_stmt_list, stmt_list);

    v_ast_make_stmt_generic(ret, voidc_ast_stmt_block_vtable, obj);
}


//---------------------------------------------------------------------
//- mk_stmt_block - grammar action
//---------------------------------------------------------------------
{
    typ0 = v_alloca(LLVMTypeRef, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(v_util_std_any_ref, typ0);
    v_store(v_util_std_any_ref, typ1);
    v_store(size_t,             typ2);

    ft = LLVMFunctionType(void, typ0, 3, 0);

    f = v_function_hack("mk_stmt_block_grammar_action", ft);

    p0 = LLVMGetParam(f, 0);    v_add_variable("ret",       p0);
    p1 = LLVMGetParam(f, 1);    v_add_variable("arg_list",  p1);
    p2 = LLVMGetParam(f, 2);    v_add_variable("arg_count", p2);
}
{
    stmt_list = v_std_any_get_pointer(v_ast_opaque_stmt_list_ptr, arg_list);

    stmt = v_alloca(v_ast_opaque_stmt_ptr);
    v_initialize(stmt);

    v_ast_make_stmt_block(stmt, stmt_list);

    v_std_any_set_pointer(ret, stmt);

    v_reset(stmt);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    char_ptr = LLVMPointerType(char, 0);

    ft = LLVMFunctionType(char_ptr, 0, 0, 0);
    v_add_symbol_type("llvm.stacksave", ft);
    v_add_alias("llvm_stacksave", "llvm.stacksave");

    typ0 = v_alloca(LLVMTypeRef);

    v_store(char_ptr, typ0);

    ft = LLVMFunctionType(void, typ0, 1, 0);
    v_add_symbol_type("llvm.stackrestore", ft);
    v_add_alias("llvm_stackrestore", "llvm.stackrestore");
}

//---------------------------------------------------------------------
//- compile_ast_stmt_block_t - visitor method
//---------------------------------------------------------------------
{
    f = v_function_hack("compile_ast_stmt_block_t", method_ft);

    visitor   = LLVMGetParam(f, 0);
    stmt_list = LLVMGetParam(f, 1);


    val0 = v_alloca(LLVMValueRef, 5);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);
    val3 = v_getelementptr(val0, 3);
    val4 = v_getelementptr(val0, 4);

    n0 = LLVMConstInt(int, 0, 0);

    value_ptr = LLVMPointerType(LLVMValueRef, 0);

    v0 = LLVMConstNull(value_ptr);

    builder_v = v_find_global("voidc_builder");


    save_vars_f = v_find_function("v_save_variables");

    LLVMBuildCall(voidc_builder, save_vars_f, 0, 0, "");


    stack_save_n = LLVMBuildGlobalStringPtr(voidc_builder, "llvm.stacksave", "stack_save_n");

    v_store(stack_save_n, val0);

    find_fun_f = v_find_function("v_find_function");

    stack_save_fv = LLVMBuildCall(voidc_builder, find_fun_f, val0, 1, "stack_save_fv");


    stack_ptr_str = LLVMBuildGlobalStringPtr(voidc_builder, "stack_ptr", "stack_ptr_str");

    v_store(builder_v,     val0);
    v_store(stack_save_fv, val1);
    v_store(v0,            val2);
    v_store(n0,            val3);
    v_store(stack_ptr_str, val4);

    llvm_build_call_f = v_find_function("LLVMBuildCall");

    stack_ptr = LLVMBuildCall(voidc_builder, llvm_build_call_f, val0, 5, "stack_ptr");

    v_add_variable("stack_ptr", stack_ptr);


    base_ast = LLVMBuildBitCast(voidc_builder, stmt_list, v_ast_base_ref, "base_ast");

    v_store(base_ast, val0);
    v_store(visitor,  val1);

    accept_visitor_f = v_find_function("v_ast_accept_visitor");

    LLVMBuildCall(voidc_builder, accept_visitor_f, val0, 2, "");


    v_store(builder_v, val0);

    llvm_get_insert_block_f = v_find_function("LLVMGetInsertBlock");

    cur_b = LLVMBuildCall(voidc_builder, llvm_get_insert_block_f, val0, 1, "cur_b");

    v_add_variable("cur_b", cur_b);


    v_store(cur_b, val0);

    llvm_get_basic_block_terminator_f = v_find_function("LLVMGetBasicBlockTerminator");

    trm_v = LLVMBuildCall(voidc_builder, llvm_get_basic_block_terminator_f, val0, 1, "trm_v");


    then_b = LLVMAppendBasicBlock(f, "then_b");
    else_b = LLVMAppendBasicBlock(f, "else_b");


    ok_v = LLVMBuildIsNotNull(voidc_builder, trm_v, "ok_v");

    LLVMBuildCondBr(voidc_builder, ok_v, then_b, else_b);


    LLVMPositionBuilderAtEnd(voidc_builder, then_b);


    v_store(builder_v, val0);
    v_store(trm_v,     val1);

    position_builder_before_f = v_find_function("LLVMPositionBuilderBefore");

    LLVMBuildCall(voidc_builder, position_builder_before_f, val0, 2, "");


    LLVMBuildBr(voidc_builder, else_b);


    LLVMPositionBuilderAtEnd(voidc_builder, else_b);
}
{
    val0 = v_alloca(LLVMValueRef);

    v_store(stack_ptr, val0);

    stack_restore_f = v_find_function("llvm.stackrestore");

    LLVMBuildCall(voidc_builder, stack_restore_f, val0, 1, "");

    LLVMPositionBuilderAtEnd(voidc_builder, cur_b);

    v_restore_variables();
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    //-----------------------------------------------------------------
//    msg = LLVMPrintModuleToString(module);
//
//    printf("\n%s\n", msg);
//
//    LLVMDisposeMessage(msg);

    //-----------------------------------------------------------------
    v_prepare_module_for_jit(module);

    //-----------------------------------------------------------------
    PH = v_alloca(LLVMOrcModuleHandle);

    LLVMOrcAddEagerlyCompiledIR(voidc_jit, PH, module,
                                voidc_resolver, 0
                               );

    //-----------------------------------------------------------------
    v_set_module(0);
}


//---------------------------------------------------------------------
//- void v_enable_statement_block(void);
//---------------------------------------------------------------------
{
    ft = LLVMFunctionType(void, 0, 0, 0);

    v_function_hack("voidc_enable_statement_block", ft);
}
{
    pp0 = v_alloca(v_peg_opaque_parser_ptr, 6);
    v_initialize(pp0, 6);

    pp1 = v_getelementptr(pp0, 1);
    pp2 = v_getelementptr(pp0, 2);
    pp3 = v_getelementptr(pp0, 3);
    pp4 = v_getelementptr(pp0, 4);
    pp5 = v_getelementptr(pp0, 5);


    v_peg_make_character_parser(pp0, '{');

    v_peg_make_identifier_parser(pp1, "_");

    v_peg_make_identifier_parser(pp2, "stmt_list");
    v_peg_make_catch_variable_parser(pp2, "l", pp2);

    v_peg_make_identifier_parser(pp3, "_");

    v_peg_make_character_parser(pp4, '}');


    ar0 = v_alloca(v_peg_opaque_argument_ptr);
    v_initialize(ar0);

    v_peg_make_identifier_argument(ar0, "l");


    act = v_alloca(v_peg_opaque_action_ptr);
    v_initialize(act);

    v_peg_make_call_action(act, "mk_stmt_block", ar0, 1);

    v_peg_make_action_parser(pp5, act);


    v_peg_make_sequence_parser(pp0, pp0, 6);


    gr0 = v_alloca(v_peg_opaque_grammar_ptr);
    v_initialize(gr0);

    v_peg_get_grammar(gr0);


    v_peg_grammar_set_action(gr0, gr0, "mk_stmt_block", mk_stmt_block_grammar_action);

    v_peg_grammar_get_parser(gr0, "stmt", pp1, 0);

    v_peg_make_choice_parser(pp0, pp0, 2);

    v_peg_grammar_set_parser(gr0, gr0, "stmt", pp0, 0);


    v_peg_set_grammar(gr0);


    void_method = v_cast(LLVMBitCast, compile_ast_stmt_block_t, void_ptr);

    voidc_visitor_set_void_method(voidc_compiler, voidc_compiler, quark, void_method);

    v_reset(gr0);
    v_reset(act);
    v_reset(ar0, 2);
    v_reset(pp0, 6);
}


