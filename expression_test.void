{   v_import("expression.void");
}

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_loop();
    voidc_enable_statement_switch();

    voidc_enable_expression();
}

{   v_import("printf.void"); }


//---------------------------------------------------------------------
//{v_debug_print_module(1);}
{
    N = 6;

    v = *v_alloca(int(N));

    i = *v_alloca(int) := 0;

    loop
    {
        if (i == 1<<N)  v_break();

        v := v_cast(i, int(N));    v := v*v;

        printf("i: %2d,  v: %3d\n", i, v_cast(v, int));

        ++i;
    }

    printf("\n");
}


//---------------------------------------------------------------------
{   v_add_local_symbol("double", voidc_opaque_type, v_f64_type());
}

//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    N = 1000;

    flags = v_malloc(bool, N);

    i = *v_alloca(int) := 0;

    loop
    {
        if (i == N) v_break();

        flags[i] := true;

        ++i;
    }

    i := 2;

    k = *v_alloca(int);

    loop
    {
        if (i >= N) v_break();

        if (flags[i])
        {
            k := 2*i;

            loop
            {
                if (k >= N) v_break();

                flags[k] := false;

                k += i;
            }
        }

        ++i;
    }


    i := 2;

    k := 0;

    loop
    {
        if (i >= N) v_break();

        if (flags[i])
        {
            ++k;

            f = k / v_cast(i, double);

            printf("%d, %g\n", i, f);
        }

        ++i;
    }

    v_mfree(flags);
}


