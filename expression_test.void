{   v_import("expression.void");
}

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_loop();
    voidc_enable_statement_switch();

    voidc_enable_expression();
}

{   v_import("printf.void"); }


//---------------------------------------------------------------------
//{v_debug_print_module(1);}
{
    N = 6;

    v = *v_alloca(int(N));

    i = *v_alloca(int) := 0;

    loop
    {
        if (i == 1<<N)  v_break();

        v := v_cast(i, int(N));    v := v*v;

        printf("i: %2d,  v: %3d\n", i, v_cast(v, int));

        ++i;
    }

    printf("\n");
}


//---------------------------------------------------------------------
{   v_add_local_symbol("double", voidc_opaque_type, v_f64_type());
}

//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    N = 1000;

    flags = v_malloc(bool, N);

    i = *v_alloca(int) := 0;

    loop
    {
        if (i == N) v_break();

        flags[i] := true;

        ++i;
    }

    i := 2;

    k = *v_alloca(int);

    n = *v_alloca(double) := 0;

    loop
    {
        if (i >= N) v_break();

        if (flags[i])
        {
            n += 1;     //- ?..

            printf("%d, %g\n", i, n/i);

            k := 2*i;

            loop
            {
                if (k >= N) v_break();

                flags[k] := false;

                k += i;
            }
        }

        ++i;
    }

    v_mfree(flags);

    printf("\n");
}


//---------------------------------------------------------------------
{   v_add_symbol_type("rand", v_function_type(int, 0, 0, false));
}

{
    N = 20;

    i = *v_alloca(int) := 0;

    n = *v_alloca(int);
    c = *v_alloca(int);

    loop
    {
        if (i == N) v_break();

        n := rand();

        r = v_load(&n);

        c := 0;

        loop
        {
            if (n == 0) v_break();

            ++c;

            n &= n - 1;
        }

        printf("%X: %d\n", r, c);

        ++i;
    }

    printf("\n");
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    N = 100;

    n = *v_alloca(int) := 1;

    v = *v_alloca(int);

    loop
    {
        if (n >= N) v_break();

        v := n;

        loop
        {
            printf("%d\n", v);

//          if (v < n)  v_break();
            if (v == 1) v_break();

            if (v & 1)  v := 3*v + 1;
            else        v := v/2;
        }

        printf("\n");

        ++n;
    }

}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    N = 7;

    v = *v_alloca(vec(double, N)) := N;

    i = *v_alloca(((int))) := 0;

    loop
    {
        if (i >= N) v_break();

        printf("v[%d]/%d: %g\n", i, i+1, v[i]/(i+1));

        ++i;
    }
}


