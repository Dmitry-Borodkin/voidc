//---------------------------------------------------------------------
//- Copyright (C) 2020-2021 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("voidc_target.void  must be imported into the voidc target only!"); }

//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 2);
    typ1 = v_getelementptr(typ0, 1);

    _v_type_ptr = v_find_type("v_type_ptr");
    _unsigned   = v_find_type("unsigned");

    v_store(_v_type_ptr, typ0);             //- Element type
    v_store(_unsigned,   typ1);             //- Address space

    ft = v_function_type(_v_type_ptr, typ0, 2, false);

    v_export_symbol_type("v_pointer_type", ft);
    v_export_symbol_type("v_reference_type", ft);
}

{   typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    _v_type_ptr = v_find_type("v_type_ptr");

    _void = v_find_type("void");
    _char = v_find_type("char");

    void_ptr = v_pointer_type(_void, 0);
    char_ptr = v_pointer_type(_char, 0);

    v_store(char_ptr, typ0);                //- Symbol name
    v_store(void_ptr, typ1);                //- Symbol value (for "linker")

    ft = v_function_type(_void, typ0, 2, false);
    v_export_symbol_type("v_export_symbol_value", ft);

//  v_store(char_ptr,    typ0);             //- Symbol name
    v_store(_v_type_ptr, typ1);             //- Symbol type
    v_store(void_ptr,    typ2);             //- Symbol value

    ft = v_function_type(_void, typ0, 3, false);

    v_export_symbol_type("v_export_symbol", ft);
    v_export_symbol_type("v_add_symbol", ft);

//  v_store(char_ptr,   typ0);              //- Struct name

    ft = v_function_type(_v_type_ptr, typ0, 1, false);

    v_export_symbol_type("v_struct_type_named", ft);
}


//---------------------------------------------------------------------
{   _v_type_ptr = v_find_type("v_type_ptr");

    _void     = v_find_type("void");
    _bool     = v_find_type("bool");
    _char     = v_find_type("char");
    _int      = v_find_type("int");
    _unsigned = v_find_type("unsigned");
    _size_t   = v_find_type("size_t");

    void_ptr = v_pointer_type(_void, 0);
    char_ptr = v_pointer_type(_char, 0);

    _voidc_opaque_type = v_find_type("voidc_opaque_type");

    //-------------------------------------------------------------
    v_add_symbol("_v_type_ptr", _voidc_opaque_type, _v_type_ptr);

    v_add_symbol("_void",     _voidc_opaque_type, _void);
    v_add_symbol("_bool",     _voidc_opaque_type, _bool);
    v_add_symbol("_char",     _voidc_opaque_type, _char);
    v_add_symbol("_int",      _voidc_opaque_type, _int);
    v_add_symbol("_unsigned", _voidc_opaque_type, _unsigned);
    v_add_symbol("_size_t",   _voidc_opaque_type, _size_t);

    v_add_symbol("void_ptr", _voidc_opaque_type, void_ptr);
    v_add_symbol("char_ptr", _voidc_opaque_type, char_ptr);

    v_add_symbol("_voidc_opaque_type", _voidc_opaque_type, _voidc_opaque_type);
}


//---------------------------------------------------------------------
{   opaque_value_t = v_struct_type_named("struct.LLVMOpaqueValue");
    value_ref = v_pointer_type(opaque_value_t, 0);
    v_add_symbol("_LLVMValueRef", _voidc_opaque_type, value_ref);

    opaque_context_t = v_struct_type_named("struct.LLVMOpaqueContext");
    context_ref = v_pointer_type(opaque_context_t, 0);
    v_add_symbol("_LLVMContextRef", _voidc_opaque_type, context_ref);

    opaque_module_t = v_struct_type_named("struct.LLVMOpaqueModule");
    module_ref = v_pointer_type(opaque_module_t, 0);
    v_add_symbol("_LLVMModuleRef", _voidc_opaque_type, module_ref);

    opaque_builder_t = v_struct_type_named("struct.LLVMOpaqueBuilder");
    builder_ref = v_pointer_type(opaque_builder_t, 0);
    v_add_symbol("_LLVMBuilderRef", _voidc_opaque_type, builder_ref);

    opaque_membuf_t = v_struct_type_named("struct.LLVMOpaqueMemoryBuffer");
    membuf_ref = v_pointer_type(opaque_membuf_t, 0);
    v_add_symbol("_LLVMMemoryBufferRef", _voidc_opaque_type, membuf_ref);
}

{   typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(_v_type_ptr,   typ0);           //- Source type
    v_store(_LLVMValueRef, typ1);           //- Source value
    v_store(_v_type_ptr,   typ2);           //- Destination type

    ft = v_function_type(_LLVMValueRef, typ0, 3, false);
    v_export_symbol_type("v_convert_to_type", v_reference_type(v_pointer_type(ft, 0), 0));

    v_store(char_ptr,      typ0);           //- Constant/variable name
    v_store(_v_type_ptr,   typ1);           //- Constant/variable type
    v_store(_LLVMValueRef, typ2);           //- Constant/variable value

    ft = v_function_type(_void, typ0, 3, false);
    v_export_symbol_type("v_export_constant", ft);
    v_export_symbol_type("v_add_constant",    ft);
    v_export_symbol_type("v_add_variable",    ft);

//  v_store(char_ptr, typ0);                //- Constant/variable name

    ft = v_function_type(_v_type_ptr, typ0, 1, false);
    v_export_symbol_type("v_get_variable_type", ft);
    v_export_symbol_type("v_find_constant_type", ft);

//  v_store(char_ptr, typ0);                //- Constant/variable name

    ft = v_function_type(_LLVMValueRef, typ0, 1, false);
    v_export_symbol_type("v_get_variable_value", ft);
    v_export_symbol_type("v_find_constant_value", ft);

    t_ptr = v_pointer_type(_v_type_ptr, 0);
    v_ptr = v_pointer_type(_LLVMValueRef, 0);

//  v_store(char_ptr, typ0);                //- Constant/variable name
    v_store(t_ptr,    typ1);                //- For type
    v_store(v_ptr,    typ2);                //- For value

    ft = v_function_type(_bool, typ0, 3, false);
    v_export_symbol_type("v_get_variable", ft);
    v_export_symbol_type("v_find_constant", ft);

//  v_store(char_ptr, typ0);                //- Symbol name

    ft = v_function_type(_v_type_ptr, typ0, 1, false);
    v_export_symbol_type("v_find_symbol_type", ft);

//  v_store(char_ptr, typ0);                //- Type(!) name

//  ft = v_function_type(_v_type_ptr, typ0, 1, false);
    v_export_symbol_type("v_find_type", ft);

//  v_store(char_ptr, typ0);                //- Alias name
    v_store(char_ptr, typ1);                //- Aliasee

    ft = v_function_type(_void, typ0, 2, false);
    v_export_symbol_type("v_export_alias", ft);
    v_export_symbol_type("v_add_alias",    ft);

    v_store(_v_type_ptr,   typ0);           //- type
    v_store(_LLVMValueRef, typ1);           //- value

    ft = v_function_type(_LLVMValueRef, typ0, 2, false);
    v_export_symbol_type("v_make_temporary", ft);

    v_store(_int, typ0);                    //- Number of prints/modules...

    ft = v_function_type(_void, typ0, 1, false);
    v_export_symbol_type("v_debug_print_module", ft);

//  v_store(_int, typ0);                    //- line
    v_store(_int, typ1);                    //- column

    ft = v_function_type(_void, typ0, 2, false);
    v_export_symbol_type("voidc_prepare_unit_action", ft);

    v_store(char_ptr,    typ0);             //- Function name
    v_store(_v_type_ptr, typ1);             //- Function type

    ft = v_function_type(_LLVMValueRef, typ0, 2, false);
    v_export_symbol_type("v_prepare_function", ft);

    ft = v_function_type(_void, 0, 0, false);
    v_export_symbol_type("voidc_finish_unit_action", ft);
    v_export_symbol_type("v_clear_variables", ft);
    v_export_symbol_type("v_save_variables", ft);
    v_export_symbol_type("v_restore_variables", ft);
    v_export_symbol_type("v_push_temporaries", ft);
    v_export_symbol_type("v_pop_temporaries", ft);
    v_export_symbol_type("v_finish_function", ft);

    ft = v_function_type(_size_t, 0, 0, false);
    v_export_symbol_type("v_get_variables_size", ft);

    ft = v_function_type(_LLVMModuleRef, 0, 0, false);
    v_export_symbol_type("v_get_module", ft);

    v_store(_LLVMModuleRef, typ0);          //-

    ft = v_function_type(_void, typ0, 1, false);
    v_export_symbol_type("v_set_module", ft);
    v_export_symbol_type("v_verify_module", ft);
    v_export_symbol_type("voidc_prepare_module_for_jit", ft);
    v_export_symbol_type("voidc_add_module_to_jit", ft);
    v_export_symbol_type("voidc_add_local_module_to_jit", ft);
    v_export_symbol_type("voidc_unit_load_module_to_jit", ft);
    v_export_symbol_type("voidc_unit_load_local_module_to_jit", ft);

//  v_store(_LLVMModuleRef, typ0);          //-
    v_store(_bool,          typ1);          //-

    ft = v_function_type(_void, typ0, 2, false);
    v_export_symbol_type("voidc_compile_load_module_to_jit", ft);

    v_store(_LLVMMemoryBufferRef, typ0);    //-

    ft = v_function_type(_void, typ0, 1, false);
    v_export_symbol_type("voidc_add_object_file_to_jit", ft);
    v_export_symbol_type("voidc_add_local_object_file_to_jit", ft);
    v_export_symbol_type("voidc_set_unit_buffer", ft);

    ft = v_function_type(_LLVMMemoryBufferRef, 0, 0, false);
    v_export_symbol_type("voidc_get_unit_buffer", ft);

    ft = v_function_type(_v_type_ptr, 0, 0, false);
    v_export_symbol_type("v_get_result_type", ft);

    ft = v_function_type(_LLVMValueRef, 0, 0, false);
    v_export_symbol_type("v_get_result_value", ft);

    v_store(_v_type_ptr, typ0);             //-

    ft = v_function_type(_void, typ0, 1, false);
    v_export_symbol_type("v_set_result_type", ft);

    v_store(_LLVMValueRef, typ0);           //-

    ft = v_function_type(_void, typ0, 1, false);
    v_export_symbol_type("v_set_result_value", ft);

    v_store(_v_type_ptr,   typ0);           //-
    v_store(_LLVMValueRef, typ1);           //-

    ft = v_function_type(_void, typ0, 2, false);
    v_export_symbol_type("v_adopt_result", ft);
}


//---------------------------------------------------------------------
{   v_export_constant("LLVMValueRef",        _LLVMValueRef,        0);
    v_export_constant("LLVMContextRef",      _LLVMContextRef,      0);
    v_export_constant("LLVMModuleRef",       _LLVMModuleRef,       0);
    v_export_constant("LLVMBuilderRef",      _LLVMBuilderRef,      0);
    v_export_constant("LLVMMemoryBufferRef", _LLVMMemoryBufferRef, 0);
}


//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    _voidc_opaque_visitor_sptr   = v_find_type("voidc_opaque_visitor_sptr");
    _v_ast_opaque_expr_list_sptr = v_find_type("v_ast_opaque_expr_list_sptr");

    visitor_ptr   = v_pointer_type(_voidc_opaque_visitor_sptr, 0);
    expr_list_ptr = v_pointer_type(_v_ast_opaque_expr_list_sptr, 0);

    v_store(visitor_ptr,   typ0);           //-
    v_store(void_ptr,      typ1);           //-
    v_store(expr_list_ptr, typ2);           //-

    intrinsic_t = v_function_type(_void, typ0, 3, false);
    v_export_constant("voidc_intrinsic_t", intrinsic_t, 0);

    intrinsic_ptr = v_pointer_type(intrinsic_t, 0);

    v_store(char_ptr,      typ0);           //- Intrinsic name
    v_store(intrinsic_ptr, typ1);           //- Intrinsic function

    ft = v_function_type(_void, typ0, 2, false);
    v_export_symbol_type("v_export_intrinsic", ft);
    v_export_symbol_type("v_add_intrinsic",    ft);

//  v_store(char_ptr,      typ0);           //- Intrinsic name

    ft = v_function_type(intrinsic_ptr, typ0, 1, false);
    v_export_symbol_type("v_get_intrinsic", ft);
}

{   ft = v_function_type(_LLVMContextRef, 0, 0, false);
    v_export_symbol_type("v_target_get_voidc_llvm_ctx", ft);
    v_export_symbol_type("v_target_get_llvm_ctx", ft);
}

{   g_ctx = v_struct_type_named("struct.v_target_opaque_global_ctx");
    l_ctx = v_struct_type_named("struct.v_target_opaque_local_ctx");

    v_export_constant("v_target_opaque_global_ctx", g_ctx, 0);
    v_export_constant("v_target_opaque_local_ctx",  l_ctx, 0);

    g_ptr = v_pointer_type(g_ctx, 0);
    l_ptr = v_pointer_type(l_ctx, 0);

    v_export_constant("v_target_global_ctx_ptr", g_ptr, 0);
    v_export_constant("v_target_local_ctx_ptr",  l_ptr, 0);
}

{   typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    _v_target_global_ctx_ptr = v_find_type("v_target_global_ctx_ptr");
    _v_target_local_ctx_ptr  = v_find_type("v_target_local_ctx_ptr");

    ft = v_function_type(_v_target_global_ctx_ptr, 0, 0, false);
    v_export_symbol_type("v_target_get_voidc_global_ctx", ft);
    v_export_symbol_type("v_target_get_global_ctx", ft);

    v_store(_v_target_global_ctx_ptr, typ0);        //-

    ft = v_function_type(_void, typ0, 1, false);
    v_export_symbol_type("v_target_set_global_ctx", ft);
    v_export_symbol_type("v_target_destroy_global_ctx", ft);

    v_store(_size_t, typ0);                         //- sizeof(int)
    v_store(_size_t, typ1);                         //- sizeof(long)
    v_store(_size_t, typ2);                         //- sizeof(intptr_t)

    ft = v_function_type(_v_target_global_ctx_ptr, typ0, 3, false);
    v_export_symbol_type("v_target_create_global_ctx", ft);

    v_store(char_ptr,                 typ0);        //- Source file name (kind of...)
    v_store(_v_target_global_ctx_ptr, typ1);        //- Parent global context

    ft = v_function_type(_v_target_local_ctx_ptr, typ0, 2, false);
    v_export_symbol_type("v_target_create_local_ctx", ft);

    v_store(_v_target_local_ctx_ptr, typ0);         //-

    ft = v_function_type(_void, typ0, 1, false);
    v_export_symbol_type("v_target_destroy_local_ctx", ft);

    ft = v_function_type(_LLVMBuilderRef, 0, 0, false);
    v_export_symbol_type("v_target_get_voidc_builder", ft);
    v_export_symbol_type("v_target_get_builder", ft);

    ft = v_function_type(_bool, 0, 0, false);
    v_export_symbol_type("v_target_local_ctx_has_parent", ft);
}

{   typ = v_alloca(v_type_ptr);

    v_store(v_pointer_type(v_function_type(_void, 0, 0, false), 0), typ);

    ft = v_function_type(_int, typ, 1, false);
    v_export_symbol_type("voidc_atexit", ft);
}

{   type = v_struct_type_named("struct.LLVMOpaqueTargetMachine");
    v_export_symbol_type("voidc_target_machine", type);

    type = v_struct_type_named("struct.LLVMOpaquePassManager");
    v_export_symbol_type("voidc_pass_manager", type);
}


