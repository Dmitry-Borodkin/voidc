//---------------------------------------------------------------------
//- Copyright (C) 2020 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{
    arg0 = v_alloca(LLVMTypeRef, 2);
    arg1 = v_getelementptr(arg0, 1);

    v_store(LLVMTypeRef, arg0);
    v_store(int, arg1);

    ft = LLVMFunctionType(LLVMTypeRef, arg0, 2, 0);
    v_add_symbol_type("LLVMPointerType", ft);
}

{
    ft = LLVMFunctionType(LLVMContextRef, 0, 0, 0);
    v_add_symbol_type("LLVMGetGlobalContext", ft);

    arg0 = v_alloca(LLVMTypeRef, 2);
    arg1 = v_getelementptr(arg0, 1);

    v_store(LLVMContextRef, arg0);
    cp = LLVMPointerType(char, 0);
    v_store(cp, arg1);
    ft = LLVMFunctionType(LLVMTypeRef, arg0, 2, 0);
    v_add_symbol_type("LLVMStructCreateNamed", ft);
}

{
    char_ptr = LLVMPointerType(char, 0);
    void_ptr = LLVMPointerType(void, 0);

    arg0 = v_alloca(LLVMTypeRef, 3);
    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    v_store(char_ptr, arg0);
    v_store(void_ptr, arg1);

    ft = LLVMFunctionType(void, arg0, 2, 0);
    v_add_symbol_type("v_add_symbol_value", ft);

    v_store(LLVMTypeRef, arg1);
    v_store(void_ptr,    arg2);

    ft = LLVMFunctionType(void, arg0, 3, 0);
    v_add_symbol_type("v_add_symbol",       ft);
    v_add_symbol_type("v_add_local_symbol", ft);
}

{
    gc = LLVMGetGlobalContext();

    opaque_value_t = LLVMStructCreateNamed(gc, "struct.LLVMOpaqueValue");
    v_add_symbol("LLVMOpaqueValue", LLVMOpaqueType, opaque_value_t);

    value_ref = LLVMPointerType(opaque_value_t, 0);
    v_add_symbol("LLVMValueRef", LLVMOpaqueType, value_ref);

    opaque_module_t = LLVMStructCreateNamed(gc, "struct.LLVMOpaqueModule");
    v_add_symbol("LLVMOpaqueModule", LLVMOpaqueType, opaque_module_t);

    module_ref = LLVMPointerType(opaque_module_t, 0);
    v_add_symbol("LLVMModuleRef", LLVMOpaqueType, module_ref);
}

{
    char_ptr = LLVMPointerType(char, 0);
    void_ptr = LLVMPointerType(void, 0);

    arg0 = v_alloca(LLVMTypeRef, 2);
    arg1 = v_getelementptr(arg0, 1);

    v_store(char_ptr,     arg0);
    v_store(LLVMValueRef, arg1);

    ft = LLVMFunctionType(void, arg0, 2, 0);
    v_add_symbol_type("v_add_constant",       ft);
    v_add_symbol_type("v_add_local_constant", ft);
    v_add_symbol_type("v_add_variable",       ft);

    ft = LLVMFunctionType(LLVMTypeRef, arg0, 1, 0);
    v_add_symbol_type("v_find_symbol_type", ft);

    v_store(char_ptr, arg1);

    ft = LLVMFunctionType(void, arg0, 2, 0);
    v_add_symbol_type("v_add_alias",       ft);
    v_add_symbol_type("v_add_local_alias", ft);

    v_store(int, arg0);

    ft = LLVMFunctionType(LLVMValueRef, arg0, 1, 0);
    v_add_symbol_type("v_get_argument", ft);

    ft = LLVMFunctionType(void, 0, 0, 0);
    v_add_symbol_type("v_clear_variables", ft);
    v_add_symbol_type("v_clear_arguments", ft);

    ft = LLVMFunctionType(LLVMModuleRef, 0, 0, 0);
    v_add_symbol_type("v_get_module", ft);

    v_store(LLVMModuleRef, arg0);

    ft = LLVMFunctionType(void, arg0, 1, 0);
    v_add_symbol_type("v_set_module", ft);

    ft = LLVMFunctionType(char_ptr, 0, 0, 0);
    v_add_symbol_type("v_get_return_name", ft);

    v_store(LLVMValueRef, arg0);

    ft = LLVMFunctionType(void, arg0, 1, 0);
    v_add_symbol_type("v_set_return_value", ft);
}

{
    char_ptr = LLVMPointerType(char, 0);

    arg0 = v_alloca(LLVMTypeRef, 2);
    arg1 = v_getelementptr(arg0, 1);

    visitor_ref  = LLVMPointerType(voidc_opaque_visitor_ptr, 0);
    arg_list_ref = LLVMPointerType(v_ast_opaque_arg_list_ptr, 0);

    v_store(visitor_ref,  arg0);
    v_store(arg_list_ref, arg1);

    intrinsic_t = LLVMFunctionType(void, arg0, 2, 0);
    v_add_symbol("voidc_intrinsic_t", LLVMOpaqueType, intrinsic_t);

    intrinsic_ref = LLVMPointerType(intrinsic_t, 0);

    v_store(char_ptr,      arg0);
    v_store(intrinsic_ref, arg1);

    ft = LLVMFunctionType(void, arg0, 2, 0);
    v_add_symbol_type("v_add_intrinsic", ft);
}


