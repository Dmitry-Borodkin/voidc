//---------------------------------------------------------------------
//- Copyright (C) 2020 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_import("voidc_target.void"); }

{
    arg0 = v_alloca(LLVMTypeRef, 2);
    arg1 = v_getelementptr(arg0, 1);

    v_store(LLVMTypeRef, arg0);
    v_store(int, arg1);

    ft = LLVMFunctionType(LLVMTypeRef, arg0, 2, 0);
    v_add_symbol_type("LLVMPointerType", ft);
}

{
    arg0 = v_alloca(LLVMTypeRef, 2);
    arg1 = v_getelementptr(arg0, 1);

    v_store(LLVMContextRef, arg0);
    cp = LLVMPointerType(char, 0);
    v_store(cp, arg1);
    ft = LLVMFunctionType(LLVMTypeRef, arg0, 2, 0);
    v_add_symbol_type("LLVMStructCreateNamed", ft);
}

{
    char_ptr = LLVMPointerType(char, 0);

    arg0 = v_alloca(LLVMTypeRef, 3);
    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    v_store(char_ptr, arg0);
    v_store(void_ptr, arg1);

    ft = LLVMFunctionType(void, arg0, 2, 0);
    v_add_symbol_type("v_add_symbol_value", ft);

    v_store(LLVMTypeRef, arg1);
    v_store(void_ptr,    arg2);

    ft = LLVMFunctionType(void, arg0, 3, 0);
    v_add_symbol_type("v_add_symbol",       ft);
    v_add_symbol_type("v_add_local_symbol", ft);
}

{
    opaque_value_t = v_struct_create_named("struct.LLVMOpaqueValue");
    v_add_symbol("LLVMOpaqueValue", LLVMOpaqueType, opaque_value_t);

    value_ref = LLVMPointerType(opaque_value_t, 0);
    v_add_symbol("LLVMValueRef", LLVMOpaqueType, value_ref);

    opaque_module_t = v_struct_create_named("struct.LLVMOpaqueModule");
    v_add_symbol("LLVMOpaqueModule", LLVMOpaqueType, opaque_module_t);

    module_ref = LLVMPointerType(opaque_module_t, 0);
    v_add_symbol("LLVMModuleRef", LLVMOpaqueType, module_ref);

    opaque_builder_t = v_struct_create_named("struct.LLVMOpaqueBuilder");
    v_add_symbol("LLVMOpaqueBuilder", LLVMOpaqueType, opaque_builder_t);

    builder_ref = LLVMPointerType(opaque_builder_t, 0);
    v_add_symbol("LLVMBuilderRef", LLVMOpaqueType, builder_ref);
}

{
    char_ptr = LLVMPointerType(char, 0);

    arg0 = v_alloca(LLVMTypeRef, 2);
    arg1 = v_getelementptr(arg0, 1);

    v_store(char_ptr,     arg0);
    v_store(LLVMValueRef, arg1);

    ft = LLVMFunctionType(void, arg0, 2, 0);
    v_add_symbol_type("v_add_constant",       ft);
    v_add_symbol_type("v_add_local_constant", ft);
    v_add_symbol_type("v_add_variable",       ft);

    ft = LLVMFunctionType(LLVMValueRef, arg0, 1, 0);
    v_add_symbol_type("v_get_variable", ft);

    ft = LLVMFunctionType(LLVMTypeRef, arg0, 1, 0);
    v_add_symbol_type("v_find_symbol_type", ft);
    v_add_symbol_type("v_find_type",        ft);

    v_store(char_ptr, arg1);

    ft = LLVMFunctionType(void, arg0, 2, 0);
    v_add_symbol_type("v_add_alias",       ft);
    v_add_symbol_type("v_add_local_alias", ft);

    v_store(int, arg0);

    ft = LLVMFunctionType(LLVMValueRef, arg0, 1, 0);
    v_add_symbol_type("v_get_argument", ft);
    v_add_symbol_type("v_debug_print_module", ft);

    v_store(int, arg1);

    ft = LLVMFunctionType(void, arg0, 2, 0);
    v_add_symbol_type("voidc_prepare_unit_action", ft);

    ft = LLVMFunctionType(void, 0, 0, 0);
    v_add_symbol_type("voidc_finish_unit_action", ft);
    v_add_symbol_type("v_clear_variables", ft);
    v_add_symbol_type("v_save_variables", ft);
    v_add_symbol_type("v_restore_variables", ft);
    v_add_symbol_type("v_clear_arguments", ft);

    ft = LLVMFunctionType(LLVMModuleRef, 0, 0, 0);
    v_add_symbol_type("v_get_module", ft);

    v_store(LLVMModuleRef, arg0);

    ft = LLVMFunctionType(void, arg0, 1, 0);
    v_add_symbol_type("v_set_module", ft);
    v_add_symbol_type("v_verify_module", ft);
    v_add_symbol_type("voidc_prepare_module_for_jit", ft);

    ft = LLVMFunctionType(char_ptr, 0, 0, 0);
    v_add_symbol_type("v_get_return_name", ft);

    v_store(LLVMValueRef, arg0);

    ft = LLVMFunctionType(void, arg0, 1, 0);
    v_add_symbol_type("v_set_return_value", ft);
}

{
    char_ptr = LLVMPointerType(char, 0);

    arg0 = v_alloca(LLVMTypeRef, 2);
    arg1 = v_getelementptr(arg0, 1);

    visitor_ref  = LLVMPointerType(voidc_opaque_visitor_ptr, 0);
    arg_list_ref = LLVMPointerType(v_ast_opaque_arg_list_ptr, 0);

    v_store(visitor_ref,  arg0);
    v_store(arg_list_ref, arg1);

    intrinsic_t = LLVMFunctionType(void, arg0, 2, 0);
    v_add_symbol("voidc_intrinsic_t", LLVMOpaqueType, intrinsic_t);

    intrinsic_ref = LLVMPointerType(intrinsic_t, 0);

    v_store(char_ptr,      arg0);
    v_store(intrinsic_ref, arg1);

    ft = LLVMFunctionType(void, arg0, 2, 0);
    v_add_symbol_type("v_add_intrinsic", ft);

    ft = LLVMFunctionType(intrinsic_ref, arg0, 1, 0);
    v_add_symbol_type("v_get_intrinsic", ft);
}

{
    ft = LLVMFunctionType(LLVMContextRef, 0, 0, 0);
    v_add_symbol_type("v_target_get_voidc_llvm_ctx", ft);
    v_add_symbol_type("v_target_get_llvm_ctx", ft);
}

{
    gc = v_target_get_voidc_llvm_ctx();

    g_ctx = LLVMStructCreateNamed(gc, "struct.v_target_opaque_global_ctx");
    l_ctx = LLVMStructCreateNamed(gc, "struct.v_target_opaque_local_ctx");

    v_add_symbol("v_target_opaque_global_ctx", LLVMOpaqueType, g_ctx);
    v_add_symbol("v_target_opaque_local_ctx",  LLVMOpaqueType, l_ctx);

    g_ref = LLVMPointerType(g_ctx, 0);
    l_ref = LLVMPointerType(l_ctx, 0);

    v_add_symbol("v_target_global_ctx_ref", LLVMOpaqueType, g_ref);
    v_add_symbol("v_target_local_ctx_ref",  LLVMOpaqueType, l_ref);
}

{
    arg0 = v_alloca(LLVMTypeRef, 3);
    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    ft = LLVMFunctionType(v_target_global_ctx_ref, 0, 0, 0);
    v_add_symbol_type("v_target_get_voidc_global_ctx", ft);
    v_add_symbol_type("v_target_get_global_ctx", ft);

    v_store(v_target_global_ctx_ref, arg0);

    ft = LLVMFunctionType(void, arg0, 1, 0);
    v_add_symbol_type("v_target_set_global_ctx", ft);
    v_add_symbol_type("v_target_destroy_global_ctx", ft);

    v_store(size_t, arg0);
    v_store(size_t, arg1);
    v_store(size_t, arg2);

    ft = LLVMFunctionType(v_target_global_ctx_ref, arg0, 3, 0);
    v_add_symbol_type("v_target_create_global_ctx", ft);

    char_ptr = LLVMPointerType(char, 0);

    v_store(char_ptr,                arg0);
    v_store(v_target_global_ctx_ref, arg1);

    ft = LLVMFunctionType(v_target_local_ctx_ref, arg0, 2, 0);
    v_add_symbol_type("v_target_create_local_ctx", ft);

    v_store(v_target_local_ctx_ref, arg0);

    ft = LLVMFunctionType(void, arg0, 1, 0);
    v_add_symbol_type("v_target_destroy_local_ctx", ft);

    ft = LLVMFunctionType(LLVMBuilderRef, 0, 0, 0);
    v_add_symbol_type("v_target_get_voidc_builder", ft);
    v_add_symbol_type("v_target_get_builder", ft);
}


