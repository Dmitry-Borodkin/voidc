//---------------------------------------------------------------------
//- Copyright (C) 2020-2021 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("switch.void  must be imported into the voidc target only!");

    v_import("voidc_target.void");
    v_import("voidc_types.void");
    v_import("voidc_util.void");
    v_import("voidc_ast.void");
    v_import("voidc_quark.void");
    v_import("voidc_visitor.void");
    v_import("voidc_compiler.void");
    v_import("vpeg_parser.void");
    v_import("vpeg_grammar.void");
    v_import("vpeg_context.void");

    v_import("llvm-c/Core.void");

    v_import("function_hack.void");
    v_import("memory.void");
    v_import("if_then_else.void");
    v_import("arithmetic.void");
    v_import("block.void");
    v_import("loop.void");
    v_import("grammar.void");
}

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_loop();
    voidc_enable_statement_grammar();
}


//---------------------------------------------------------------------
{   _voidc_opaque_type = v_find_type("voidc_opaque_type");

    v_add_symbol("_voidc_opaque_type", _voidc_opaque_type, _voidc_opaque_type);

    _void = v_find_type("void");

    v_add_symbol("_void", _voidc_opaque_type, _void);

    void_ptr = v_pointer_type(_void, 0);
    v_add_symbol("void_ptr", _voidc_opaque_type, void_ptr);

    v_add_symbol("_voidc_visitor_ptr", _voidc_opaque_type, v_find_type("voidc_visitor_ptr"));

    v_add_symbol("_v_ast_expr_ptr",         _voidc_opaque_type, v_find_type("v_ast_expr_ptr"));
    v_add_symbol("_v_ast_generic_list_ptr", _voidc_opaque_type, v_find_type("v_ast_generic_list_ptr"));

    v_add_symbol("_v_ast_opaque_expr_sptr",         _voidc_opaque_type, v_find_type("v_ast_opaque_expr_sptr"));
    v_add_symbol("_v_ast_opaque_generic_list_sptr", _voidc_opaque_type, v_find_type("v_ast_opaque_generic_list_sptr"));

    v_add_symbol("_v_ast_opaque_expr_list_sptr", _voidc_opaque_type, v_find_type("v_ast_opaque_expr_list_sptr"));
    v_add_symbol("_v_ast_opaque_stmt_list_sptr", _voidc_opaque_type, v_find_type("v_ast_opaque_stmt_list_sptr"));

    v_add_symbol("_v_quark_t", _voidc_opaque_type, v_find_type("v_quark_t"));

    v_add_symbol("_v_ast_generic_vtable", _voidc_opaque_type, v_find_type("v_ast_generic_vtable"));

    v_add_symbol("_v_ast_stmt_ptr", _voidc_opaque_type, v_find_type("v_ast_stmt_ptr"));

    v_add_symbol("_v_ast_opaque_stmt_sptr", _voidc_opaque_type, v_find_type("v_ast_opaque_stmt_sptr"));

    v_add_symbol("_v_ast_base_ptr",      _voidc_opaque_type, v_find_type("v_ast_base_ptr"));
    v_add_symbol("_v_ast_expr_list_ptr", _voidc_opaque_type, v_find_type("v_ast_expr_list_ptr"));
    v_add_symbol("_v_ast_stmt_list_ptr", _voidc_opaque_type, v_find_type("v_ast_stmt_list_ptr"));

    v_add_symbol("_v_peg_grammar_action_fun_t", _voidc_opaque_type, v_find_type("v_peg_grammar_action_fun_t"));
    v_add_symbol("_v_util_std_any_ptr",         _voidc_opaque_type, v_find_type("v_util_std_any_ptr"));
    v_add_symbol("_size_t",                     _voidc_opaque_type, v_find_type("size_t"));
}

//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);


    //-----------------------------------------------------------------
    //- stmt_switch method ...
    //-----------------------------------------------------------------
    v_store(_voidc_visitor_ptr,      typ0);
    v_store(void_ptr,                typ1);
    v_store(_v_ast_expr_ptr,         typ2);
    v_store(_v_ast_generic_list_ptr, typ3);

    method_ft  = v_function_type(_void, typ0, 4, false);
    method_ptr = v_pointer_type(method_ft, 0);

    v_add_symbol("method_ft",  _voidc_opaque_type, method_ft);
    v_add_symbol("method_ptr", _voidc_opaque_type, method_ptr);


    //-----------------------------------------------------------------
    //- ast_stmt_switch_t ...
    //-----------------------------------------------------------------
    ast_stmt_switch_t = v_struct_type_named("struct.ast_stmt_switch_t");

    v_store(_v_ast_opaque_expr_sptr,         typ0);
    v_store(_v_ast_opaque_generic_list_sptr, typ1);

    v_type_struct_set_body(ast_stmt_switch_t, typ0, 2, false);

    ast_stmt_switch_ptr = v_pointer_type(ast_stmt_switch_t, 0);

    v_add_symbol("ast_stmt_switch_t",   _voidc_opaque_type, ast_stmt_switch_t);
    v_add_symbol("ast_stmt_switch_ptr", _voidc_opaque_type, ast_stmt_switch_ptr);


    //-----------------------------------------------------------------
    //- ast_case_block_t ...
    //-----------------------------------------------------------------
    ast_case_block_t = v_struct_type_named("struct.ast_case_block_t");

    v_store(_v_ast_opaque_expr_list_sptr, typ0);
    v_store(_v_ast_opaque_stmt_list_sptr, typ1);

    v_type_struct_set_body(ast_case_block_t, typ0, 2, false);

    ast_case_block_ptr = v_pointer_type(ast_case_block_t, 0);

    v_add_symbol("ast_case_block_t",   _voidc_opaque_type, ast_case_block_t);
    v_add_symbol("ast_case_block_ptr", _voidc_opaque_type, ast_case_block_ptr);
}


//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("my_stmt_switch_mod");

    v_set_module(module);

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}


//---------------------------------------------------------------------
//- quark ...
//---------------------------------------------------------------------
{
    quark_name = "v_ast_stmt_switch_t_visitor_method_tag";

    quark_p = v_quark_ptr_from_string(quark_name);

    v_export_symbol(quark_name, v_reference_type(_v_quark_t, 0), quark_p);

    v_add_alias("quark", quark_name);
}


//---------------------------------------------------------------------
//- stmt_switch destroy ...
//---------------------------------------------------------------------
{
    _v_ast_generic_destroy_fun_t = v_find_type("v_ast_generic_destroy_fun_t");

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_switch_destroy", _v_ast_generic_destroy_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, ast_stmt_switch_ptr);

    arg  = v_getelementptr(obj, 0, 0);
    list = v_getelementptr(obj, 0, 1);

    v_terminate(arg);
    v_terminate(list);

    v_mfree(obj);
}


//---------------------------------------------------------------------
//- stmt_switch accept ...
//---------------------------------------------------------------------
{
    _v_ast_generic_accept_fun_t = v_find_type("v_ast_generic_accept_fun_t");

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_switch_accept", _v_ast_generic_accept_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
    v_add_parameter_name(f, 1, "visitor",  _voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "aux",      void_ptr);
}
{
    obj = v_cast(void_obj, ast_stmt_switch_ptr);

    arg  = v_getelementptr(obj, 0, 0);
    list = v_getelementptr(obj, 0, 1);

    void_method = voidc_visitor_get_void_method(visitor, quark);

    method = v_cast(void_method, method_ptr);

    method(visitor, aux, arg, list);
}


//-----------------------------------------------------------------------
//- stmt_switch vtable ...
//-------------------------------------------------------------------
{
    module = v_get_module();

    val0 = v_alloca(LLVMValueRef, 3);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);

    destroy_f = v_obtain_function("voidc_ast_stmt_switch_destroy");
    accept_f  = v_obtain_function("voidc_ast_stmt_switch_accept");
    quark_u   = LLVMGetUndef(v_type_get_llvm_type(_v_quark_t));

    v_store(destroy_f, val0);
    v_store(accept_f,  val1);
    v_store(quark_u,   val2);

    v_ast_generic_vtable_ = v_type_get_llvm_type(_v_ast_generic_vtable);

    vtable_v = LLVMConstNamedStruct(v_ast_generic_vtable_, val0, 3);

    vtable_g = LLVMAddGlobal(module, v_ast_generic_vtable_, "voidc_ast_stmt_switch_vtable");

    LLVMSetLinkage(vtable_g, LLVMPrivateLinkage);

    LLVMSetInitializer(vtable_g, vtable_v);

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}

{   v_add_symbol("voidc_ast_stmt_switch_vtable", _v_ast_generic_vtable, 0);
}


//---------------------------------------------------------------------
//- v_ast_make_stmt_switch - ...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(_v_ast_stmt_ptr,         typ0);
    v_store(_v_ast_expr_ptr,         typ1);
    v_store(_v_ast_generic_list_ptr, typ2);

    ft = v_function_type(_void, typ0, 3, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_ast_make_stmt_switch", ft);

    v_add_parameter_name(f, 0, "ret",  _v_ast_stmt_ptr);
    v_add_parameter_name(f, 1, "arg",  _v_ast_expr_ptr);
    v_add_parameter_name(f, 2, "list", _v_ast_generic_list_ptr);
}
{
    obj = v_malloc(ast_stmt_switch_t);

    obj_arg  = v_getelementptr(obj, 0, 0);
    obj_list = v_getelementptr(obj, 0, 1);

    v_initialize(obj_arg);
    v_initialize(obj_list);

    v_copy(obj_arg,  arg);
    v_copy(obj_list, list);

    v_ast_make_stmt_generic(ret, voidc_ast_stmt_switch_vtable, obj);
}


//---------------------------------------------------------------------
//- case_block destroy ...
//---------------------------------------------------------------------
{
    _v_ast_generic_destroy_fun_t = v_find_type("v_ast_generic_destroy_fun_t");

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_case_block_destroy", _v_ast_generic_destroy_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, ast_case_block_ptr);

    arg_list  = v_getelementptr(obj, 0, 0);
    stmt_list = v_getelementptr(obj, 0, 1);

    v_terminate(arg_list);
    v_terminate(stmt_list);

    v_mfree(obj);
}


//-----------------------------------------------------------------------
//- case_block vtable ...
//-------------------------------------------------------------------
{
    module = v_get_module();

    val0 = v_alloca(LLVMValueRef, 3);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);

    destroy_f = v_obtain_function("voidc_ast_case_block_destroy");

    _v_ast_generic_accept_fun_t = v_find_type("v_ast_generic_accept_fun_t");

    accept_p  = v_pointer_type(_v_ast_generic_accept_fun_t, 0);
    accept_p_ = v_type_get_llvm_type(accept_p);

    v_quark_t_ = v_type_get_llvm_type(_v_quark_t);

    accept_u = LLVMGetUndef(accept_p_);
    quark_u  = LLVMGetUndef(v_quark_t_);

    v_store(destroy_f, val0);
    v_store(accept_u,  val1);       //- Undef!
    v_store(quark_u,   val2);       //- Undef!

    v_ast_generic_vtable_ = v_type_get_llvm_type(_v_ast_generic_vtable);

    vtable_v = LLVMConstNamedStruct(v_ast_generic_vtable_, val0, 3);

    vtable_g = LLVMAddGlobal(module, v_ast_generic_vtable_, "voidc_ast_case_block_vtable");

    LLVMSetLinkage(vtable_g, LLVMPrivateLinkage);

    LLVMSetInitializer(vtable_g, vtable_v);

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}

{   v_add_symbol("voidc_ast_case_block_vtable", _v_ast_generic_vtable, 0);      //- Sic!
}


//---------------------------------------------------------------------
//- v_ast_make_case_block - ...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(_v_ast_base_ptr,      typ0);
    v_store(_v_ast_expr_list_ptr, typ1);
    v_store(_v_ast_stmt_list_ptr, typ2);

    ft = v_function_type(_void, typ0, 3, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_ast_make_case_block", ft);

    v_add_parameter_name(f, 0, "ret",       _v_ast_base_ptr);
    v_add_parameter_name(f, 1, "arg_list",  _v_ast_expr_list_ptr);
    v_add_parameter_name(f, 2, "stmt_list", _v_ast_stmt_list_ptr);
}
{
    obj = v_malloc(ast_case_block_t);

    obj_arg_list  = v_getelementptr(obj, 0, 0);
    obj_stmt_list = v_getelementptr(obj, 0, 1);

    v_initialize(obj_arg_list);
    v_initialize(obj_stmt_list);

    v_copy(obj_arg_list,  arg_list);
    v_copy(obj_stmt_list, stmt_list);

    v_ast_make_generic(ret, voidc_ast_case_block_vtable, obj);
}


//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_case_item_grammar_action", _v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       _v_util_std_any_ptr);
    v_add_parameter_name(f, 1, "any0",      _v_util_std_any_ptr);
    v_add_parameter_name(f, 2, "any_count", _size_t);
}
{
    arg = v_std_any_get_pointer(v_ast_opaque_expr_sptr, any0);

    if (arg)
    {
        v_std_any_set_pointer(ret, arg);    //- "Normal" case
    }
    else
    {
        arg = v_alloca(v_ast_opaque_expr_sptr);
        v_initialize(arg);

        v_std_any_set_pointer(ret, arg);    //- Empty - "default"

        v_terminate(arg);
    }
}


//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_case_block_grammar_action", _v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       _v_util_std_any_ptr);
    v_add_parameter_name(f, 1, "any0",      _v_util_std_any_ptr);
    v_add_parameter_name(f, 2, "any_count", _size_t);
}
{
    any1 = v_getelementptr(any0, 1);

    case_list = v_std_any_get_pointer(v_ast_opaque_expr_list_sptr, any0);
    stmt_list = v_std_any_get_pointer(v_ast_opaque_stmt_list_sptr, any1);

    case_block = v_alloca(v_ast_opaque_base_sptr);
    v_initialize(case_block);

    v_ast_make_case_block(case_block, case_list, stmt_list);

    v_std_any_set_pointer(ret, case_block);
    v_terminate(case_block);
}


//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_case_list_grammar_action", _v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       _v_util_std_any_ptr);
    v_add_parameter_name(f, 1, "any0",      _v_util_std_any_ptr);
    v_add_parameter_name(f, 2, "any_count", _size_t);
}
{
    any1 = v_getelementptr(any0, 1);

    list = v_std_any_get_pointer(v_ast_opaque_generic_list_sptr, any0);
    item = v_std_any_get_pointer(v_ast_opaque_base_sptr,         any1);

    ret_list = v_alloca(v_ast_opaque_generic_list_sptr);
    v_initialize(ret_list);

    if (list)   v_list_append(ret_list, list, item);
    else        v_make_list(ret_list, 0, item, 1);          //- Quark == 0 (!)

    v_std_any_set_pointer(ret, ret_list);

    v_terminate(ret_list);
}


//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_stmt_switch_grammar_action", _v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       _v_util_std_any_ptr);
    v_add_parameter_name(f, 1, "any0",      _v_util_std_any_ptr);
    v_add_parameter_name(f, 2, "any_count", _size_t);
}
{
    any1 = v_getelementptr(any0, 1);

    arg  = v_std_any_get_pointer(v_ast_opaque_expr_sptr,         any0);
    list = v_std_any_get_pointer(v_ast_opaque_generic_list_sptr, any1);

    stmt = v_alloca(v_ast_opaque_stmt_sptr);
    v_initialize(stmt);

    v_ast_make_stmt_switch(stmt, arg, list);

    v_std_any_set_pointer(ret, stmt);

    v_terminate(stmt);
}


//---------------------------------------------------------------------
//- compile_ast_stmt_switch_t - visitor method
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_ast_stmt_switch_t", method_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "visitor", _voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "aux",     void_ptr);
    v_add_parameter_name(f, 2, "arg",     _v_ast_expr_ptr);
    v_add_parameter_name(f, 3, "list",    _v_ast_generic_list_ptr);
}
{
    v_save_variables();


    //- Compile switch argument

    v_set_result_type(UNREFERENCE_TAG);

    arg_base = v_cast(arg, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor, aux);

    arg0 = v_get_result_value();        //- switch argument...


    //- Count switch cases

    ast_base = v_alloca(v_ast_opaque_base_sptr);
    v_initialize(ast_base);

    case_num = v_alloca(int);   case_num = v_reference(case_num);
    v_assign(case_num, 0);

    case_max = v_alloca(int);   case_max = v_reference(case_max);
    v_assign(case_max, 0);

    list_count = v_list_get_size(list);

    case_idx = v_alloca(int);   case_idx = v_reference(case_idx);
    v_assign(case_idx, 0);

    loop
    {
        fin = v_icmp(LLVMIntEQ, case_idx, list_count);
        if (fin)  v_break();

        v_list_get_items(list, case_idx, ast_base);

        obj = v_ast_generic_get_object(ast_base);

        case_block = v_cast(obj, ast_case_block_ptr);

        case_list = v_getelementptr(case_block, 0, 0);

        n = v_list_get_size(case_list);

        num = v_binop(LLVMAdd, case_num, n);

        v_assign(case_num, num);

        cmp = v_icmp(LLVMIntUGT, n, case_max);

        if (cmp)  v_assign(case_max, n);

        idx = v_binop(LLVMAdd, case_idx, 1);

        v_assign(case_idx, idx);
    }


    //- Start...

    builder = v_target_get_builder();

    llvm_stacksave_f = v_obtain_function("llvm.stacksave");

    switch = LLVMBuildCall(builder, llvm_stacksave_f, 0, 0, "switch");


    i8_ptr = v_pointer_type(v_int_type(8), 0);

    switch_leave_var_v = LLVMBuildAlloca(builder, v_type_get_llvm_type(i8_ptr), "switch_leave_var_v");

    leave_bv = v_get_variable_value("voidc.internal_branch_target_leave");
    leave_b  = LLVMValueAsBasicBlock(leave_bv);

    cur_f = LLVMGetBasicBlockParent(leave_b);

    leave_b_addr = LLVMBlockAddress(cur_f, leave_b);

    LLVMBuildStore(builder, leave_b_addr, switch_leave_var_v);


    switch_leave_b  = LLVMAppendBasicBlock(cur_f, "switch_leave_b");
    switch_leave_bv = LLVMBasicBlockAsValue(switch_leave_b);

    v_add_variable("voidc.internal_branch_target_leave", 0, switch_leave_bv);       //- Sic!


    switch_exit_b = LLVMAppendBasicBlock(cur_f, "switch_exit_b");

    switch_exit_b_addr = LLVMBlockAddress(cur_f, switch_exit_b);


    v_add_variable("voidc.internal_branch_target_variable", 0, switch_leave_var_v);
    v_add_variable("voidc.internal_branch_target_break",    0, switch_exit_b_addr);


    //- Generate llvm's switch statement...

    switch_default_b = LLVMAppendBasicBlock(cur_f, "switch_default_b");

    switch_v = LLVMBuildSwitch(builder, arg0, switch_default_b, case_num);


    //- Compile case blocks...

    case_args = v_malloc(v_ast_opaque_expr_sptr, case_max);
    v_initialize(case_args, case_max);

    case_i = v_alloca(int);                 case_i = v_reference(case_i);

    case_b = v_alloca(LLVMBasicBlockRef);   case_b = v_reference(case_b);

    v_assign(case_idx, 0);

    loop
    {
        fin = v_icmp(LLVMIntEQ, case_idx, list_count);
        if (fin)  v_break();

        v_list_get_items(list, case_idx, ast_base);

        obj = v_ast_generic_get_object(ast_base);

        case_block = v_cast(obj, ast_case_block_ptr);

        case_list = v_getelementptr(case_block, 0, 0);

        n = v_list_get_size(case_list);

        v_list_get_items(case_list, 0, case_args, n);

        v_assign(case_b, 0);

        cur_b = LLVMGetInsertBlock(builder);

        v_assign(case_i, 0);

        loop
        {
            fin = v_icmp(LLVMIntEQ, case_i, n);
            if (fin)  v_break();

            case_arg_i = v_getelementptr(case_args, case_i);

            emp = v_empty(case_arg_i);

            if (emp)        //- default case
            {
                v_assign(case_b, switch_default_b);

                LLVMMoveBasicBlockAfter(switch_default_b, cur_b);
            }

            i = v_binop(LLVMAdd, case_i, 1);

            v_assign(case_i, i);
        }

        if (case_b) ;       //- Have default case
        else                //- All "normal" cases
        {
            b = LLVMAppendBasicBlock(cur_f, "case_b");

            v_assign(case_b, b);
        }

        trm_v = LLVMGetBasicBlockTerminator(cur_b);
        if (trm_v) ;
        else
        {
            LLVMBuildBr(builder, case_b);
        }


        LLVMPositionBuilderAtEnd(builder, case_b);

        stmt_list = v_getelementptr(case_block, 0, 1);

        base_ast = v_cast(stmt_list, v_ast_base_ptr);

        v_ast_accept_visitor(base_ast, visitor, aux);


        v_assign(case_i, 0);

        loop
        {
            fin = v_icmp(LLVMIntEQ, case_i, n);
            if (fin)  v_break();

            case_arg_i = v_getelementptr(case_args, case_i);

            i = v_binop(LLVMAdd, case_i, 1);

            v_assign(case_i, i);

            emp = v_empty(case_arg_i);

            if (emp)  v_continue();     //- default case

            //- "Normal" case

            v_set_result_type(UNREFERENCE_TAG);             //- ???

            base_ast = v_cast(case_arg_i, v_ast_base_ptr);

            v_ast_accept_visitor(base_ast, visitor, aux);

            val = v_get_result_value();

            LLVMAddCase(switch_v, val, case_b);
        }

        idx = v_binop(LLVMAdd, case_idx, 1);

        v_assign(case_idx, idx);
    }


    //- Finish...

    cur_b = LLVMGetInsertBlock(builder);

    if (LLVMGetBasicBlockTerminator(cur_b)) ;
    else
    {
        voidc_intrinsic_break_helper(switch_leave_var_v, switch_exit_b_addr);
    }

    if (LLVMGetBasicBlockTerminator(switch_default_b)) ;
    else
    {
        LLVMPositionBuilderAtEnd(builder, switch_default_b);

        voidc_intrinsic_break_helper(switch_leave_var_v, switch_exit_b_addr);
    }


    LLVMMoveBasicBlockAfter(switch_leave_b, cur_b);


    LLVMPositionBuilderAtEnd(builder, switch_leave_b);


    leave_addr = LLVMBuildLoad(builder, switch_leave_var_v, "leave_addr");


    val0 = v_alloca(LLVMValueRef);

    v_store(switch, val0);

    llvm_stackrestore_f = v_obtain_function("llvm.stackrestore");

    LLVMBuildCall(builder, llvm_stackrestore_f, val0, 1, "");


    ibr_insn = LLVMBuildIndirectBr(builder, leave_addr, 2);

    LLVMAddDestination(ibr_insn, leave_b);
    LLVMAddDestination(ibr_insn, switch_exit_b);


    LLVMMoveBasicBlockAfter(switch_exit_b, switch_leave_b);


    LLVMPositionBuilderAtEnd(builder, switch_exit_b);


    v_terminate(case_args, case_max);
    v_mfree(case_args);

    v_terminate(ast_base);

    v_restore_variables();
}


//---------------------------------------------------------------------
//- Enable statement switch compilation
//---------------------------------------------------------------------
{
    ft = v_function_type(_void, 0, 0, false);

    //-----------------------------------------------------------------
    v_function_hack("voidc_enable_statement_switch_compiler", ft);
}
{
    v_return_if(voidc_visitor_get_void_method(voidc_compiler, quark));


    v_store(quark, v_getelementptr(voidc_ast_stmt_switch_vtable, 0, 2));

    voidc_visitor_set_void_method(voidc_compiler, voidc_compiler, quark, compile_ast_stmt_switch_t);
}


//---------------------------------------------------------------------
//- Enable statement switch
//---------------------------------------------------------------------
{
    ft = v_function_type(_void, 0, 0, false);

    //-----------------------------------------------------------------
    v_function_hack("voidc_enable_statement_switch", ft);
}
{
    v_return_if_not(voidc_has_grammar());
    v_return_if(voidc_grammar_has_parser("stmt_switch"));


    voidc_enable_statement_switch_compiler();


    gr0 = v_alloca(v_peg_opaque_grammar_sptr);
    v_initialize(gr0);

    v_peg_get_grammar(gr0);


    grammar gr0
    {
    actions:
        mk_case_item   = mk_case_item_grammar_action;
        mk_case_block  = mk_case_block_grammar_action;
        mk_case_list   = mk_case_list_grammar_action;
        mk_stmt_switch = mk_stmt_switch_grammar_action;

    parsers:

        stmt_switch = "switch" _ '(' _ e:expr _ ')' _ '{' _ l:case_list _ '}'    { mk_stmt_switch(e, l) };


        case_list = l:case_list _ b:case_block      { mk_case_list(l, b) }
                  / b:case_block                    { mk_case_list(0, b) };

        case_list is left-recursive;


        case_block = c:case_item_list _ s:stmt_list     { mk_case_block(c, s) };


        case_item_list = l:case_item_list _ i:case_item     { mk_expr_list(l, i) }
                       / i:case_item                        { mk_expr_list(0, i) };

        case_item_list is left-recursive;


        case_item = "case" !ident_cont _ e:expr _ ':'   { mk_case_item(e) }
                  / "default" _ ':'                     { mk_case_item(0) };


        stmt += stmt_switch;
    }


    v_peg_set_grammar(gr0);


    v_terminate(gr0);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_unit_load_module_to_jit(module);

    LLVMDisposeModule(module);
    v_set_module(0);
}


//---------------------------------------------------------------------
{
    v_make_export_symbol("v_ast_make_stmt_switch");
    v_make_export_symbol("v_ast_make_case_block");

    v_make_export_symbol("voidc_enable_statement_switch_compiler");
    v_make_export_symbol("voidc_enable_statement_switch");
}


