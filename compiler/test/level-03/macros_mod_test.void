{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("level-03/intrinsics_derive.void");
    v_import("level-03/local_objects.void");
    v_import("level-03/heap_objects.void");
    v_import("level-03/global_objects.void");
    v_import("level-03/coercions.void");
    v_import("level-03/namespaces.void");
    v_import("level-03/generics_etc.void");
    v_import("level-03/generating_ast.void");
    v_import("level-03/macros.void");

    v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();

    voidc_enable_intrinsics_derive();
    voidc_enable_local_objects();
    voidc_enable_heap_objects();
    voidc_enable_global_objects();
    voidc_enable_coercions();
    voidc_enable_namespaces();
    voidc_enable_generics_etc();
    voidc_enable_generating_ast();
    voidc_enable_macros();
}

//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("list_q", q_ref, q("my.list"));

    v_add_symbol("q_static_type_t", q_ref, q("v_static_type_t"));
}


//=====================================================================
{   voidc_unit_begin_module("macros_mod_test_module"); }


//---------------------------------------------------------------------
export
namespace my {


//---------------------------------------------------------------------
#define list: (T: v_static_type_t) ~> v_static_type_t  =  v_generic("my.list", t(T));


//---------------------------------------------------------------------
private
list_op_braces_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                           arg_ptrs: **v_ast_expr_t, arg_count: unsigned
                          ) ~> void
{
//printf("list_op_braces_intrinsic: start\n");
//defer printf("list_op_braces_intrinsic: stop\n");

    tr: &*v_type_t := v_get_result_type();

    is_reference = v_type_is_reference(tr);

    addr_sp: &unsigned := v_undef();

    if (is_reference)
    {
        addr_sp := v_type_refptr_get_address_space(tr);         //- Sic!
        tr      := v_type_refptr_get_element_type(tr);          //- Sic!
    }

    vr = v_obtain_special_result_value(vis, tr);

    list: &v_ast_stmt_list_t := {};

    {   ast = {'stmt'  my_any: &v_std_any_t := {};  'stmt'};

        v_make_list(&list, (&ast: *v_ast_stmt_t));
    }

    {   ast =
        {'stmt'

            #define my_step: (lst, v)
            {'stmt_list'

                v_std_any_set_value(&my_any, v);

                v_list_append(lst, lst, &my_any);

            'stmt_list'}

        'stmt'};

        v_list_append(&list, &list, (&ast: *v_ast_stmt_t));
    }

    expr: &v_ast_expr_t[4] := {};

    v_ast_make_expr_compiled(expr+0, v_pointer_type(v_util_list_t, 0), vr);

    stmt: &v_ast_stmt_t := {};

    my_step_q = v_quark_from_string("my_step");

    v_ast_make_expr_compiled(expr+2, v_find_type_q(q_static_type_t), (aux: LLVMValueRef));      //- Sic !!!

    v_ast_make_expr_identifier(expr+3, "v_typed");

    elst: &v_ast_expr_list_t := {};

    for (i: &int := 0; i < arg_count; ++i)
    {
        v_make_list(&elst, expr+2);

        v_list_append(&elst, &elst, arg_ptrs[i]);

        v_ast_make_expr_call(expr+1, expr+3, &elst);

        v_ast_make_stmt_call(&stmt, 0, my_step_q, expr, 2);

        v_list_append(&list, &list, &stmt);
    }

    v_ast_make_stmt_block(&stmt, &list, false);

    v_ast_accept_visitor(&stmt, vis);

    if (is_reference) v_set_result_type(v_reference_type(tr, addr_sp));
    else              v_set_result_type(tr);

    v_set_result_value(vr);
}

//---------------------------------------------------------------------
private
register_list_op_braces_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);        //- Element type
    arg1 = v_list_get_item(args, 1);        //- List type

    static_type_t = v_find_type("v_static_type_t");

    v_set_result_type(static_type_t);
    v_set_result_value(0);

    v_ast_accept_visitor(arg0, vis);

    elt = (v_get_result_value() : *v_type_t);

    v_set_result_type(static_type_t);
    v_set_result_value(0);

    v_ast_accept_visitor(arg1, vis);

    lst = (v_get_result_value() : *v_type_t);

    sstr: &v_std_string_t := {};

    v_std_string_set(&sstr, "my.list_op_braces-");

    voidc_internal_std_string_append_type(&sstr, elt);

    iname = v_std_string_get(&sstr);

    v_add_overload("v.op_braces", lst, iname);

    v_add_intrinsic(iname, list_op_braces_intrinsic, elt);      //- Sic!
}


//---------------------------------------------------------------------
#define instantiate_list: (T)
{'unit_defn_list'

  namespace my
  {
    #do (v_set_implementation_type(list(T), v_util_list_t))

    private
    namespace v_generic_ns(.my, c(list_detail, t(T)))       //- ???
    {
        impl_t = v_get_implementation_type(list(T));

        alwaysinline
        (_.impl): (s: &list(T)) ~> &impl_t  =  *(&s : *impl_t);
    }

    //-------------------------------------------------------------
    inlinehint
    (v_initialize(_)): (sp: *list(T), N: size_t) ~> void
    {
        for (i: &int := 0; i < N; ++i)
        {
            lst = &sp[i].impl;

            v_initialize(lst);

            v_make_list_nil(lst);
        }
    }

    alwaysinline
    (v_terminate(_)): (sp: *list(T), N: size_t) ~> void
    {
        v_terminate(&sp->impl, N);
    }

    alwaysinline
    (v_copy(_)): (dst: *list(T), src: *const list(T), N: size_t) ~> void
    {
        v_copy(&dst->impl, &src->impl, N);
    }

    #do (register_list_op_braces(T, list(T)))

    //-------------------------------------------------------------
    inlinehint
    (_[]): (sp: list(T), i: size_t) ~> T
    {
        a = v_list_get_item(&(&sp)->impl, i);
        v_assert(a);

        v_return(v_std_any_get_value(T, a));
    }

    inlinehint
    (_<<_): (sp: list(T), v: T) ~> list(T)
    {
        a: &v_std_any_t := {};

        v_std_any_set_value(&a, v);

        v_list_append(&v_get_return_value().impl, &sp.impl, &a);
    }

    inlinehint
    (_<<_): (sp: &list(T), v: T) ~> &list(T)  =
    {
        a: &v_std_any_t := {};

        v_std_any_set_value(&a, v);

        lst = &sp.impl;

        v_list_append(lst, lst, &a);

        sp
    };

    alwaysinline
    (_.size): (sp: list(T)) ~> size_t  =  v_list_get_size(&(&sp)->impl);

  }   //- namespace my

'unit_defn_list'}


//---------------------------------------------------------------------
enable_list_effort: (*void) ~> void
{
    v_add_intrinsic("register_list_op_braces", register_list_op_braces_intrinsic, 0);
}


//---------------------------------------------------------------------
}   //- namespace my


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
{   v_export_effort(my.enable_list_effort, 0); }


