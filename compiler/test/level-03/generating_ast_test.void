{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("level-03/intrinsics_derive.void");
    v_import("level-03/local_objects.void");
    v_import("level-03/heap_objects.void");
    v_import("level-03/global_objects.void");
    v_import("level-03/coercions.void");
    v_import("level-03/namespaces.void");
    v_import("level-03/generics_etc.void");
    v_import("level-03/generating_ast.void");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();

    voidc_enable_intrinsics_derive();
    voidc_enable_local_objects();
    voidc_enable_heap_objects();
    voidc_enable_global_objects();
    voidc_enable_coercions();
    voidc_enable_namespaces();
    voidc_enable_generics_etc();
    voidc_enable_generating_ast();
}


//=====================================================================
{   v_import("genast_mod_test.void"); }


//{ voidc_verify_jit_module_optimized(true); }
//{ v_debug_print_module(9); }
//---------------------------------------------------------------------
#do
(
    my.instantiate_refcnt_ptr(int),
    my.instantiate_refcnt_ptr(long),
)


some = my.make_refcnt(int);

{   *some := 777;
}

{   printf("some: %d\n", *some); }


{   foo: &my.refcnt_ptr(int)[3] := { some, some, some };

    printf("some.use_count: %zd\n", some.use_count);
}

{   printf("some.use_count: %zd\n", some.use_count);
}

{   foo: &my.refcnt_ptr(int) := some;

    printf("foo.use_count: %zd\n", foo.use_count);

    foo := {};          //- Sic !!!

    #if (v_defined(NDEBUG))
        printf("\nAnd here there should be a segmentation fault! It\'s OK!\n\n");
    #else
        printf("\nAnd here there should be an assertion! It\'s OK!\n\n");
    #endif

    printf("foo.use_count: %zd\n", foo.use_count);

    printf("Damn! Does not work!\n");
}



