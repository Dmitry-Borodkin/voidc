{   v_import("level-00");
    v_import("level-01");

    v_import("level-02/literals.void");
    v_import("level-02/loops_etc.void");
    v_import("level-02/aggregates.void");
    v_import("level-02/overloading.void");
    v_import("level-02/projections.void");
    v_import("level-02/structures.void");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01();

    voidc_enable_literals();
    voidc_enable_loops_etc();
    voidc_enable_aggregates();
    voidc_enable_overloading();
    voidc_enable_projections();
    voidc_enable_structures();
}


//---------------------------------------------------------------------
{   v_import("str_import_test.void");
}


//=====================================================================

struct qwerty_t
{
    x: int;             //- 0
    y: long;            //- 1

    p: *qwerty_t;       //- 2

    *const char;        //- 3 ...
};


s: &qwerty_t;

r: &qwerty_t := { 77, 999, &s, "r" };

s: &qwerty_t := { 7, 19, &r, "s" };


//---------------------------------------------------------------------
{
    q: &qwerty_t := s;

    q.y += r.p->y;

    printf("q: { x: %d, y: %ld, _, \"%s\" }\n", q.x, q.y, q[3]);

}


//---------------------------------------------------------------------
{
    printf("a.d: %g, a.p->d: %g\n", a.d, a.p->d);

    printf("M_PI: %.99g\n", M_PI);
    printf("M_PI: %.13a\n", M_PI);
}

//---------------------------------------------------------------------
{
    t: &*v_type_t    := v_undef();
    v: &LLVMValueRef := v_undef();

    name = "M_PI";

    ok = v_find_constant(name, &t, &v);

    if (ok)
    {
        printf("Found %s...  t: %p, v: %p\n", name, t, v);

        s = LLVMPrintTypeToString(v_type_get_llvm_type(t));

        printf("%s t: %s\n", name, s);

        LLVMDisposeMessage(s);

        s = LLVMPrintValueToString(v);

        printf("%s v: %s\n", name, s);

        LLVMDisposeMessage(s);
    }
    else
    {
        printf("%s not found!\n", name);
    }
}

//---------------------------------------------------------------------
{
    pi: &float(64) := M_PI;

    printf("pi: %llX !!!\n", *(&pi: *uint(64)));
}


