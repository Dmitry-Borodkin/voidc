{   v_import("level-00");
    v_import("level-01");

    v_import("level-02/literals.void");
    v_import("level-02/loops_etc.void");
    v_import("level-02/aggregates.void");
    v_import("level-02/overloading.void");
    v_import("level-02/projections.void");
    v_import("level-02/structures.void");
    v_import("level-02/mangling.void");
    v_import("level-02/inlining.void");

    v_import("printf.void");
}

{   v_enable_level_01();

    voidc_enable_literals();
    voidc_enable_loops_etc();
    voidc_enable_aggregates();
    voidc_enable_overloading();
    voidc_enable_projections();
    voidc_enable_structures();
    voidc_enable_mangling();
    voidc_enable_inlining();
}

//=====================================================================
{   voidc_unit_begin_module("inl_import_test_module"); }


//---------------------------------------------------------------------
{ v_set_export_flag(true); }


//---------------------------------------------------------------------
double = float(64);

struct vec2
{
    x: double;
    y: double;
};


//---------------------------------------------------------------------
alwaysinline
(_+_): (a: &vec2, b: &vec2) ~> vec2 = {a.x+b.x, a.y+b.y};

alwaysinline
(_-_): (a: &vec2, b: &vec2) ~> vec2 = {a.x-b.x, a.y-b.y};

alwaysinline
(+_): (a: &vec2) ~> vec2 = a;

alwaysinline
(-_): (a: &vec2) ~> vec2 = {-a.x, -a.y};

alwaysinline
(_*__): (k: double, v: &vec2) ~> vec2 = {k*v.x, k*v.y};

alwaysinline
(_*_): (v: &vec2, k: double) ~> vec2 = {v.x*k, v.y*k};

alwaysinline
(_/_): (v: &vec2, k: double) ~> vec2 = {v.x/k, v.y/k};


//=====================================================================
{   voidc_unit_end_module(); }


