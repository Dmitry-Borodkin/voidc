//---------------------------------------------------------------------
//- Copyright (C) 2020-2025 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("memory.void  must be imported into the voidc target only!");

    v_import("level-00");

    v_import("llvm-c/Core.void");

    v_import("function_hack.void");
    v_import("if_then_else.void");
    v_import("arithmetic.void");
    v_import("block.void");
}

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   void_ptr = v_pointer_type(void, 0);         //- Sic!

    v_add_type("void_ptr", void_ptr);

    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("q_static_type_t", q_ref, q("v_static_type_t"));
    v_add_symbol("size_t_q",        q_ref, q("size_t"));
}


//=====================================================================
{   voidc_unit_begin_module("voidc_memory_intrinsics_module"); }


//---------------------------------------------------------------------
//- v_malloc
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    malloc_f = v_function_hack("voidc_memory_malloc_intrinsic", voidc_intrinsic_t);

    LLVMSetLinkage(malloc_f, LLVMPrivateLinkage);

    aux  = v_add_parameter_name(malloc_f, 0, "aux",  void_ptr);
    vis  = v_add_parameter_name(malloc_f, 1, "vis",  voidc_visitor_ptr);
    self = v_add_parameter_name(malloc_f, 2, "self", v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    args = v_ast_expr_call_get_arg_list(call);

    args_count = v_list_get_size(args);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    builder = v_target_get_builder();

    v_set_result_type(v_find_type_q(q_static_type_t));
    v_set_result_value(0);

    arg0 = v_list_get_item(args, 0);                //- Type

    arg0_base = v_cast(arg0, v_ast_base_ptr);

    v_ast_accept_visitor(arg0_base, vis);

    type  = v_cast(v_get_result_value(), v_type_ptr);
    type_ = v_type_get_llvm_type(type);

    size_var = v_reference(v_alloca(LLVMValueRef));

    v_assign(size_var, LLVMSizeOf(type_));

    if (v_icmp(LLVMIntNE, args_count, v_cast(1, size_t)))
    {
        v_set_result_type(v_find_type_q(size_t_q));
        v_set_result_value(0);

        arg1 = v_list_get_item(args, 1);

        arg1_base = v_cast(arg1, v_ast_base_ptr);

        v_ast_accept_visitor(arg1_base, vis);

        num = v_get_result_value();

        size = LLVMBuildMul(builder, size_var, num, "");

        v_assign(size_var, size);
    }

    lltyp = v_alloca(LLVMTypeRef);

    malloc_f   = v_obtain_function("malloc", lltyp);
    malloc_ft_ = v_load(lltyp);

    ret = LLVMBuildCall2(builder, malloc_ft_, malloc_f, v_pointer(size_var), 1, "");

    pt = v_pointer_type(type, 0);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(pt, ret);
}


//---------------------------------------------------------------------
//- v_free
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_memory_free_intrinsic", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    builder = v_target_get_builder();

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    arg = v_list_get_item(arg_list, 0);

    arg_base = v_cast(arg, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor);

    arg = v_get_result_value();

    LLVMBuildFree(builder, arg);
}


//---------------------------------------------------------------------
//- Enable v_malloc/v_free intrinsics
//---------------------------------------------------------------------
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    v_function_hack("voidc_enable_memory_intrinsics", ft);
}
{
    v_add_intrinsic("v_malloc", voidc_memory_malloc_intrinsic, 0);
    v_add_intrinsic("v_free",   voidc_memory_free_intrinsic,   0);

    void_ptr = v_pointer_type(v_void_type(), 0);        //- Sic!

    typ = v_alloca(v_type_ptr);

    v_store(v_find_type_q(size_t_q), typ);

    ft = v_function_type(void_ptr, typ, 1, false);
    v_add_symbol("malloc", ft, 0);
}


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
{   v_make_export_symbol("voidc_enable_memory_intrinsics");
}


