//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("level-01  must be imported into the voidc target only!");

    v_import("level-00/voidc_target.void");

    v_import("llvm-c/Core.void");

    v_export_import("function_hack.void");
    v_export_import("if_then_else.void");
    v_export_import("block.void");
    v_export_import("loop.void");
    v_export_import("grammar.void");
    v_export_import("switch.void");
    v_export_import("memory.void");
    v_export_import("expression.void");
    v_export_import("defer.void");
    v_export_import("definitions.void");
}


//---------------------------------------------------------------------
{
    voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_expression();
    voidc_enable_definitions();
}


//=====================================================================
{   voidc_unit_begin_module("level-01_module"); }


//---------------------------------------------------------------------
export
v_enable_level_01: () ~> void
{
    gctx = v_target_get_global_ctx();
    vctx = v_target_get_voidc_global_ctx();

    if (gctx != vctx)
    {
        v_target_set_global_ctx(vctx);

        v_import("level-00");
        v_import("level-01");

        return_aux: &*void := v_undef();
        return_fun = v_get_intrinsic("v_return", &return_aux);

        init_aux: &*void := v_undef();
        init_fun = v_get_intrinsic("v_initialize", &init_aux);

        term_aux: &*void := v_undef();
        term_fun = v_get_intrinsic("v_terminate", &term_aux);

        copy_aux: &*void := v_undef();
        copy_fun = v_get_intrinsic("v_copy", &copy_aux);

        move_aux: &*void := v_undef();
        move_fun = v_get_intrinsic("v_move", &move_aux);

        v_target_set_global_ctx(gctx);

        v_add_intrinsic("v_return",     return_fun, return_aux);
        v_add_intrinsic("v_initialize", init_fun,   init_aux);
        v_add_intrinsic("v_terminate",  term_fun,   term_aux);
        v_add_intrinsic("v_copy",       copy_fun,   copy_aux);
        v_add_intrinsic("v_move",       move_fun,   move_aux);
    }

    voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_loop();

    if (gctx == vctx)
    {
        voidc_enable_statement_grammar();
    }

    voidc_enable_statement_switch();
    voidc_enable_memory_intrinsics();
    voidc_enable_expression();
    voidc_enable_statement_defer();
    voidc_enable_definitions();
}


//=====================================================================
{   voidc_unit_end_module(); }


