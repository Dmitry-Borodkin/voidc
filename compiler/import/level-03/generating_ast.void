//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("generating_ast.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("intrinsics_derive.void");
    v_import("local_objects.void");
    v_import("heap_objects.void");
    v_import("global_objects.void");
    v_import("coercions.void");
    v_import("namespaces.void");
    v_import("generics_etc.void");

//  v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();

    voidc_enable_intrinsics_derive();
    voidc_enable_local_objects();
    voidc_enable_heap_objects();
    voidc_enable_global_objects();
    voidc_enable_coercions();
    voidc_enable_namespaces();
    voidc_enable_generics_etc();
}


//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("enabled_q", q_ref, q("voidc.internal.generating_ast_enabled"));

    v_add_symbol("q_base",         q_ref, q("v_ast_base_ptr"));
    v_add_symbol("q_unit",         q_ref, q("v_ast_unit_ptr"));
    v_add_symbol("q_stmt_list",    q_ref, q("v_ast_stmt_list_ptr"));
    v_add_symbol("q_stmt",         q_ref, q("v_ast_stmt_ptr"));
    v_add_symbol("q_expr_list",    q_ref, q("v_ast_expr_list_ptr"));
    v_add_symbol("q_expr",         q_ref, q("v_ast_expr_ptr"));
    v_add_symbol("q_generic_list", q_ref, q("v_ast_generic_list_ptr"));

    v_add_symbol("q_cast",          q_ref, q("v_cast"));
    v_add_symbol("q_malloc",        q_ref, q("v_malloc"));
    v_add_symbol("q_free",          q_ref, q("v_free"));
    v_add_symbol("q_getelementptr", q_ref, q("v_getelementptr"));
    v_add_symbol("q_break",         q_ref, q("v_break"));
    v_add_symbol("q_reference",     q_ref, q("v_reference"));

    v_add_symbol("q_ast_make_unit", q_ref, q("v_ast_make_unit"));
    v_add_symbol("q_make_list_nil", q_ref, q("v_make_list_nil"));
    v_add_symbol("q_list_append",   q_ref, q("v_list_append"));

    v_add_symbol("q_quark_from_string", q_ref, q("v_quark_from_string"));

    v_add_symbol("q_ast_make_unit_stmt_init", q_ref, q("v_ast_make_unit_stmt_init"));
    v_add_symbol("q_ast_make_unit_stmt_term", q_ref, q("v_ast_make_unit_stmt_term"));

    v_add_symbol("q_initialize", q_ref, q("v_initialize"));
    v_add_symbol("q_terminate",  q_ref, q("v_terminate"));
    v_add_symbol("q_copy",       q_ref, q("v_copy"));

    v_add_symbol("q_ast_make_stmt_q",            q_ref, q("v_ast_make_stmt_q"));
    v_add_symbol("q_ast_make_stmt_if_then_else", q_ref, q("v_ast_make_stmt_if_then_else"));
    v_add_symbol("q_ast_make_stmt_block",        q_ref, q("v_ast_make_stmt_block"));
    v_add_symbol("q_ast_make_stmt_loop",         q_ref, q("v_ast_make_stmt_loop"));
    v_add_symbol("q_ast_make_stmt_defer",        q_ref, q("v_ast_make_stmt_defer"));
    v_add_symbol("q_ast_make_stmt_switch",       q_ref, q("v_ast_make_stmt_switch"));
    v_add_symbol("q_ast_make_case_block",        q_ref, q("v_ast_make_case_block"));

    v_add_symbol("q_ast_make_expr_call",         q_ref, q("v_ast_make_expr_call"));
    v_add_symbol("q_ast_make_expr_identifier_q", q_ref, q("v_ast_make_expr_identifier_q"));
    v_add_symbol("q_ast_make_expr_integer",      q_ref, q("v_ast_make_expr_integer"));
    v_add_symbol("q_ast_make_expr_string_data",  q_ref, q("v_ast_make_expr_string_data"));
    v_add_symbol("q_ast_make_expr_char",         q_ref, q("v_ast_make_expr_char"));
    v_add_symbol("q_ast_make_expr_struct",       q_ref, q("v_ast_make_expr_struct"));
    v_add_symbol("q_ast_make_expr_union",        q_ref, q("v_ast_make_expr_union"));
    v_add_symbol("q_ast_make_expr_stmt",         q_ref, q("v_ast_make_expr_stmt"));
    v_add_symbol("q_ast_make_expr_block",        q_ref, q("v_ast_make_expr_block"));

    v_add_symbol("q_ast_make_operator_unary",  q_ref, q("v_ast_make_operator_unary"));
    v_add_symbol("q_ast_make_operator_binary", q_ref, q("v_ast_make_operator_binary"));
}


//=====================================================================
{   voidc_unit_begin_module("generating_ast_module"); }


//---------------------------------------------------------------------
{ v_set_export_flag(true); }


//---------------------------------------------------------------------
struct voidc_ast_generator_t
{
    visitor: voidc_visitor_t;           //- Kinda, "base class"...

    //---------------------------------------------------------
    gen_list: v_ast_stmt_list_t;

    max_var: int;
    cur_var: int;

    ret_var: v_quark_t;

    var_map: v_util_map_t;

};

//---------------------------------------------------------------------
(v_initialize(_)): (d: *voidc_ast_generator_t, n: size_t) ~> void
{
    for (i: &int := 0; i < n; ++i)
    {
        di = d[i];

        v_initialize(&di.visitor);

        v_get_ast_generator_visitor: () ~> *voidc_visitor_t;

        v_copy(&di.visitor, v_get_ast_generator_visitor());

        v_initialize(&di.gen_list);

        v_make_list_nil(&di.gen_list);

        di.max_var := -1;
        di.cur_var := -1;

        v_initialize(&di.var_map);

        v_make_map(&di.var_map);
    }
}

(v_terminate(_)): (*voidc_ast_generator_t, size_t) ~> void  =  derive;

(v_copy(_)): (*voidc_ast_generator_t, *const voidc_ast_generator_t, size_t) ~> void  =  derive;


//---------------------------------------------------------------------
(_.add_stmt()): (gen: &voidc_ast_generator_t, stmt: *v_ast_stmt_t) ~> void
{
    list = &gen.gen_list;

    v_list_append(list, list, stmt);
}

//---------------------------------------------------------------------
(_.push_var()): (gen: &voidc_ast_generator_t) ~> int
{
    r = v_load(& ++gen.cur_var);

    if (gen.max_var < r)  gen.max_var := r;

    v_return(r);
}

(_.pop_var()): (gen: &voidc_ast_generator_t) ~> void
{
    v_assert(gen.cur_var);

    --gen.cur_var;
}

//---------------------------------------------------------------------
(_.cast_var()): (gen: &voidc_ast_generator_t, vn: int, qt: v_quark_t) ~> v_quark_t
{
    sstr: &v_std_string_t := {};

    v_std_string_set(&sstr, "v.var.");

    v_std_string_append_number(&sstr, vn);

    qv = v_quark_from_string(v_std_string_get(&sstr));

    if (qt == q_base)   v_return(qv);

    v_std_string_append(&sstr, ".");
    v_std_string_append(&sstr, v_quark_to_string(qt));

    qr = v_quark_from_string(v_std_string_get(&sstr));

    vmap = &gen.var_map;

    if (!v_map_find(vmap, (qr: intptr_t)))
    {
        a: &v_std_any_t := {};

        v_map_insert(vmap, vmap, (qr: intptr_t), &a);

        expr: &v_ast_expr_t[2] := {};

        v_ast_make_expr_identifier_q(expr+0, qv);
        v_ast_make_expr_identifier_q(expr+1, qt);

        stmt: &v_ast_stmt_t := {};

        v_ast_make_stmt_call(&stmt, qr, q_cast, expr, 2);
        gen.add_stmt(&stmt);
    }

    v_return(qr);
}

//---------------------------------------------------------------------
(_.get_quark()): (gen: &voidc_ast_generator_t, q: v_quark_t) ~> v_quark_t
{
    sstr: &v_std_string_t := {};

    v_std_string_set(&sstr, "v.quark.");

    sq = v_quark_to_string(q);

    if (sq) v_std_string_append(&sstr, sq);
    else    v_std_string_append(&sstr, "()");

    qr = v_quark_from_string(v_std_string_get(&sstr));

    vmap = &gen.var_map;

    if (!v_map_find(vmap, (qr: intptr_t)))
    {
        a: &v_std_any_t := {};

        v_map_insert(vmap, vmap, (qr: intptr_t), &a);

        expr: &v_ast_expr_t := {};
        stmt: &v_ast_stmt_t := {};

        if (sq)
        {
            v_ast_make_expr_string(&expr, sq);

            v_ast_make_stmt_call(&stmt, qr, q_quark_from_string, &expr, 1);
        }
        else
        {
            v_ast_make_expr_integer(&expr, 0);

            v_ast_make_stmt_q(&stmt, qr, &expr);
        }

        gen.add_stmt(&stmt);
    }

    v_return(qr);
}

//---------------------------------------------------------------------
(_.visit()): (gen: &voidc_ast_generator_t, ast: *v_ast_base_t) ~> void
{
    if (v_empty(ast))
    {
        gen.push_var();

        q = gen.cast_var(gen.cur_var, q_base);          //- Sic !!!

        expr: &v_ast_expr_t := {};

        v_ast_make_expr_identifier_q(&expr, q);

        stmt: &v_ast_stmt_t := {};

        v_ast_make_stmt_call(&stmt, 0, q_terminate, &expr, 1);
        gen.add_stmt(&stmt);

        v_ast_make_stmt_call(&stmt, 0, q_initialize, &expr, 1);
        gen.add_stmt(&stmt);
    }
    else
    {
        v_ast_accept_visitor(ast, &gen.visitor);
    }
}


//---------------------------------------------------------------------
//- Generating methods ...
//---------------------------------------------------------------------
{ v_set_export_flag(false); }


//---------------------------------------------------------------------
//- unit
//---------------------------------------------------------------------
private
gen_unit: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    unit = (self: *v_ast_unit_t);

    list   = v_ast_unit_get_stmt_list(unit);
    line   = v_ast_unit_get_line(unit);
    column = v_ast_unit_get_column(unit);

    gen = *(vis: *voidc_ast_generator_t);

    gen.visit(list);

    ql = gen.cast_var(gen.cur_var, q_stmt_list);
    qr = gen.cast_var(gen.cur_var, q_unit);

    expr: &v_ast_expr_t[4] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, ql);

    v_ast_make_expr_integer(expr+2, line);
    v_ast_make_expr_integer(expr+3, column);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_unit, expr, 4);
    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}


//---------------------------------------------------------------------
//- generic list
//---------------------------------------------------------------------
private
gen_generic_list: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    quark = v_ast_base_get_tag(self);

    stmt: &v_ast_stmt_t := {};

    nvar = gen.push_var();

    qr = gen.cast_var(nvar, q_generic_list);

    expr: &v_ast_expr_t[3] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);

    v_ast_make_expr_identifier_q(expr+1, gen.get_quark(quark));

    v_ast_make_stmt_call(&stmt, 0, q_make_list_nil, expr, 2);
    gen.add_stmt(&stmt);

    v_copy(expr+1, expr+0);

    qi = gen.cast_var(nvar+1, q_base);

    v_ast_make_expr_identifier_q(expr+2, qi);

    lst = (self: *v_ast_generic_list_t);

    for (N = v_list_get_size(lst), i: &int := 0; i < N; ++i)
    {
        item = v_list_get_item(lst, i);

        gen.visit(item);

        v_ast_make_stmt_call(&stmt, 0, q_list_append, expr, 3);
        gen.add_stmt(&stmt);

        gen.pop_var();
    }

    gen.ret_var := qr;
}


//---------------------------------------------------------------------
//- unit_stmt_init
//---------------------------------------------------------------------
private
gen_unit_stmt_init: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_unit_stmt_t);

    gen.visit(&obj.body);

    qb = gen.cast_var(gen.cur_var, q_stmt);
    qr = gen.cast_var(gen.cur_var, q_base);

    expr: &v_ast_expr_t[2] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qb);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_unit_stmt_init, expr, 2);
    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- unit_stmt_term
//---------------------------------------------------------------------
private
gen_unit_stmt_term: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_unit_stmt_t);

    gen.visit(&obj.body);

    qb = gen.cast_var(gen.cur_var, q_stmt);
    qr = gen.cast_var(gen.cur_var, q_base);

    expr: &v_ast_expr_t[2] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qb);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_unit_stmt_term, expr, 2);
    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}


//---------------------------------------------------------------------
//- stmt list
//---------------------------------------------------------------------
private
gen_stmt_list: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    stmt: &v_ast_stmt_t := {};

    nvar = gen.push_var();

    qr = gen.cast_var(nvar, q_stmt_list);

    expr: &v_ast_expr_t[3] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);

    v_ast_make_stmt_call(&stmt, 0, q_make_list_nil, expr, 1);
    gen.add_stmt(&stmt);

    v_copy(expr+1, expr+0);

    qi = gen.cast_var(nvar+1, q_stmt);

    v_ast_make_expr_identifier_q(expr+2, qi);

    lst = (self: *v_ast_expr_list_t);

    for (N = v_list_get_size(lst), i: &int := 0; i < N; ++i)
    {
        item = v_list_get_item(lst, i);

        gen.visit(item);

        v_ast_make_stmt_call(&stmt, 0, q_list_append, expr, 3);
        gen.add_stmt(&stmt);

        gen.pop_var();
    }

    gen.ret_var := qr;
}


//---------------------------------------------------------------------
//- stmt
//---------------------------------------------------------------------
private
gen_stmt: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    stm = (self: *v_ast_stmt_t);

    qname = v_ast_stmt_get_name_q(stm);
    sexpr = v_ast_stmt_get_expr(stm);

    expr: &v_ast_expr_t[3] := {};

    qr = gen.cast_var(gen.cur_var+1, q_stmt);
    qe = gen.cast_var(gen.cur_var+1, q_expr);

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, gen.get_quark(qname));
    v_ast_make_expr_identifier_q(expr+2, qe);

    gen.visit(sexpr);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_stmt_q, expr, 3);
    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- stmt if_then_else
//---------------------------------------------------------------------
private
gen_stmt_if_then_else: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_stmt_if_then_else_t);

    cond = &obj[0];
    then = &obj[1];
    else = &obj[2];

    qcond = gen.cast_var(gen.cur_var+1, q_expr);
    qthen = gen.cast_var(gen.cur_var+2, q_stmt);
    qelse = gen.cast_var(gen.cur_var+3, q_stmt);

    qr = gen.cast_var(gen.cur_var+1, q_stmt);

    expr: &v_ast_expr_t[4] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qcond);
    v_ast_make_expr_identifier_q(expr+2, qthen);
    v_ast_make_expr_identifier_q(expr+3, qelse);

    gen.visit(cond);
    gen.visit(then);

    gen.visit(else);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_stmt_if_then_else, expr, 4);
    gen.add_stmt(&stmt);

    gen.pop_var();
    gen.pop_var();

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- stmt block
//---------------------------------------------------------------------
private
gen_stmt_block: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_stmt_block_t);

    body = &obj[0];
    flag = obj[1];

    qb = gen.cast_var(gen.cur_var+1, q_stmt_list);
    qr = gen.cast_var(gen.cur_var+1, q_stmt);

    expr: &v_ast_expr_t[3] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qb);

    v_ast_make_expr_integer(expr+2, flag);

    gen.visit(body);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_stmt_block, expr, 3);
    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- stmt loop
//---------------------------------------------------------------------
private
gen_stmt_loop: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_stmt_loop_t);

    body = &obj[0];

    qr = gen.cast_var(gen.cur_var+1, q_stmt);

    expr: &v_ast_expr_t[2] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qr);

    gen.visit(body);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_stmt_loop, expr, 2);
    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- stmt defer
//---------------------------------------------------------------------
private
gen_stmt_defer: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_stmt_defer_t);

    body = &obj[0];

    qr = gen.cast_var(gen.cur_var+1, q_stmt);

    expr: &v_ast_expr_t[2] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qr);

    gen.visit(body);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_stmt_defer, expr, 2);
    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- stmt switch
//---------------------------------------------------------------------
private
gen_stmt_switch: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_stmt_switch_t);

    arg = &obj[0];
    lst = &obj[1];

    qarg = gen.cast_var(gen.cur_var+1, q_expr);
    qlst = gen.cast_var(gen.cur_var+2, q_generic_list);

    qr = gen.cast_var(gen.cur_var+1, q_stmt);

    expr: &v_ast_expr_t[3] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qarg);
    v_ast_make_expr_identifier_q(expr+2, qlst);

    gen.visit(arg);
    gen.visit(lst);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_stmt_switch, expr, 3);
    gen.add_stmt(&stmt);

    gen.pop_var();

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- case block
//---------------------------------------------------------------------
private
gen_case_block: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_case_block_t);

    arg = &obj[0];
    lst = &obj[1];

    qarg = gen.cast_var(gen.cur_var+1, q_expr_list);
    qlst = gen.cast_var(gen.cur_var+2, q_stmt_list);

    qr = gen.cast_var(gen.cur_var+1, q_base);

    expr: &v_ast_expr_t[3] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qarg);
    v_ast_make_expr_identifier_q(expr+2, qlst);

    gen.visit(arg);
    gen.visit(lst);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_case_block, expr, 3);
    gen.add_stmt(&stmt);

    gen.pop_var();

    gen.ret_var := qr;
}


//---------------------------------------------------------------------
//- expr list
//---------------------------------------------------------------------
private
gen_expr_list: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    stmt: &v_ast_stmt_t := {};

    nvar = gen.push_var();

    qr = gen.cast_var(nvar, q_expr_list);

    expr: &v_ast_expr_t[3] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);

    v_ast_make_stmt_call(&stmt, 0, q_make_list_nil, expr, 1);
    gen.add_stmt(&stmt);

    v_copy(expr+1, expr+0);

    qi = gen.cast_var(nvar+1, q_expr);

    v_ast_make_expr_identifier_q(expr+2, qi);

    lst = (self: *v_ast_stmt_list_t);

    for (N = v_list_get_size(lst), i: &int := 0; i < N; ++i)
    {
        item = v_list_get_item(lst, i);

        gen.visit(item);

        v_ast_make_stmt_call(&stmt, 0, q_list_append, expr, 3);
        gen.add_stmt(&stmt);

        gen.pop_var();
    }

    gen.ret_var := qr;
}


//---------------------------------------------------------------------
//- expr call
//---------------------------------------------------------------------
private
gen_expr_call: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    call = (self: *v_ast_expr_t);

    fun = v_ast_expr_call_get_fun_expr(call);
    lst = v_ast_expr_call_get_arg_list(call);

    qfun = gen.cast_var(gen.cur_var+1, q_expr);
    qlst = gen.cast_var(gen.cur_var+2, q_expr_list);

    qr = gen.cast_var(gen.cur_var+1, q_expr);

    expr: &v_ast_expr_t[3] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qfun);
    v_ast_make_expr_identifier_q(expr+2, qlst);

    gen.visit(fun);
    gen.visit(lst);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_expr_call, expr, 3);
    gen.add_stmt(&stmt);

    gen.pop_var();

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- expr identifier
//---------------------------------------------------------------------
private
gen_expr_identifier: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    eid = (self: *v_ast_expr_t);

    qn = v_ast_expr_identifier_get_name_q(eid);

    nvar = gen.push_var();

    qr = gen.cast_var(nvar, q_expr);

    expr: &v_ast_expr_t[2] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, gen.get_quark(qn));

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_expr_identifier_q, expr, 2);
    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- expr integer
//---------------------------------------------------------------------
private
gen_expr_integer: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    enum = (self: *v_ast_expr_t);

    nvar = gen.push_var();

    qr = gen.cast_var(nvar, q_expr);

    expr: &v_ast_expr_t[2] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);

    v_copy(expr+1, enum);           //- !?!

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_expr_integer, expr, 2);
    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- expr string
//---------------------------------------------------------------------
private
gen_expr_string: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    estr = (self: *v_ast_expr_t);

    len: &size_t := v_undef();

    v_ast_expr_string_get_string_data(estr, &len);

    nvar = gen.push_var();

    qr = gen.cast_var(nvar, q_expr);

    expr: &v_ast_expr_t[3] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);

    v_copy(expr+1, estr);           //- !?!

    v_ast_make_expr_integer(expr+2, len);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_expr_string_data, expr, 3);
    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- expr char
//---------------------------------------------------------------------
private
gen_expr_char: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    echar = (self: *v_ast_expr_t);

    nvar = gen.push_var();

    qr = gen.cast_var(nvar, q_expr);

    expr: &v_ast_expr_t[2] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);

    v_copy(expr+1, echar);          //- !?!

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_expr_char, expr, 2);
    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- expr struct
//---------------------------------------------------------------------
private
gen_expr_struct: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("gen_expr_struct: start\n");
//defer printf("gen_expr_struct: stop\n");

    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_expr_struct_t);

    name = &obj[0];
    body = &obj[1];

    packed = obj[2];
    export = obj[3];

    qname = gen.cast_var(gen.cur_var+1, q_expr);
    qbody = gen.cast_var(gen.cur_var+2, q_stmt_list);

    qr = gen.cast_var(gen.cur_var+1, q_expr);

    expr: &v_ast_expr_t[5] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qname);
    v_ast_make_expr_identifier_q(expr+2, qbody);

    gen.visit(name);
    gen.visit(body);

    v_ast_make_expr_integer(expr+3, packed);
    v_ast_make_expr_integer(expr+4, export);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_expr_struct, expr, 5);
    gen.add_stmt(&stmt);

    gen.pop_var();

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- expr union
//---------------------------------------------------------------------
private
gen_expr_union: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_expr_union_t);

    qname = gen.cast_var(gen.cur_var+1, q_expr);
    qbody = gen.cast_var(gen.cur_var+2, q_stmt_list);

    qr = gen.cast_var(gen.cur_var+1, q_expr);

    expr: &v_ast_expr_t[4] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qname);
    v_ast_make_expr_identifier_q(expr+2, qbody);

    gen.visit(&obj.name);
    gen.visit(&obj.body);

    v_ast_make_expr_integer(expr+3, obj.export);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_expr_union, expr, 4);
    gen.add_stmt(&stmt);

    gen.pop_var();

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- expr stmt
//---------------------------------------------------------------------
private
gen_expr_stmt: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_expr_stmt_t);

    qstmt = gen.cast_var(gen.cur_var+1, q_stmt);

    qr = gen.cast_var(gen.cur_var+1, q_expr);

    expr: &v_ast_expr_t[2] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qstmt);

    gen.visit(&obj.stmt);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_expr_stmt, expr, 2);
    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- expr block
//---------------------------------------------------------------------
private
gen_expr_block: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_expr_block_t);

    qslst = gen.cast_var(gen.cur_var+1, q_stmt_list);
    qexpr = gen.cast_var(gen.cur_var+2, q_expr);

    qr = gen.cast_var(gen.cur_var+1, q_expr);

    expr: &v_ast_expr_t[3] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);
    v_ast_make_expr_identifier_q(expr+1, qslst);
    v_ast_make_expr_identifier_q(expr+2, qexpr);

    gen.visit(&obj.slst);
    gen.visit(&obj.expr);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_call(&stmt, 0, q_ast_make_expr_block, expr, 3);
    gen.add_stmt(&stmt);

    gen.pop_var();

    gen.ret_var := qr;
}


//---------------------------------------------------------------------
//- operator unary
//---------------------------------------------------------------------
private
gen_operator_unary: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_operator_unary_t);

    quark =  obj[0];
    prio  =  obj[1];
    pay   = &obj[2];

    qr = gen.cast_var(gen.cur_var+1, q_expr);

    expr: &v_ast_expr_t[4] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);

    stmt: &v_ast_stmt_t := {};

    if (v_empty(pay))
    {
        gen.push_var();

        sstr: &v_std_string_t := {};

        v_std_string_set(&sstr, "v_");

        v_std_string_append(&sstr, v_quark_to_string(quark)+2);     //- Skip "v."

        v_ast_make_expr_identifier(expr+1, v_std_string_get(&sstr));

        v_ast_make_stmt_call(&stmt, 0, q_copy, expr, 2);
    }
    else
    {
        qpay = gen.cast_var(gen.cur_var+1, q_base);

        gen.visit(pay);

        v_ast_make_expr_identifier_q(expr+1, gen.get_quark(quark));

        v_ast_make_expr_integer(expr+2, prio);

        v_ast_make_expr_identifier_q(expr+3, qpay);

        v_ast_make_stmt_call(&stmt, 0, q_ast_make_operator_unary, expr, 4);
    }

    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}

//---------------------------------------------------------------------
//- operator binary
//---------------------------------------------------------------------
private
gen_operator_binary: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    gen = *(vis: *voidc_ast_generator_t);

    void_obj = v_ast_generic_get_object(self);

    obj = *(void_obj: *v_ast_operator_binary_t);

    quark =  obj[0];
    prio  =  obj[1];
    assoc =  obj[2];
    pay   = &obj[3];

    qr = gen.cast_var(gen.cur_var+1, q_expr);

    expr: &v_ast_expr_t[5] := {};

    v_ast_make_expr_identifier_q(expr+0, qr);

    stmt: &v_ast_stmt_t := {};

    if (v_empty(pay))
    {
        gen.push_var();

        sstr: &v_std_string_t := {};

        v_std_string_set(&sstr, "v_");

        v_std_string_append(&sstr, v_quark_to_string(quark)+2);     //- Skip "v."

        v_ast_make_expr_identifier(expr+1, v_std_string_get(&sstr));

        v_ast_make_stmt_call(&stmt, 0, q_copy, expr, 2);
    }
    else
    {
        qpay = gen.cast_var(gen.cur_var+1, q_base);

        gen.visit(pay);

        v_ast_make_expr_identifier_q(expr+1, gen.get_quark(quark));

        v_ast_make_expr_integer(expr+2, prio);
        v_ast_make_expr_integer(expr+3, assoc);

        v_ast_make_expr_identifier_q(expr+4, qpay);

        v_ast_make_stmt_call(&stmt, 0, q_ast_make_operator_binary, expr, 5);
    }

    gen.add_stmt(&stmt);

    gen.ret_var := qr;
}


//---------------------------------------------------------------------
private
gen_visitor: &voidc_visitor_t := {};

block
{
    vis = &gen_visitor;

    voidc_make_visitor(vis);

    q = v_quark_from_string;

    voidc_visitor_set_method(vis, vis, q("unit"),                gen_unit,              0);
    voidc_visitor_set_method(vis, vis, q("defn_list_unit"),      gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("unit_defn_list"),      gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("unit_fun_defn"),       gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("unit_var_defn"),       gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("unit_val_defn"),       gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("unit_ccif_list"),      gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("unit_struct_defn"),    gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("unit_spec_fun_defn"),  gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("unit_spec_fun_renm"),  gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("unit_union_defn"),     gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("unit_stmt_init"),      gen_unit_stmt_init,    0);
    voidc_visitor_set_method(vis, vis, q("unit_stmt_term"),      gen_unit_stmt_term,    0);
    voidc_visitor_set_method(vis, vis, q("unit_namespace_open"), gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("unit_defn_close"),     gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("unit_defn_using"),     gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("stmt_list"),           gen_stmt_list,         0);
    voidc_visitor_set_method(vis, vis, q("stmt"),                gen_stmt,              0);
    voidc_visitor_set_method(vis, vis, q("stmt_if_then_else"),   gen_stmt_if_then_else, 0);
    voidc_visitor_set_method(vis, vis, q("stmt_block"),          gen_stmt_block,        0);
    voidc_visitor_set_method(vis, vis, q("stmt_loop"),           gen_stmt_loop,         0);
    voidc_visitor_set_method(vis, vis, q("stmt_defer"),          gen_stmt_defer,        0);
    voidc_visitor_set_method(vis, vis, q("stmt_switch"),         gen_stmt_switch,       0);
    voidc_visitor_set_method(vis, vis, q("case_list"),           gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("case_block"),          gen_case_block,        0);
    voidc_visitor_set_method(vis, vis, q("stmt_ccif_list"),      gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("expr_list"),           gen_expr_list,         0);
    voidc_visitor_set_method(vis, vis, q("expr_call"),           gen_expr_call,         0);
    voidc_visitor_set_method(vis, vis, q("expr_identifier"),     gen_expr_identifier,   0);
    voidc_visitor_set_method(vis, vis, q("expr_integer"),        gen_expr_integer,      0);
    voidc_visitor_set_method(vis, vis, q("expr_string"),         gen_expr_string,       0);
    voidc_visitor_set_method(vis, vis, q("expr_char"),           gen_expr_char,         0);
    voidc_visitor_set_method(vis, vis, q("expr_struct"),         gen_expr_struct,       0);
    voidc_visitor_set_method(vis, vis, q("expr_union"),          gen_expr_union,        0);
    voidc_visitor_set_method(vis, vis, q("expr_stmt"),           gen_expr_stmt,         0);
    voidc_visitor_set_method(vis, vis, q("expr_block"),          gen_expr_block,        0);
    voidc_visitor_set_method(vis, vis, q("expr_ccif_list"),      gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("br_item_list"),        gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("cc_message"),          gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("cc_do"),               gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("cc_assert"),           gen_generic_list,      0);
    voidc_visitor_set_method(vis, vis, q("operator_unary"),      gen_operator_unary,    0);
    voidc_visitor_set_method(vis, vis, q("operator_binary"),     gen_operator_binary,   0);
    voidc_visitor_set_method(vis, vis, q("projection_payload"),  gen_generic_list,      0);
}


//---------------------------------------------------------------------
//- Grammar actions ...
//---------------------------------------------------------------------
private
mk_parse_any_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    id = v_std_any_get_pointer(v_std_string_t, any);

    v_peg_parse(ret, v_quark_from_string(v_std_string_get(id)));
}

//---------------------------------------------------------------------
private
mk_quote_ast_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    ast = v_ast_std_any_get_base(any);
    if (!ast)   v_return();

    gen: &voidc_ast_generator_t := {};

    gen.visit(ast);

    v_assert(gen.cur_var == 0 <= gen.max_var);

    slst: &v_ast_stmt_list_t[2] := {};

    v_make_list_nil(slst+0);

    expr: &v_ast_expr_t[2] := {};

    v_ast_make_expr_identifier(expr+0, "v_ast_base_t");

    n = gen.max_var + 1;

    v_ast_make_expr_integer(expr+1, n);

    stmt: &v_ast_stmt_t := {};

    qv0 = gen.cast_var(0, q_base);

    v_ast_make_stmt_call(&stmt, qv0, q_malloc, expr, 2);
    v_list_append(slst+0, slst+0, &stmt);

    v_ast_make_expr_identifier_q(expr+0, qv0);

    v_ast_make_stmt_call(&stmt, 0, q_initialize, expr, 2);
    v_list_append(slst+0, slst+0, &stmt);

    v_ast_make_stmt_call(&stmt, 0, q_terminate, expr, 2);
    v_make_list(slst+1, &stmt);

    v_ast_make_stmt_call(&stmt, 0, q_free, expr, 1);
    v_list_append(slst+1, slst+1, &stmt);

    v_ast_make_stmt_block(&stmt, slst+1, false);
    v_ast_make_stmt_defer(&stmt, &stmt);
    v_list_append(slst+0, slst+0, &stmt);

    for (i: &int := 1; i < n; ++i)
    {
        v_ast_make_expr_integer(expr+1, i);

        v_ast_make_stmt_call(&stmt, gen.cast_var(i, q_base), q_getelementptr, expr, 2);
        v_list_append(slst+0, slst+0, &stmt);
    }

    for (N = v_list_get_size(&gen.gen_list), i: &int := 0; i < N; ++i)
    {
        item = v_list_get_item(&gen.gen_list, i);

        v_list_append(slst+0, slst+0, item);
    }

    v_ast_make_expr_identifier_q(expr+0, gen.ret_var);

    elst: &v_ast_expr_list_t := {};

    v_make_list(&elst, expr+0);

    v_ast_make_expr_identifier_q(expr+0, q_reference);

    v_ast_make_expr_call(expr+0, expr+0, &elst);

    v_ast_make_expr_block(expr+0, slst+0, expr+0);

    v_std_any_set_pointer(ret, expr+0);
}


//---------------------------------------------------------------------
export
v_get_ast_generator_visitor: () ~> *voidc_visitor_t
{
    v_return(&gen_visitor);
}

//---------------------------------------------------------------------
//- Enable generating AST
//---------------------------------------------------------------------
export
voidc_enable_generating_ast: () ~> void
{
    v_return_if(v_find_constant_q(enabled_q, 0, 0));

    v_add_constant_q(enabled_q, v_void_type(), 0);

    gr0 = v_peg_get_grammar();

    v_return_if_not(gr0);
    v_return_if(v_peg_grammar_get_parser(gr0, "parse_any", 0));

    //--------------------------------------------------------------
    grammar gr0
    {
    actions:
        mk_parse_any = mk_parse_any_grammar_action;
        mk_quote_ast = mk_quote_ast_grammar_action;

    parsers:
        parse_any = '{' <'\'' i:identifier (![\n\r\t\'] .)* '\''> _ a:{ mk_parse_any(i) } _ $1 '}'  { a };

        prim =+ a:parse_any     { mk_quote_ast(a) };
    }
}


//=====================================================================
{   voidc_unit_end_module(); }


