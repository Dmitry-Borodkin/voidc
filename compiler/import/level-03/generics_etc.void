//---------------------------------------------------------------------
//- Copyright (C) 2020-2025 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("generics_etc.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("intrinsics_derive.void");
    v_import("local_objects.void");
    v_import("heap_objects.void");
    v_import("global_objects.void");
    v_import("coercions.void");
    v_import("namespaces.void");

    v_import("llvm-c/Core.void");

//  v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();

    voidc_enable_intrinsics_derive();
    voidc_enable_local_objects();
    voidc_enable_heap_objects();
    voidc_enable_global_objects();
    voidc_enable_coercions();
    voidc_enable_namespaces();
}


//=====================================================================

//---------------------------------------------------------------------
{
    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("enabled_q", q_ref, q("voidc.internal.generics_etc_enabled"));

    v_add_symbol("q_type_generic_initialize_hooks",       q_ref, q("v.type_generic_initialize_hooks"));
    v_add_symbol("q_type_generic_obtain_llvm_type_hooks", q_ref, q("v.type_generic_obtain_llvm_type_hooks"));

    v_add_symbol("q_type_generic_implementation_map", q_ref, q("v.type_generic_implementation_map"));

    //-------------------------------------------------------------
    v_add_symbol("voidc_compile_quark_q", q_ref, q("voidc.compile_quark"));
    v_add_symbol("q_export_constant_q",   q_ref, q("v_export_constant_q"));
    v_add_symbol("q_add_constant_q",      q_ref, q("v_add_constant_q"));

    v_add_symbol("q_static_type_t", q_ref, q("v_static_type_t"));

    v_add_symbol("q_static_namespace_t", q_ref, q("v_static_namespace_t"));

    v_add_symbol("q_object_intrinsic_t", q_ref, q("v_object_intrinsic_t"));

    v_add_symbol("voidc_abstract_static_constant_q", q_ref, q("voidc.abstract_static_constant"));

    v_add_symbol("voidc_abstract_object_intrinsic_intrinsic_q", q_ref, q("voidc.abstract_object_intrinsic_intrinsic"));
}


//=====================================================================
{   voidc_unit_begin_module("generics_etc_module"); }


//---------------------------------------------------------------------
private
get_hook: (qhooks: v_quark_t, qcons: v_quark_t, paux: **void) ~> *void
{
    any = v_get_property_q(qhooks);
    if (!any)   v_return(0);

    map = v_std_any_get_pointer(v_util_map_t, any);
    v_assert(map);

    any = v_map_find(map, qcons);
    if (!any)   v_return(0);

    p = *v_std_any_get_pointer(intptr_t[2], any);
    v_assert(p);

    fun = (p[0] : *void);
    aux = (p[1] : *void);

    if (paux) *paux := aux;

    v_return(fun);
}

//---------------------------------------------------------------------
private
set_hook: (qhooks: v_quark_t, qcons: v_quark_t, fun: *void, aux: *void) ~> void
{
    a: &*v_std_any_t := v_get_property_q(qhooks);
    if (!a)
    {
        map: &v_util_map_t := {};

        v_make_map(&map);

        any: &v_std_any_t := {};

        v_std_any_set_pointer(&any, &map);

        v_add_property_q(qhooks, &any);

        a := v_get_property_q(qhooks);
    }

    map = v_std_any_get_pointer(v_util_map_t, a);

    data: &intptr_t[2] :=
    {
        (fun: intptr_t),
        (aux: intptr_t),
    };

    any: &v_std_any_t := {};

    v_std_any_set_pointer(&any, &data);

    v_map_insert(map, map, qcons, &any);
}

//---------------------------------------------------------------------
private
hook_initialize_ft = (*void, *v_type_t) ~> void;

//---------------------------------------------------------------------
export
v_type_generic_get_initialize_hook: (qcons: v_quark_t, paux: **void) ~> *hook_initialize_ft
{
    v_return((get_hook(q_type_generic_initialize_hooks, qcons, paux) : *hook_initialize_ft));
}

//---------------------------------------------------------------------
export
v_type_generic_set_initialize_hook: (qcons: v_quark_t, fun: *hook_initialize_ft, aux: *void) ~> void
{
    set_hook(q_type_generic_initialize_hooks, qcons, fun, aux);
}

//---------------------------------------------------------------------
private
my_type_generic_initialize_ctx_t = struct
{
    fun: *hook_initialize_ft;
    aux: *void;
};

private
my_type_generic_initialize: (aux: *void, type: *v_type_t) ~> void
{
    v_assert(v_type_is_generic(type));

    block
    {
        aux: &*void := v_undef();

        fun = v_type_generic_get_initialize_hook(v_type_generic_get_cons(type), &aux);
        if (!fun)   v_break();

        fun(aux, type);

        v_return();
    }

    ctx = *(aux: *my_type_generic_initialize_ctx_t);

    ctx.fun(ctx.aux, type);
}


//---------------------------------------------------------------------
export
v_type_generic_set_implementation_type: (type: *v_type_t, impl: *v_type_t) ~> void
{
    v_assert(v_type_is_generic(type));

    a: &*v_std_any_t := v_get_property_q(q_type_generic_implementation_map);
    if (!a)
    {
        map: &v_util_map_t := {};

        v_make_map(&map);

        any: &v_std_any_t := {};

        v_std_any_set_pointer(&any, &map);

        v_add_property_q(q_type_generic_implementation_map, &any);

        a := v_get_property_q(q_type_generic_implementation_map);
    }

    map = v_std_any_get_pointer(v_util_map_t, a);

    any: &v_std_any_t := {};

    v_std_any_set_value(&any, (impl: intptr_t));

    v_map_insert(map, map, (type: intptr_t), &any);
}

//---------------------------------------------------------------------
export
v_type_generic_get_implementation_type: (type: *v_type_t) ~> *v_type_t
{
    v_assert(v_type_is_generic(type));

    a: &*v_std_any_t := v_get_property_q(q_type_generic_implementation_map);
    if (!a) v_return(0);

    map = v_std_any_get_pointer(v_util_map_t, a);

    any = v_map_find(map, (type: intptr_t));
    if (!any) v_return(0);

    v = v_std_any_get_value(intptr_t, any);

    v_return((v: *v_type_t));
}


//---------------------------------------------------------------------
private
set_implementation_type_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);
    arg1 = v_list_get_item(args, 1);

    static_type_t = v_find_type_q(q_static_type_t);

    v_set_result_type(static_type_t);
    v_set_result_value(0);

    v_ast_accept_visitor(arg0, vis);

    type = (v_get_result_value() : *v_type_t);

    v_set_result_type(static_type_t);
    v_set_result_value(0);

    v_ast_accept_visitor(arg1, vis);

    impl = (v_get_result_value() : *v_type_t);

    v_type_generic_set_implementation_type(type, impl);
}

//---------------------------------------------------------------------
private
get_implementation_type_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    static_type_t = v_find_type_q(q_static_type_t);

    v_set_result_type(static_type_t);
    v_set_result_value(0);

    v_ast_accept_visitor(arg0, vis);

    type = (v_get_result_value() : *v_type_t);

    impl = v_type_generic_get_implementation_type(type);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(static_type_t, (impl: LLVMValueRef));
}


//---------------------------------------------------------------------
private
hook_obtain_llvm_type_ft = (*void, *v_type_t) ~> LLVMTypeRef;

//---------------------------------------------------------------------
export
v_type_generic_get_obtain_llvm_type_hook: (qcons: v_quark_t, paux: **void) ~> *hook_obtain_llvm_type_ft
{
    v_return((get_hook(q_type_generic_obtain_llvm_type_hooks, qcons, paux) : *hook_obtain_llvm_type_ft));
}

//---------------------------------------------------------------------
export
v_type_generic_set_obtain_llvm_type_hook: (qcons: v_quark_t, fun: *hook_obtain_llvm_type_ft, aux: *void) ~> void
{
    set_hook(q_type_generic_obtain_llvm_type_hooks, qcons, fun, aux);
}

//---------------------------------------------------------------------
private
my_type_generic_obtain_llvm_type_ctx_t = struct
{
    fun: *hook_obtain_llvm_type_ft;
    aux: *void;
};

private
my_type_generic_obtain_llvm_type: (aux: *void, type: *v_type_t) ~> LLVMTypeRef
{
    v_assert(v_type_is_generic(type));

    block
    {
        impl = v_type_generic_get_implementation_type(type);
        if (!impl)  v_break();

        rt = v_type_get_llvm_type(impl);            //- Sic !!!
        v_assert(rt);

        v_type_set_cached_llvm_type(type, rt);

        v_return(rt);
    }

    block
    {
        aux: &*void := v_undef();

        fun = v_type_generic_get_obtain_llvm_type_hook(v_type_generic_get_cons(type), &aux);
        if (!fun)   v_break();

        v_return(fun(aux, type));
    }

    ctx = *(aux: *my_type_generic_obtain_llvm_type_ctx_t);

    v_return(ctx.fun(ctx.aux, type));
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
private
compute_generic_arg: (vis: *voidc_visitor_t, self: *v_ast_base_t) ~> *v_type_generic_arg_t;

//---------------------------------------------------------------------
private
compute_generic_arg_cons: (vis: *voidc_visitor_t, args: *v_ast_expr_list_t,
                           res: **v_type_generic_arg_t
                          ) ~> v_quark_t
{
    s = v_list_get_item(args, 0);

    q: &v_quark_t := v_undef();

    if (v_ast_base_get_tag(s) == v_ast_expr_identifier_tag)
    {
        q := v_ast_expr_identifier_get_name_q(s);
    }
    else
    {
        v_assert(v_ast_base_get_tag(s) == v_ast_expr_string_tag);

        q := v_quark_from_string(v_ast_expr_string_get_string(s));
    }

    if (n = v_list_get_size(args) - 1)
    {
        for (i: &int := 0; i < n; ++i)
        {
            res[i] := compute_generic_arg(vis, v_list_get_item(args, i+1));
        }
    }

    v_return(q);
}

//---------------------------------------------------------------------
private
compute_generic_arg: (vis: *voidc_visitor_t, self: *v_ast_base_t) ~> *v_type_generic_arg_t
{
    call = (self: *v_ast_expr_t);

    fexpr = v_ast_expr_call_get_fun_expr(call);

    v_assert(v_ast_base_get_tag(fexpr) == v_ast_expr_identifier_tag);

    args = v_ast_expr_call_get_arg_list(call);

    switch((v_ast_expr_identifier_get_name(fexpr)[0] | 0x20 : char32_t))
    {
    case 'n':       //- Number

        v_set_result_type(v_uint_type(64));
        v_set_result_value(0);

        v_ast_accept_visitor(v_list_get_item(args, 0), vis);

        n = v_get_result_value();

        n = LLVMConstIntGetZExtValue(n);

        v_return(v_type_generic_number_arg(n));

    case 's':       //- String

        v_set_result_type(INVIOLABLE_TAG);          //- ?
        v_set_result_value(0);

        v_ast_accept_visitor(v_list_get_item(args, 0), vis);

        l: &size_t := v_undef();

        s = LLVMGetAsString(v_get_result_value(), &l);

        {   sstr: &v_std_string_t := {};

            v_std_string_set_data(&sstr, s, l-1);       //- ?

            v_return(v_type_generic_string_arg(&sstr));
        }

    case 'q':       //- Quark

        s = v_list_get_item(args, 0);

        if (v_ast_base_get_tag(s) == v_ast_expr_identifier_tag)
        {
            q = v_ast_expr_identifier_get_name_q(s);

            v_return(v_type_generic_quark_arg(q));
        }

        v_assert(v_ast_base_get_tag(s) == v_ast_expr_string_tag);

        q = v_quark_from_string(v_ast_expr_string_get_string(s));

        v_return(v_type_generic_quark_arg(q));

    case 't':       //- Type

        v_set_result_type(v_find_type_q(q_static_type_t));
        v_set_result_value(0);

        v_ast_accept_visitor(v_list_get_item(args, 0), vis);

        t = (v_get_result_value() : *v_type_t);

        v_return(v_type_generic_type_arg(t));

    case 'c':       //- Cons

        {   aa: &**v_type_generic_arg_t := 0;
            defer delete[] aa;

            n = v_list_get_size(args) - 1;

            if (n)  aa := new (*v_type_generic_arg_t)[n];

            q = compute_generic_arg_cons(vis, args, aa);

            v_return(v_type_generic_cons_arg(q, aa, (n: unsigned)));
        }
    }

    v_assert(false);
}

//---------------------------------------------------------------------
private
v_generic_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    call = (self: *v_ast_expr_t);

    args = v_ast_expr_call_get_arg_list(call);

    aa: &**v_type_generic_arg_t := 0;
    defer if (aa) delete[] aa;

    n = v_list_get_size(args) - 1;

    if (n)  aa := new (*v_type_generic_arg_t)[n];

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    q = compute_generic_arg_cons(vis, args, aa);

    t = v_generic_type(q, aa, (n: unsigned));

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(v_find_type_q(q_static_type_t), (t: LLVMValueRef));
}

//---------------------------------------------------------------------
private
v_generic_ns_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("v_generic_ns_intrinsic: start\n");
//defer printf("v_generic_ns_intrinsic: stop\n");

    call = (self: *v_ast_expr_t);

    args = v_ast_expr_call_get_arg_list(call);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    static_namespace_t = v_find_type_q(q_static_namespace_t);

    v_set_result_type(static_namespace_t);
    v_set_result_value(0);

    v_ast_accept_visitor(v_list_get_item(args, 0), vis);        //- Namespace

    ns = (v_get_result_value() : *v_namespace_t);

    ga = compute_generic_arg(vis, v_list_get_item(args, 1));

    sstr: &v_std_string_t := {};

    v_std_string_set(&sstr, "v.generic_ns-");

    voidc_internal_std_string_append_type_generic_arg(&sstr, ga);

    ns_name = v_quark_from_string(v_std_string_get(&sstr));

    t: &*v_type_t    := 0;
    v: &LLVMValueRef := v_undef();

    root_ns = ((-1: intptr_t) : *v_namespace_t);        //- Sic!

    if (ns  &&  ns != root_ns)      //- Just some "normal" namespace...
    {
        if (a = v_map_find(&ns->map, (ns_name: intptr_t)))
        {
            q = v_std_any_get_value(v_quark_t, a);

            v_find_constant_q(q, &t, &v);
        }
    }

    if (!t)
    {
        ns = v_obtain_namespace_q(ns_name);                 //- WTF ?!?!?!?!?

        t := static_namespace_t;
        v := (ns: LLVMValueRef);
    }

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
private
v_root_ns_intrinsic: (*void, vis: *voidc_visitor_t, *v_ast_base_t) ~> void
{
    v_adopt_result(v_find_type_q(q_static_namespace_t), ((-1: intptr_t) : LLVMValueRef));
}


//---------------------------------------------------------------------
//- Abstract object intrinsic...
//---------------------------------------------------------------------
private
my_abstract_object_intrinsic_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                         t: *v_type_t, v: LLVMValueRef,
                                         name: *const char, export: bool
                                        ) ~> void
{
//printf("my_abstract_object_intrinsic_intrinsic start %s\n", name);
//defer printf("my_abstract_object_intrinsic_intrinsic stop\n");

    v_assert(t == v_find_type_q(q_object_intrinsic_t));

    qname = v_quark_from_string(name);

    if (export) v_export_constant_q(qname, t, v);
    else        v_add_constant_q(qname, t, v);

    //-------------------------------------------------------------
    stmt_list = voidc_definitions_context_get_stmt_list();
    if (!stmt_list)  v_return();

    expr: &v_ast_expr_t[3] := {};

    elst: &v_ast_expr_list_t := {};

    stmt: &v_ast_stmt_t := {};

    v_ast_make_expr_integer(expr+0, qname);

    v_make_list(&elst, expr+0);

    v_ast_make_expr_identifier_q(expr+0, voidc_compile_quark_q);

    v_ast_make_expr_call(expr+0, expr+0, &elst);


    v_ast_make_expr_integer(expr+1, (v: v_quark_t));

    v_make_list(&elst, expr+1);

    v_ast_make_expr_identifier_q(expr+1, voidc_compile_quark_q);

    v_ast_make_expr_call(expr+1, expr+1, &elst);

    v_ast_make_expr_identifier(expr+2, "LLVMValueRef");

    v_make_list(&elst, expr+1, 2);

    v_ast_make_expr_identifier(expr+2, "v_cast");

    v_ast_make_expr_call(expr+2, expr+2, &elst);


    v_ast_make_expr_identifier_q(expr+1, q_object_intrinsic_t);


    if (export) v_ast_make_stmt_call(&stmt, 0, q_export_constant_q, expr, 3);
    else        v_ast_make_stmt_call(&stmt, 0, q_add_constant_q,    expr, 3);

    v_list_append(stmt_list, stmt_list, &stmt);
}

//---------------------------------------------------------------------
private
my_object_intrinsic_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    tag = v_ast_base_get_tag(arg0);

    quark: &v_quark_t := v_undef();

    if (tag == v_ast_expr_string_tag)
    {
        str = v_ast_expr_string_get_string(arg0);

        quark := v_quark_from_string(str);
    }
    else
    {
        v_assert(tag == v_ast_expr_identifier_tag);

        quark := v_ast_expr_identifier_get_name_q(arg0);
    }

    v_set_result_type(v_find_type_q(q_object_intrinsic_t));
    v_set_result_value((quark: LLVMValueRef));
}

//---------------------------------------------------------------------
private
my_postfix_call_object_intrinsic_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                             args: **v_ast_expr_t, count: unsigned
                                            ) ~> void
{
    t0 = v_ast_expr_compiled_get_type(args[0]);
    v0 = v_ast_expr_compiled_get_value(args[0]);

    v_assert(t0 == v_find_type_q(q_object_intrinsic_t));

    quark = (v0: v_quark_t);

    void_aux: &*void := v_undef();

    void_fun = v_get_intrinsic_q(quark, &void_aux);

    fun = (void_fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void));

    fun(void_aux, vis, self);
}


//---------------------------------------------------------------------
//- Enable generics etc
//---------------------------------------------------------------------
private
generics_etc_ctx_t = struct
{
    ini: my_type_generic_initialize_ctx_t;
    obt: my_type_generic_obtain_llvm_type_ctx_t;
};

//---------------------------------------------------------------------
export
voidc_enable_generics_etc: () ~> void
{
    v_return_if(v_find_constant_q(enabled_q, 0, 0));

    v_add_constant_q(enabled_q, v_void_type(), 0);

    //---------------------------------------------------------------------
    v_add_intrinsic("v_get_implementation_type", get_implementation_type_intrinsic, 0);
    v_add_intrinsic("v_set_implementation_type", set_implementation_type_intrinsic, 0);

    v_add_intrinsic("v_generic",    v_generic_intrinsic,    0);
    v_add_intrinsic("v_generic_ns", v_generic_ns_intrinsic, 0);
    v_add_intrinsic("v_root_ns",    v_root_ns_intrinsic,    0);

    //---------------------------------------------------------------------
    object_intrinsic_t = v_generic_type(q_object_intrinsic_t, 0, 0);

    v_export_type_q(q_object_intrinsic_t, object_intrinsic_t);

    //--------------------------------------------------------------
    ctx = *v_malloc(generics_etc_ctx_t);

    free: (*void) ~> void;

    v_add_cleaner(free, &ctx);

    ctx.ini.fun := v_type_get_initialize_hook(v_type_kind_generic, &ctx.ini.aux);
    ctx.obt.fun := v_type_get_obtain_llvm_type_hook(v_type_kind_generic, &ctx.obt.aux);

    v_type_set_initialize_hook(v_type_kind_generic, my_type_generic_initialize, &ctx.ini);
    v_type_set_obtain_llvm_type_hook(v_type_kind_generic, my_type_generic_obtain_llvm_type, &ctx.obt);

    //--------------------------------------------------------------
    v_add_intrinsic_q(voidc_abstract_object_intrinsic_intrinsic_q, my_abstract_object_intrinsic_intrinsic, 0);

    v_add_overload_q(voidc_abstract_static_constant_q, object_intrinsic_t,
                     voidc_abstract_object_intrinsic_intrinsic_q);

    v_add_intrinsic("v_object_intrinsic", my_object_intrinsic_intrinsic, 0);

    v_add_intrinsic("v.postfix_call_object_intrinsic_intrinsic", my_postfix_call_object_intrinsic_intrinsic, 0);

    v_add_overload("v.op_postfix_call", object_intrinsic_t, "v.postfix_call_object_intrinsic_intrinsic");
}


//=====================================================================
{   voidc_unit_end_module(); }


