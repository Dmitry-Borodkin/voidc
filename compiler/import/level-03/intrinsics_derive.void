//---------------------------------------------------------------------
//- Copyright (C) 2020-2025 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("intrinsics_derive.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("level-01/arithmetic.void");

    v_import("llvm-c/Core.void");

//  v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
}


//=====================================================================
{   voidc_unit_begin_module("intrinsics_derive_module"); }

//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("int_q", q_ref, q("int"));

    v_add_symbol("derive_q", q_ref, q("derive"));
}


//---------------------------------------------------------------------
private
voidc_intrinsic_quarks_item_t = struct
{
    name:  *const char;
    quark: *v_quark_t;
};

voidc_intrinsic_quarks: &voidc_intrinsic_quarks_item_t[] :=
{
    { "v_initialize" },                 //- Derivable
    { "v_terminate" },                  //- Derivable

    { "v_copy" },                       //- Derivable
    { "v_move" },                       //- ? ...

    { "v_empty" },                      //- ? ...
    { "v_kind" },                       //- ? ...

    { "v_make_list_nil" },              //- ?..
    { "v_make_list" },                  //- ?..
                                        //- ?..
    { "v_list_append" },                //- ?..
    { "v_list_get_size" },              //- ?..
    { "v_list_get_item" },              //- ?..

    { "v_list_concat" },                //- ?..
    { "v_list_insert" },                //- ?..
    { "v_list_erase" },                 //- ?..

    { "v_make_map" },                   //- ?..
    { "v_map_get_size" },               //- ?..
    { "v_map_find" },                   //- ?..
    { "v_map_insert" },                 //- ?..
    { "v_map_erase" },                  //- ?..

    { "v_ast_make_generic" },           //- ?..
    { "v_ast_generic_get_vtable" },     //- ?..
    { "v_ast_generic_get_object" },     //- ?..
};

private
quarks_compare: (void_lhs: *const void, void_rhs: *const void) ~> int
{
    lhs = *(void_lhs: *voidc_intrinsic_quarks_item_t);
    rhs = *(void_rhs: *voidc_intrinsic_quarks_item_t);

    v_return((*lhs.quark: int) - (*rhs.quark: int));
}

//---------------------------------------------------------------------
qsort: (ptr: *void, count: size_t, size: size_t, comp: *((*const void, *const void) ~> int)) ~> void;

bsearch: (key: *const void, ptr: *const void, count: size_t, size: size_t, comp: *((*const void, *const void) ~> int)) ~> *void;

//---------------------------------------------------------------------
voidc_intrinsic_quarks_ctor: () ~> void
{
    t = v_find_symbol_type("voidc_intrinsic_quarks");

    t = v_type_refptr_get_element_type(t);

    l = v_type_array_get_length(t);

    for (i: &int := 0; i < l; ++i)
    {
        voidc_intrinsic_quarks[i].quark := v_quark_ptr_from_string(voidc_intrinsic_quarks[i].name);
    }

    qsort(voidc_intrinsic_quarks, l, voidc_intrinsic_quarks_item_t.sizeof, quarks_compare);
}

//---------------------------------------------------------------------
{
    t = v_find_symbol_type("voidc_intrinsic_quarks");

    t = v_type_refptr_get_element_type(t);

    l = v_type_array_get_length(t);

    v_add_constant("quarks_count", int, LLVMConstInt(v_type_get_llvm_type(int), l, 0));

    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("voidc_internal_function_type_q", q_ref, q("voidc.internal_function_type"));

    v_add_symbol("q_internal_spec_fun_derive", q_ref, q("v.internal.spec_fun_derive"));

    v_add_symbol("q_initialize", q_ref, q("v_initialize"));
    v_add_symbol("q_terminate",  q_ref, q("v_terminate"));
    v_add_symbol("q_copy",       q_ref, q("v_copy"));
    v_add_symbol("q_move",       q_ref, q("v_move"));

    v_add_symbol("q_alloca",        q_ref, q("v_alloca"));
    v_add_symbol("q_getelementptr", q_ref, q("v_getelementptr"));
    v_add_symbol("q_load",          q_ref, q("v_load"));
    v_add_symbol("q_store",         q_ref, q("v_store"));
    v_add_symbol("q_break",         q_ref, q("v_break"));
    v_add_symbol("q_icmp",          q_ref, q("v_icmp"));
    v_add_symbol("q_binop",         q_ref, q("v_binop"));

    v_add_symbol("q_idx",   q_ref, q("v.idx"));
    v_add_symbol("q_idx_v", q_ref, q("v.idx.v"));
}

//---------------------------------------------------------------------
private
compute_key_quark_type_t = struct
{
    fun: *((*void, *v_type_t, &v_quark_t) ~> *v_type_t);
    aux: *void;
};

//---------------------------------------------------------------------
private
compute_key_quark_type: (aux: *void,
                         ft: *v_type_t, q: &v_quark_t
                        ) ~> *v_type_t
{
    key: &voidc_intrinsic_quarks_item_t := { 0, &q };

    if (bsearch(&key, voidc_intrinsic_quarks, quarks_count, voidc_intrinsic_quarks_item_t.sizeof, quarks_compare))
    {
        type = v_type_function_get_param_types(ft)[0];

        v_return(v_type_refptr_get_element_type(type));
    }

    ctx = *(aux: *compute_key_quark_type_t);

    v_return(ctx.fun(ctx.aux, ft, q));
}

//---------------------------------------------------------------------
private
mk_spec_ident_identifier_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    id = v_std_any_get_pointer(v_std_string_t, any);

    expr = v_alloca(v_ast_expr_t);
    v_initialize(expr);
    defer v_terminate(expr);

    v_ast_make_expr_identifier(expr, v_std_string_get(id));

    v_std_any_set_pointer(ret, expr);
}

//---------------------------------------------------------------------
private
spec_fun_derive_ctx_t = struct
{
    fun: *v_peg_grammar_action_fun_t;
    aux: *void;
};

//---------------------------------------------------------------------
private
mk_unit_spec_fun_derive_grammar_action: (ret: *v_std_any_t, aux: *void, any: *v_std_any_t, sz: size_t) ~> void
{
    block
    {
        expr = v_std_any_get_pointer(v_ast_expr_t, any+1);

        quark = v_ast_base_get_tag((expr: *v_ast_base_t));

        if (quark == v_ast_expr_identifier_tag  &&
            v_ast_expr_identifier_get_name_q(expr) == derive_q)
        {
            v_break();
        }

        ctx = (aux: *spec_fun_derive_ctx_t);

        ctx->fun(ret, ctx->aux, any, sz);

        v_return();
    }

    head = v_std_any_get_pointer(v_ast_generic_list_t, any+0);

    expr_quark = (v_list_get_item(head, 1) : *v_ast_expr_t);

    lst = v_alloca(v_ast_expr_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_make_list(lst, expr_quark, 1);

    etmp = v_alloca(v_ast_expr_t);
    v_initialize(etmp);
    defer v_terminate(etmp);

    v_ast_make_expr_identifier_q(etmp, q_internal_spec_fun_derive);

    v_ast_make_expr_call(etmp, etmp, lst);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);
    defer v_terminate(stmt);

    v_ast_make_stmt_q(stmt, 0, etmp);

    body = v_alloca(v_ast_stmt_list_t);
    v_initialize(body);
    defer v_terminate(body);

    v_make_list(body, stmt, 1);

    lst = v_alloca(v_ast_generic_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_list_append(lst, head, (body: *v_ast_base_t), 1);

    v_std_any_set_pointer(ret, (lst: *v_ast_base_t));
}

//---------------------------------------------------------------------
private
spec_fun_derive_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    call = (self: *v_ast_expr_t);

    arg_list = v_ast_expr_call_get_arg_list(call);

    arg0 = v_list_get_item(arg_list, 0);

    //-------------------------------------------------------------
    quark = v_ast_expr_identifier_get_name_q(arg0);

    is_copy = quark == q_copy;

    v_assert(is_copy  ||  quark == q_initialize  ||  quark == q_terminate);

    //-------------------------------------------------------------
    builder = v_target_get_builder();

    cur_b = LLVMGetInsertBlock(builder);

    fun = LLVMGetBasicBlockParent(cur_b);

    fun_type = v_get_variable_type_q(voidc_internal_function_type_q);

    params = v_type_function_get_param_types(fun_type);

    //-------------------------------------------------------------
    {   v_add_parameter_name(fun, 0, "v.dst", params[0]);

        i: &int := 1;

        if (is_copy)
        {
            v_add_parameter_name(fun, 1, "v.src", params[1]);

            i := 2;
        }

        v_add_parameter_name(fun, i, "v.count", params[i]);
    }

    //-------------------------------------------------------------
    type = v_type_refptr_get_element_type(params[0]);

    //-------------------------------------------------------------
    expr = v_alloca(v_ast_expr_t, 4);
    v_initialize(expr, 4);
    defer v_terminate(expr, 4);

    stmt = v_alloca(v_ast_stmt_t, 2);
    v_initialize(stmt, 2);
    defer v_terminate(stmt, 2);

    expr_list = v_alloca(v_ast_expr_list_t, 4);
    v_initialize(expr_list, 4);
    defer v_terminate(expr_list, 4);

    stmt_list = v_alloca(v_ast_stmt_list_t, 2);
    v_initialize(stmt_list, 2);
    defer v_terminate(stmt_list, 2);

    v_make_list_nil(stmt_list+0);
    v_make_list_nil(stmt_list+1);

    v_ast_make_expr_identifier(expr+0, "size_t");

    v_ast_make_stmt_call(stmt+0, q_idx, q_alloca, expr+0, 1);
    v_list_append(stmt_list+0, stmt_list+0, stmt+0);

    v_ast_make_expr_integer(expr+0, 0);
    v_ast_make_expr_identifier_q(expr+1, q_idx);

    v_ast_make_stmt_call(stmt+0, 0, q_store, expr, 2);
    v_list_append(stmt_list+0, stmt_list+0, stmt+0);

    //-------------------------------------------------------------
    v_ast_make_expr_identifier_q(expr+0, q_idx);

    v_ast_make_stmt_call(stmt+0, q_idx_v, q_load, expr+0, 1);
    v_list_append(stmt_list+1, stmt_list+1, stmt+0);

    //-------------------------------------------------------------
    v_ast_make_expr_identifier(expr+0, "LLVMIntSGE");

    v_ast_make_expr_identifier_q(expr+1, q_idx_v);

    v_ast_make_expr_identifier(expr+2, "v.count");

    v_make_list(expr_list+0, expr, 3);

    v_ast_make_expr_identifier_q(expr+0, q_icmp);

    v_ast_make_expr_call(expr+0, expr+0, expr_list+0);

    v_ast_make_stmt_call(stmt+0, 0, q_break, 0, 0);

    v_assert(v_empty(stmt+1));

    v_ast_make_stmt_if_then_else(stmt+0, expr+0, stmt+0, stmt+1);
    v_list_append(stmt_list+1, stmt_list+1, stmt+0);

    //-------------------------------------------------------------
    v_assert(v_type_is_struct(type));

    count = v_type_struct_get_element_count(type);
    types = v_type_struct_get_element_types(type);

    for (n: &unsigned := 0; n < count; ++n)
    {
        v_ast_make_expr_identifier(expr+0, "v.dst");

        v_ast_make_expr_identifier_q(expr+1, q_idx_v);

        v_ast_make_expr_integer(expr+2, n);

        v_make_list(expr_list+0, expr+0, 3);

        v_copy(expr_list+2, expr_list+0);

        if (is_copy)
        {
            v_ast_make_expr_identifier(expr+0, "v.src");

            v_make_list(expr_list+1, expr+0, 3);

            v_copy(expr_list+3, expr_list+1);
        }

        v_ast_make_expr_integer(expr+0, 0);

        et: &*v_type_t := types[n];

        length: &uint64_t := 1;

        loop
        {
            if (!v_type_is_array(et))   v_break();

            length *= v_type_array_get_length(et);

            v_list_append(expr_list+0, expr_list+0, expr+0, 1);

            if (is_copy) v_list_append(expr_list+1, expr_list+1, expr+0, 1);

            et := v_type_array_get_element_type(et);
        }

        if (length == 0)  v_continue();     //- WTF?

        v_ast_make_expr_identifier_q(expr+2, q_getelementptr);

        if (v_util_lookup_overload(quark, et, 0))
        {
            v_ast_make_expr_call(expr+0, expr+2, expr_list+0);

            if (is_copy)
            {
                v_ast_make_expr_call(expr+1, expr+2, expr_list+1);

                v_ast_make_expr_integer(expr+2, (length: intptr_t));

                v_ast_make_stmt_call(stmt+0, 0, quark, expr, 3);
            }
            else
            {
                v_ast_make_expr_integer(expr+1, (length: intptr_t));

                v_ast_make_stmt_call(stmt+0, 0, quark, expr, 2);
            }
        }
        else
        {
            if (!is_copy)  v_continue();

            v_ast_make_expr_call(expr+1, expr+2, expr_list+2);
            v_ast_make_expr_call(expr+0, expr+2, expr_list+3);

            v_make_list(expr_list+0, expr+0, 1);

            v_ast_make_expr_identifier_q(expr+0, q_load);

            v_ast_make_expr_call(expr+0, expr+0, expr_list+0);

            v_ast_make_stmt_call(stmt+0, 0, q_store, expr+0, 2);
        }

        v_list_append(stmt_list+1, stmt_list+1, stmt+0);
    }

    //-------------------------------------------------------------
    v_ast_make_expr_identifier(expr+0, "LLVMAdd");

    v_ast_make_expr_identifier_q(expr+1, q_idx_v);

    v_ast_make_expr_integer(expr+2, 1);

    v_ast_make_expr_identifier(expr+3, "size_t");

    v_make_list(expr_list+1, expr+2, 2);

    v_ast_make_expr_identifier(expr+2, "v_cast");

    v_ast_make_expr_call(expr+2, expr+2, expr_list+1);

    v_make_list(expr_list+0, expr, 3);

    v_ast_make_expr_identifier(expr+0, "v_binop");

    v_ast_make_expr_call(expr+0, expr+0, expr_list+0);

    v_ast_make_expr_identifier_q(expr+1, q_idx);

    v_ast_make_stmt_call(stmt+0, 0, q_store, expr+0, 2);

    v_list_append(stmt_list+1, stmt_list+1, stmt+0);

    //-------------------------------------------------------------
    v_ast_make_stmt_block(stmt+0, stmt_list+1, false);

    v_ast_make_stmt_loop(stmt+0, stmt+0);

    v_list_append(stmt_list+0, stmt_list+0, stmt+0);

    //-------------------------------------------------------------
    v_ast_accept_visitor((stmt_list+0 : *v_ast_base_t), vis);
}


//---------------------------------------------------------------------
//- Enable intrinsics derive
//---------------------------------------------------------------------
export
voidc_enable_intrinsics_derive_compiler: () ~> void
{
    vis = v_get_compiler();

    v_return_if(v_get_intrinsic_q(q_internal_spec_fun_derive, 0));

    {   gctx = v_target_get_global_ctx();
        vctx = v_target_get_voidc_global_ctx();

        if (gctx != vctx) v_target_set_global_ctx(vctx);

        if (!v_get_intrinsic("v_binop", 0))
        {
            v_import("level-01/arithmetic.void");
        }

        if (gctx != vctx)
        {
            binop_aux: &*void := v_undef();
            binop_fun = v_get_intrinsic("v_binop", &binop_aux);

            icmp_aux: &*void := v_undef();
            icmp_fun = v_get_intrinsic("v_icmp", &icmp_aux);

            v_target_set_global_ctx(gctx);

            v_add_intrinsic("v_binop", binop_fun, binop_aux);
            v_add_intrinsic("v_icmp",  icmp_fun,  icmp_aux);
        }

        if (!v_find_constant("LLVMIntSGE", 0, 0))
        {
            _int = v_find_type_q(int_q);            //- ?

            int_ = v_type_get_llvm_type(_int);

            v_add_constant("LLVMAdd",    _int, LLVMConstInt(int_, LLVMAdd,    0));
            v_add_constant("LLVMIntSGE", _int, LLVMConstInt(int_, LLVMIntSGE, 0));
        }
    }

    //-----------------------------------------------------------------
    ctx = *v_malloc(compute_key_quark_type_t);

    ctx.fun := v_get_handler(v_compute_key_quark_type, &ctx.aux);

    v_set_handler(v_compute_key_quark_type, compute_key_quark_type, &ctx);

    free: (*void) ~> void;

    v_add_local_cleaner(free, &ctx);

    //-----------------------------------------------------------------
    v_add_intrinsic_q(q_internal_spec_fun_derive, spec_fun_derive_intrinsic, 0);
}

//---------------------------------------------------------------------
//- Enable intrinsics derive
//---------------------------------------------------------------------
export
voidc_enable_intrinsics_derive: () ~> void
{
    voidc_enable_intrinsics_derive_compiler();

    gr0 = v_peg_get_grammar();

    v_return_if_not(gr0);
    v_return_if(v_peg_grammar_get_action(gr0, "mk_unit_spec_fun_derive", 0));

    //-----------------------------------------------------------------
    ctx = v_malloc(spec_fun_derive_ctx_t);

    ctx->fun := v_peg_grammar_get_action(gr0, "mk_unit_fun_expr", &ctx->aux);

    free: (*void) ~> void;

    v_add_local_cleaner(free, ctx);

    //-----------------------------------------------------------------

    grammar gr0
    {
    actions:
        mk_spec_ident_identifier = mk_spec_ident_identifier_grammar_action;
        mk_unit_fun_expr         = mk_unit_spec_fun_derive_grammar_action, ctx;

    parsers:
        spec_ident =+ '(' _ id:identifier _ '(' _ '_' _ ')' _ ')'       { mk_spec_ident_identifier(id) };
    }
}


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
{   voidc_intrinsic_quarks_ctor();
}


