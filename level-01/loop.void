//---------------------------------------------------------------------
//- Copyright (C) 2020-2022 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("loop.void  must be imported into the voidc target only!");

    v_import("level-00");

    v_import("llvm-c/Core.void");

    v_import("function_hack.void");
    v_import("if_then_else.void");
    v_import("arithmetic.void");
    v_import("block.void");
}

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
}


//---------------------------------------------------------------------
{   v_add_type("void_ptr", v_pointer_type(void, 0));
}

//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr);


    //-----------------------------------------------------------------
    //- ast_stmt_loop_t ...
    //-----------------------------------------------------------------
    ast_stmt_loop_t = v_struct_type_named("struct.ast_stmt_loop_t");

    v_store(v_ast_stmt_t, typ0);

    v_type_struct_set_body(ast_stmt_loop_t, typ0, 1, false);

    ast_stmt_loop_ptr = v_pointer_type(ast_stmt_loop_t, 0);

    v_add_type("ast_stmt_loop_t",   ast_stmt_loop_t);
    v_add_type("ast_stmt_loop_ptr", ast_stmt_loop_ptr);

    size_v = LLVMSizeOf(v_type_get_llvm_type(ast_stmt_loop_t));

    v_add_constant("ast_stmt_loop_t_size", size_t, size_v);
}


//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("my_stmt_loop_mod");

    v_set_module(module);

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}


//---------------------------------------------------------------------
//- quark ...
//---------------------------------------------------------------------
{
    quark_name = "v_ast_stmt_loop_t_visitor_method_tag";

    quark_p = v_quark_ptr_from_string(quark_name);

    v_export_symbol(quark_name, v_reference_type(v_quark_t, 0), quark_p);

    v_add_alias("quark", quark_name);
}


//---------------------------------------------------------------------
//- init ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_loop_init", v_ast_generic_init_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, ast_stmt_loop_ptr);

    stmt = v_getelementptr(obj, 0, 0);

    v_initialize(stmt);
}


//---------------------------------------------------------------------
//- term ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_loop_term", v_ast_generic_term_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, ast_stmt_loop_ptr);

    stmt = v_getelementptr(obj, 0, 0);

    v_terminate(stmt);
}


//-----------------------------------------------------------------------
//- vtable ...
//-------------------------------------------------------------------
{
    module = v_get_module();

    val0 = v_alloca(LLVMValueRef, 3);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);

    init_f   = v_obtain_function("voidc_ast_stmt_loop_init");
    term_f   = v_obtain_function("voidc_ast_stmt_loop_term");
    quark_u  = LLVMGetUndef(v_type_get_llvm_type(v_quark_t));

    v_store(init_f,  val0);
    v_store(term_f,  val1);
    v_store(quark_u, val2);

    v_ast_generic_vtable_ = v_type_get_llvm_type(v_ast_generic_vtable);

    vtable_v = LLVMConstNamedStruct(v_ast_generic_vtable_, val0, 3);

    vtable_g = LLVMAddGlobal(module, v_ast_generic_vtable_, "voidc_ast_stmt_loop_vtable");

    LLVMSetInitializer(vtable_g, vtable_v);

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}

{   v_add_symbol("voidc_ast_stmt_loop_vtable", v_ast_generic_vtable, 0);
}


//---------------------------------------------------------------------
//- v_ast_make_stmt_loop - ...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 2);
    typ1 = v_getelementptr(typ0, 1);

    v_store(v_ast_stmt_ptr, typ0);
    v_store(v_ast_stmt_ptr, typ1);

    ft = v_function_type(void, typ0, 2, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_ast_make_stmt_loop", ft);

    v_add_parameter_name(f, 0, "ret",  v_ast_stmt_ptr);
    v_add_parameter_name(f, 1, "stmt", v_ast_stmt_ptr);
}
{
    stmp = v_alloca(v_ast_stmt_t);
    v_initialize(stmp);

    v_ast_make_stmt_generic(stmp, voidc_ast_stmt_loop_vtable, ast_stmt_loop_t_size);

    void_obj = v_ast_generic_get_object(v_cast(stmp, v_ast_base_ptr));

    obj = v_cast(void_obj, ast_stmt_loop_ptr);

    obj_stmt = v_getelementptr(obj, 0, 0);

    v_copy(obj_stmt, stmt);

    v_copy(ret, stmp);

    v_terminate(stmp);
}


//---------------------------------------------------------------------
//- mk_stmt_loop - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_stmt_loop_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 2, "any_count", size_t);
}
{
    stmt = v_std_any_get_pointer(v_ast_stmt_t, any0);

    stmt_ret = v_alloca(v_ast_stmt_t);
    v_initialize(stmt_ret);

    v_ast_make_stmt_loop(stmt_ret, stmt);

    v_std_any_set_pointer(ret, stmt_ret);

    v_terminate(stmt_ret);
}


//---------------------------------------------------------------------
//- compile_ast_stmt_loop_t - visitor method
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_ast_stmt_loop_t", voidc_visitor_method_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "aux",     void_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    void_obj = v_ast_generic_get_object(self);

    obj = v_cast(void_obj, ast_stmt_loop_ptr);

    stmt = v_getelementptr(obj, 0, 0);


    v_save_variables();


    builder = v_target_get_builder();

    cur_b = LLVMGetInsertBlock(builder);

    cur_f = LLVMGetBasicBlockParent(cur_b);

    loop_start_b = LLVMAppendBasicBlock(cur_f, "loop_start_b");
    loop_stop_b  = LLVMAppendBasicBlock(cur_f, "loop_stop_b");


    LLVMBuildBr(builder, loop_start_b);


    LLVMPositionBuilderAtEnd(builder, loop_start_b);


    llvm_stacksave_ft_ = v_type_get_llvm_type(v_find_symbol_type("llvm.stacksave"));
    llvm_stacksave_f   = v_obtain_function("llvm.stacksave");

    loop = LLVMBuildCall2(builder, llvm_stacksave_ft_, llvm_stacksave_f, 0, 0, "loop");


    i8_ptr  = v_pointer_type(v_int_type(8), 0);
    i8_ptr_ = v_type_get_llvm_type(i8_ptr);

    loop_leave_var_v = LLVMBuildAlloca(builder, i8_ptr_, "loop_leave_var_v");

    leave_bv = v_get_variable_value("voidc.internal_branch_target_leave");
    leave_b  = LLVMValueAsBasicBlock(leave_bv);

    leave_b_addr = LLVMBlockAddress(cur_f, leave_b);

    LLVMBuildStore(builder, leave_b_addr, loop_leave_var_v);


    loop_leave_b  = LLVMAppendBasicBlock(cur_f, "loop_leave_b");
    loop_leave_bv = LLVMBasicBlockAsValue(loop_leave_b);

    v_add_variable("voidc.internal_branch_target_leave", 0, loop_leave_bv);     //- Sic!


    loop_start_b_addr = LLVMBlockAddress(cur_f, loop_start_b);
    loop_stop_b_addr  = LLVMBlockAddress(cur_f, loop_stop_b);

    v_add_variable("voidc.internal_branch_target_continue_variable", 0, loop_leave_var_v);
    v_add_variable("voidc.internal_branch_target_continue",          0, loop_start_b_addr);
    v_add_variable("voidc.internal_branch_target_break_variable",    0, loop_leave_var_v);
    v_add_variable("voidc.internal_branch_target_break",             0, loop_stop_b_addr);


    base_ast = v_cast(stmt, v_ast_base_ptr);

    v_ast_accept_visitor(base_ast, visitor);


    cur_b = LLVMGetInsertBlock(builder);

    trm_v = LLVMGetBasicBlockTerminator(cur_b);

    null_v = v_cast(0, LLVMValueRef);

    ok = v_icmp(LLVMIntEQ, trm_v, null_v);

    if (ok) voidc_intrinsic_break_helper(loop_leave_var_v, loop_start_b_addr);


    LLVMMoveBasicBlockAfter(loop_leave_b, cur_b);


    LLVMPositionBuilderAtEnd(builder, loop_leave_b);


    leave_addr = LLVMBuildLoad2(builder, i8_ptr_, loop_leave_var_v, "leave_addr");


    val0 = v_alloca(LLVMValueRef);

    v_store(loop, val0);

    llvm_stackrestore_ft_ = v_type_get_llvm_type(v_find_symbol_type("llvm.stackrestore"));
    llvm_stackrestore_f   = v_obtain_function("llvm.stackrestore");

    LLVMBuildCall2(builder, llvm_stackrestore_ft_, llvm_stackrestore_f, val0, 1, "");


    ibr_insn = LLVMBuildIndirectBr(builder, leave_addr, 3);

    LLVMAddDestination(ibr_insn, leave_b);
    LLVMAddDestination(ibr_insn, loop_start_b);
    LLVMAddDestination(ibr_insn, loop_stop_b);


    LLVMMoveBasicBlockAfter(loop_stop_b, loop_leave_b);


    LLVMPositionBuilderAtEnd(builder, loop_stop_b);


    v_restore_variables();
}


//---------------------------------------------------------------------
//- v_continue ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_intrinsic_continue", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);
}
{
    builder = v_target_get_builder();

    cont_var  = v_get_variable_value("voidc.internal_branch_target_continue_variable");
    cont_addr = v_get_variable_value("voidc.internal_branch_target_continue");

    voidc_intrinsic_break_helper(cont_var, cont_addr);
}


//---------------------------------------------------------------------
//- Enable statement loop compilation
//---------------------------------------------------------------------
{
    v_add_symbol("v_break_intrinsic", voidc_intrinsic_t, voidc_visitor_get_intrinsic(voidc_compiler, "v_break", 0));


    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    v_function_hack("voidc_enable_statement_loop_compiler", ft);
}
{
    v_return_if(voidc_visitor_get_void_method(voidc_compiler, quark, 0));


    v_store(quark, v_getelementptr(voidc_ast_stmt_loop_vtable, 0, 2));

    vis = voidc_compiler;

    voidc_visitor_set_void_method(vis, vis, quark, compile_ast_stmt_loop_t, 0);

    voidc_visitor_set_intrinsic(vis, vis, "v_continue", voidc_intrinsic_continue, 0);

    voidc_visitor_set_intrinsic(vis, vis, "v_break", v_break_intrinsic, 0);     //- Re-export from "stmt_block" (?)
}


//---------------------------------------------------------------------
//- Enable statement loop
//---------------------------------------------------------------------
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    v_function_hack("voidc_enable_statement_loop", ft);
}
{
    voidc_enable_statement_loop_compiler();


    v_return_if_not(voidc_has_grammar());
    v_return_if(voidc_grammar_has_parser("stmt_loop"));


    pp0 = v_alloca(v_peg_parser_t, 5);
    v_initialize(pp0, 5);

    pp1 = v_getelementptr(pp0, 1);
    pp2 = v_getelementptr(pp0, 2);
    pp3 = v_getelementptr(pp0, 3);
    pp4 = v_getelementptr(pp0, 4);


    //-----------------------------------------------------------------
    //- stmt_loop <- "loop" !ident_cont _ s:stmt    { mk_stmt_loop(s) }

    v_peg_make_literal_parser(pp0, "loop");
    v_peg_make_identifier_parser(pp1, "ident_cont");
    v_peg_make_not_parser(pp1, pp1);

    v_peg_make_identifier_parser(pp2, "_");

    v_peg_make_identifier_parser(pp3, "stmt");
    v_peg_make_catch_variable_parser(pp3, "s", pp3);


    ar0 = v_alloca(v_peg_argument_t);
    v_initialize(ar0);

    v_peg_make_identifier_argument(ar0, "s");


    act = v_alloca(v_peg_action_t);
    v_initialize(act);

    v_peg_make_call_action(act, "mk_stmt_loop", ar0, 1);

    v_peg_make_action_parser(pp4, act);


    v_peg_make_sequence_parser(pp0, pp0, 5);


    gr0 = v_alloca(v_peg_grammar_t);
    v_initialize(gr0);

    v_peg_get_grammar(gr0);


    v_peg_grammar_set_action(gr0, gr0, "mk_stmt_loop", mk_stmt_loop_grammar_action);


    v_peg_grammar_set_parser(gr0, gr0, "stmt_loop", pp0, 0);


    v_peg_make_identifier_parser(pp0, "stmt_loop");


    pp_ = v_peg_grammar_get_parser(gr0, "stmt", 0);

    v_peg_choice_parser_concat(pp0, pp0, pp_);

    v_peg_grammar_set_parser(gr0, gr0, "stmt", pp0, 0);


    v_peg_set_grammar(gr0);


    v_terminate(gr0);
    v_terminate(act);
    v_terminate(ar0);
    v_terminate(pp0, 5);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_unit_load_module_to_jit(module);
    voidc_add_module_to_jit(module);

    LLVMDisposeModule(module);
    v_set_module(0);
}


//---------------------------------------------------------------------
{
    v_make_export_symbol("v_ast_make_stmt_loop");

    v_make_export_symbol("voidc_enable_statement_loop_compiler");
    v_make_export_symbol("voidc_enable_statement_loop");
}


