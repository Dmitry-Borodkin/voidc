//---------------------------------------------------------------------
//- Copyright (C) 2020-2022 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("defer.void  must be imported into the voidc target only!");

    v_import("voidc_target.void");
    v_import("voidc_types.void");
    v_import("voidc_util.void");
    v_import("voidc_ast.void");
    v_import("voidc_quark.void");
    v_import("voidc_visitor.void");
    v_import("voidc_compiler.void");
    v_import("vpeg_grammar.void");
    v_import("vpeg_context.void");

    v_import("llvm-c/Core.void");

    v_import("function_hack.void");
    v_import("grammar.void");
    v_import("expression.void");
}

{   voidc_enable_statement_grammar();
    voidc_enable_expression();
}


//---------------------------------------------------------------------
{   v_add_type("void_ptr", v_pointer_type(void, 0));
}

//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr, 3);

    //-----------------------------------------------------------------
    //- method ...
    //-----------------------------------------------------------------
    typ[0] := voidc_visitor_ptr;
    typ[1] := void_ptr;
    typ[2] := v_ast_stmt_ptr;

    method_ft  = v_function_type(void, typ, 3, false);
    method_ptr = v_pointer_type(method_ft, 0);

    v_add_type("method_ft",  method_ft);
    v_add_type("method_ptr", method_ptr);


    //-----------------------------------------------------------------
    //- ast_stmt_defer_t ...
    //-----------------------------------------------------------------
    ast_stmt_defer_t = v_struct_type_named("struct.ast_stmt_defer_t");

    typ[0] := v_ast_opaque_stmt_sptr;

    v_type_struct_set_body(ast_stmt_defer_t, typ, 1, false);

    ast_stmt_defer_ptr = v_pointer_type(ast_stmt_defer_t, 0);

    v_add_type("ast_stmt_defer_t",   ast_stmt_defer_t);
    v_add_type("ast_stmt_defer_ptr", ast_stmt_defer_ptr);

    size_v = LLVMSizeOf(v_type_get_llvm_type(ast_stmt_defer_t));

    v_add_constant("ast_stmt_defer_t_size", size_t, size_v);
}


//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("my_stmt_defer_mod");

    v_set_module(module);

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}


//---------------------------------------------------------------------
//- quark ...
//---------------------------------------------------------------------
{
    quark_name = "v_ast_stmt_defer_t_visitor_method_tag";

    quark_p = v_quark_ptr_from_string(quark_name);

    v_export_symbol(quark_name, v_reference_type(v_quark_t, 0), quark_p);

    v_add_alias("quark", quark_name);
}


//---------------------------------------------------------------------
//- init ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_defer_init", v_ast_generic_init_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, ast_stmt_defer_ptr);

    stmt = v_getelementptr(obj, 0, 0);

    v_initialize(stmt);
}


//---------------------------------------------------------------------
//- term ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_defer_term", v_ast_generic_term_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, ast_stmt_defer_ptr);

    stmt = v_getelementptr(obj, 0, 0);

    v_terminate(stmt);
}


//---------------------------------------------------------------------
//- accept ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_defer_accept", v_ast_generic_accept_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
    v_add_parameter_name(f, 1, "visitor",  voidc_visitor_ptr);
}
{
    obj = v_cast(void_obj, ast_stmt_defer_ptr);

    stmt = v_getelementptr(obj, 0, 0);

    aux = v_reference(v_alloca(void_ptr));

    void_method = voidc_visitor_get_void_method(visitor, quark, v_pointer(aux));

    method = v_cast(void_method, method_ptr);

    method(visitor, aux, stmt);
}


//---------------------------------------------------------------------
//- vtable ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    val = v_alloca(LLVMValueRef, 4);

    init_f   = v_obtain_function("voidc_ast_stmt_defer_init");
    term_f   = v_obtain_function("voidc_ast_stmt_defer_term");
    accept_f = v_obtain_function("voidc_ast_stmt_defer_accept");
    quark_u  = LLVMGetUndef(v_type_get_llvm_type(v_quark_t));

    val[0] := init_f;
    val[1] := term_f;
    val[2] := accept_f;
    val[3] := quark_u;

    v_ast_generic_vtable_ = v_type_get_llvm_type(v_ast_generic_vtable);

    vtable_v = LLVMConstNamedStruct(v_ast_generic_vtable_, val, 4);

    vtable_g = LLVMAddGlobal(module, v_ast_generic_vtable_, "voidc_ast_stmt_defer_vtable");

    LLVMSetLinkage(vtable_g, LLVMPrivateLinkage);

    LLVMSetInitializer(vtable_g, vtable_v);

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}

{   v_add_symbol("voidc_ast_stmt_defer_vtable", v_ast_generic_vtable, 0);
}


//---------------------------------------------------------------------
//- v_ast_make_stmt_defer - ...
//---------------------------------------------------------------------
{
    typ = v_alloca(v_type_ptr, 2);

    typ[0] := v_ast_stmt_ptr;
    typ[1] := v_ast_stmt_ptr;

    ft = v_function_type(void, typ, 2, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_ast_make_stmt_defer", ft);

    v_add_parameter_name(f, 0, "ret",  v_ast_stmt_ptr);
    v_add_parameter_name(f, 1, "stmt", v_ast_stmt_ptr);
}
{
    v_ast_make_stmt_generic(ret, voidc_ast_stmt_defer_vtable, ast_stmt_defer_t_size);

    void_obj = v_ast_generic_get_object(v_cast(ret, v_ast_base_ptr));

    obj = v_cast(void_obj, ast_stmt_defer_ptr);

    obj_stmt = v_getelementptr(obj, 0, 0);

    v_copy(obj_stmt, stmt);
}


//---------------------------------------------------------------------
//- mk_stmt_defer - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_stmt_defer_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_util_std_any_ptr);
    v_add_parameter_name(f, 1, "any0",      v_util_std_any_ptr);
    v_add_parameter_name(f, 2, "any_count", size_t);
}
{
    stmt = v_std_any_get_pointer(v_ast_opaque_stmt_sptr, any0);

    stmt_ret = v_alloca(v_ast_opaque_stmt_sptr);
    v_initialize(stmt_ret);

    v_ast_make_stmt_defer(stmt_ret, stmt);

    v_std_any_set_pointer(ret, stmt_ret);

    v_terminate(stmt_ret);
}


//---------------------------------------------------------------------
//- compile_ast_stmt_defer_t - visitor method
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_ast_stmt_defer_t", method_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "aux",     void_ptr);
    v_add_parameter_name(f, 2, "stmt",    v_ast_stmt_ptr);
}
{
    builder = v_target_get_builder();

    cur_b = LLVMGetInsertBlock(builder);

    cur_f = LLVMGetBasicBlockParent(cur_b);

    defer_b  = LLVMAppendBasicBlock(cur_f, "defer_b");
    defer_bv = LLVMBasicBlockAsValue(defer_b);


    LLVMPositionBuilderAtEnd(builder, defer_b);


    base_ast = v_cast(stmt, v_ast_base_ptr);

    v_ast_accept_visitor(base_ast, visitor);


    leave_bv = v_get_variable_value("voidc.internal_branch_target_leave");
    leave_b  = LLVMValueAsBasicBlock(leave_bv);

    LLVMBuildBr(builder, leave_b);


    v_add_variable("voidc.internal_branch_target_leave", 0, defer_bv);      //- Sic!


    LLVMPositionBuilderAtEnd(builder, cur_b);
}


//---------------------------------------------------------------------
//- Enable statement defer compiler
//---------------------------------------------------------------------
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    v_function_hack("voidc_enable_statement_defer_compiler", ft);
}
{
    v_return_if(voidc_visitor_get_void_method(voidc_compiler, quark, 0));


    v_store(quark, v_getelementptr(voidc_ast_stmt_defer_vtable, 0, 3));

    voidc_visitor_set_void_method(voidc_compiler, voidc_compiler, quark, compile_ast_stmt_defer_t, 0);
}


//---------------------------------------------------------------------
//- Enable statement defer
//---------------------------------------------------------------------
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    v_function_hack("voidc_enable_statement_defer", ft);
}
{
    voidc_enable_statement_defer_compiler();


    v_return_if_not(voidc_has_grammar());
    v_return_if(voidc_grammar_has_parser("stmt_defer"));


    gr0 = v_alloca(v_peg_opaque_grammar_sptr);
    v_initialize(gr0);

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    actions:
        mk_stmt_defer = mk_stmt_defer_grammar_action;

    parsers:
        stmt_defer = "defer" !ident_cont _ s:stmt    { mk_stmt_defer(s) };

        stmt += stmt_defer;
    }


    v_peg_set_grammar(gr0);


    v_terminate(gr0);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_unit_load_module_to_jit(module);

    LLVMDisposeModule(module);
    v_set_module(0);
}


//---------------------------------------------------------------------
{
    v_make_export_symbol("v_ast_make_stmt_defer");

    v_make_export_symbol("voidc_enable_statement_defer_compiler");
    v_make_export_symbol("voidc_enable_statement_defer");
}


