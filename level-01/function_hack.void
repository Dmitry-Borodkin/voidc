//---------------------------------------------------------------------
//- Copyright (C) 2020-2022 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("function_hack.void  must be imported into the voidc target only!");

    v_import("level-00");

    v_import("llvm-c/Core.void");
}


//{ v_import("printf.void"); }


//---------------------------------------------------------------------
//- Some utility...
//---------------------------------------------------------------------
{   v_add_type("char_ptr", v_pointer_type(char, 0));
    v_add_type("void_ptr", v_pointer_type(void, 0));
}

{    void_ptr_ = v_type_get_llvm_type(void_ptr);

    llvm_opaque_type = v_type_refptr_get_element_type(LLVMTypeRef);

    v_add_symbol("void_ptr_", llvm_opaque_type, void_ptr_);
}


//---------------------------------------------------------------------
//- Function Hack module #1
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 2);
    typ1 = v_getelementptr(typ0, 1);

    v_store(char_ptr,   typ0);
    v_store(v_type_ptr, typ1);

    helper_ft = v_function_type(LLVMValueRef, typ0, 2, 0);

    v_export_symbol_type("voidc_function_hack_intrinsic_helper",  helper_ft);

    v_add_symbol("voidc_function_hack_visitor_method",   v_ast_unit_visitor_method_t, 0);
    v_add_symbol("voidc_function_hack_intrinsic",        voidc_intrinsic_t,           0);
    v_add_symbol("voidc_function_hack_return_intrinsic", voidc_intrinsic_t,           0);
}

//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("function_hack_module_N1");

    v_set_module(module);

    val0 = v_alloca(LLVMValueRef, 6);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);
    val3 = v_getelementptr(val0, 3);
    val4 = v_getelementptr(val0, 4);
    val5 = v_getelementptr(val0, 5);

    int_ = v_type_get_llvm_type(int);

    n0 = LLVMConstInt(int_, 0, 0);
    n1 = LLVMConstInt(int_, 1, 0);
    n2 = LLVMConstInt(int_, 2, 0);
    n3 = LLVMConstInt(int_, 3, 0);

    //-----------------------------------------------------------------
    builder = v_target_get_voidc_builder();


    //-----------------------------------------------------------------
    //- Saved global variables
    //-----------------------------------------------------------------
    //- saved_module_g:   LLVMModuleRef;
    //- saved_compiler_g: voidc_opaque_visitor_sptr;
    //-----------------------------------------------------------------
    LLVMModuleRef_ = v_type_get_llvm_type(LLVMModuleRef);

    saved_module_g = LLVMAddGlobal(module, LLVMModuleRef_, "saved_module_g");
    LLVMSetLinkage(saved_module_g, LLVMPrivateLinkage);

    saved_module_u = LLVMGetUndef(LLVMModuleRef_);

    LLVMSetInitializer(saved_module_g, saved_module_u);


    voidc_opaque_visitor_sptr_ = v_type_get_llvm_type(voidc_opaque_visitor_sptr);

    saved_compiler_g = LLVMAddGlobal(module, voidc_opaque_visitor_sptr_, "saved_compiler_g");
    LLVMSetLinkage(saved_compiler_g, LLVMPrivateLinkage);

    saved_compiler_u = LLVMGetUndef(voidc_opaque_visitor_sptr_);

    LLVMSetInitializer(saved_compiler_g, saved_compiler_u);


    //-----------------------------------------------------------------
    //- "Function hack" compiler visitor method
    //-----------------------------------------------------------------
    //- private
    //- voidc_function_hack_visitor_method: (visitor:   voidc_visitor_ptr,
    //-                                      aux:       void_ptr,
    //-                                      stmt_list: v_ast_stmt_list_ptr,
    //-                                      line:      int,
    //-                                      column:    int
    //-                                     ) -> void
    //- {
    //-     base_ast = v_cast(stmt_list, v_ast_base_ptr);
    //-
    //-     v_ast_accept_visitor(base_ast, visitor);
    //-
    //-     v_finish_function();
    //-
    //-     fun_module = v_get_module();
    //-
    //-     v_verify_module(fun_module);
    //-
    //-     old_module = v_load(saved_module_g);
    //-
    //-     v_set_module(old_module);
    //-
    //-     v_move(voidc_compiler, saved_compiler_g);
    //-
    //-     if (old_module) v_return();
    //-
    //-     voidc_unit_load_local_module_to_jit(fun_module);
    //- }
    //-----------------------------------------------------------------
    method_f = v_obtain_function("voidc_function_hack_visitor_method");
    LLVMSetLinkage(method_f, LLVMPrivateLinkage);

    visitor   = LLVMGetParam(method_f, 0);
    aux       = LLVMGetParam(method_f, 1);
    stmt_list = LLVMGetParam(method_f, 2);
    line      = LLVMGetParam(method_f, 3);
    column    = LLVMGetParam(method_f, 4);

    entry = LLVMAppendBasicBlock(method_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);


    v_ast_base_ptr_ = v_type_get_llvm_type(v_ast_base_ptr);

    base_ast = LLVMBuildBitCast(builder, stmt_list, v_ast_base_ptr_, "base_ast");

    v_store(base_ast, val0);
    v_store(visitor,  val1);

    accept_visitor_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_ast_accept_visitor"));
    accept_visitor_f   = v_obtain_function("v_ast_accept_visitor");

    LLVMBuildCall2(builder, accept_visitor_ft_, accept_visitor_f, val0, 2, "");


    finish_function_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_finish_function"));
    finish_function_f   = v_obtain_function("v_finish_function");

    LLVMBuildCall2(builder, finish_function_ft_, finish_function_f, val0, 0, "");


    get_module_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_get_module"));
    get_module_f   = v_obtain_function("v_get_module");

    fun_module_v = LLVMBuildCall2(builder, get_module_ft_, get_module_f, 0, 0, "fun_module_v");


    verify_module_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_verify_module"));
    verify_module_f   = v_obtain_function("v_verify_module");

    v_store(fun_module_v, val0);

    LLVMBuildCall2(builder, verify_module_ft_, verify_module_f, val0, 1, "");


    old_module_v = LLVMBuildLoad2(builder, LLVMModuleRef_, saved_module_g, "old_module_v");

    v_store(old_module_v, val0);

    set_module_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_set_module"));
    set_module_f = v_obtain_function("v_set_module");

    LLVMBuildCall2(builder, set_module_ft_, set_module_f, val0, 1, "");


    voidc_compiler_v = v_obtain_global("voidc_compiler");

    v_store(voidc_compiler_v, val0);
    v_store(saved_compiler_g, val1);
    v_store(n1,               val2);

    vis_move_ft_ = v_type_get_llvm_type(v_find_symbol_type("voidc_move_visitor_impl"));
    vis_move_f   = v_obtain_function("voidc_move_visitor_impl");

    LLVMBuildCall2(builder, vis_move_ft_, vis_move_f, val0, 3, "");


    old_mod_not_null_v = LLVMBuildIsNotNull(builder, old_module_v, "old_mod_not_null_v");

    then_b = LLVMAppendBasicBlock(method_f, "then_b");
    else_b = LLVMAppendBasicBlock(method_f, "else_b");

    LLVMBuildCondBr(builder, old_mod_not_null_v, then_b, else_b);


    LLVMPositionBuilderAtEnd(builder, then_b);


    LLVMBuildRetVoid(builder);


    LLVMPositionBuilderAtEnd(builder, else_b);


    load_to_jit_ft_ = v_type_get_llvm_type(v_find_symbol_type("voidc_unit_load_local_module_to_jit"));
    load_to_jit_f   = v_obtain_function("voidc_unit_load_local_module_to_jit");

    v_store(fun_module_v, val0);

    LLVMBuildCall2(builder, load_to_jit_ft_, load_to_jit_f, val0, 1, "");


    LLVMBuildRetVoid(builder);


    //-----------------------------------------------------------------
    //- "Function hack" intrinsic helper
    //-----------------------------------------------------------------
    //- voidc_function_hack_intrinsic_helper: (fun_name: char_ptr, fun_type: v_type_ptr) -> LLVMValueRef
    //- {
    //-     v_add_symbol(fun_name, fun_type, 0);
    //-
    //-     if (voidc_has_grammar()) ;
    //-     else
    //-     {
    //-         v_return(0);
    //-     }
    //-
    //-     old_module = v_get_module();
    //-
    //-     v_store(old_module, saved_module_g);
    //-
    //-     if (old_module) ;
    //-     else
    //-     {
    //-         llvm_ctx = v_target_get_llvm_ctx();
    //-
    //-         fun_mod = LLVMModuleCreateWithNameInContext("voidc_function_hack_function_module", llvm_ctx);
    //-
    //-         v_set_module(fun_mod);
    //-     }
    //-
    //-     fun_value = v_prepare_function(fun_name, fun_type);
    //-
    //-     v_initialize(saved_compiler_g);
    //-
    //-     v_copy(saved_compiler_g, voidc_compiler);
    //-
    //-     v_visitor_set_method_ast_unit_t(voidc_compiler, voidc_compiler, voidc_function_hack_visitor_method, 0);
    //-
    //-     v_return(fun_value);
    //- }
    //-----------------------------------------------------------------
    helper_f = v_obtain_function("voidc_function_hack_intrinsic_helper");

    fun_name = LLVMGetParam(helper_f, 0);       //- :char_ptr
    fun_type = LLVMGetParam(helper_f, 1);       //- :v_type_ptr

    entry = LLVMAppendBasicBlock(helper_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);


    v0 = LLVMConstNull(void_ptr_);

    v_store(fun_name, val0);
    v_store(fun_type, val1);
    v_store(v0,       val2);

    add_sym_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_add_symbol"));
    add_sym_f   = v_obtain_function("v_add_symbol");

    LLVMBuildCall2(builder, add_sym_ft_, add_sym_f, val0, 3, "");

    has_grammar_ft_ = v_type_get_llvm_type(v_find_symbol_type("voidc_has_grammar"));
    has_grammar_f   = v_obtain_function("voidc_has_grammar");

    ok_v = LLVMBuildCall2(builder, has_grammar_ft_, has_grammar_f, 0, 0, "ok_v");

    else_b = LLVMAppendBasicBlock(helper_f, "else_b");      //- "else" first!
    then_b = LLVMAppendBasicBlock(helper_f, "then_b");

    LLVMBuildCondBr(builder, ok_v, then_b, else_b);

    LLVMPositionBuilderAtEnd(builder, else_b);              //- "else" first!

    LLVMBuildRet(builder, LLVMConstNull(v_type_get_llvm_type(LLVMValueRef)));

    LLVMPositionBuilderAtEnd(builder, then_b);


    old_module_v = LLVMBuildCall2(builder, get_module_ft_, get_module_f, 0, 0, "old_module_v");

    LLVMBuildStore(builder, old_module_v, saved_module_g);


    old_mod_null_v = LLVMBuildIsNull(builder, old_module_v, "old_mod_null_v");

    then_b = LLVMAppendBasicBlock(helper_f, "then_b");
    else_b = LLVMAppendBasicBlock(helper_f, "else_b");

    LLVMBuildCondBr(builder, old_mod_null_v, then_b, else_b);


    LLVMPositionBuilderAtEnd(builder, then_b);


    get_llvm_ctx_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_target_get_llvm_ctx"));
    get_llvm_ctx_f   = v_obtain_function("v_target_get_llvm_ctx");

    llvm_ctx_v = LLVMBuildCall2(builder, get_llvm_ctx_ft_, get_llvm_ctx_f, 0, 0, "llvm_ctx_v");


    fun_module_n = LLVMBuildGlobalStringPtr(builder, "voidc_function_hack_function_module", "fun_module_n");

    v_store(fun_module_n, val0);
    v_store(llvm_ctx_v,   val1);

    llvm_mod_create_ft_ = v_type_get_llvm_type(v_find_symbol_type("LLVMModuleCreateWithNameInContext"));
    llvm_mod_create_f   = v_obtain_function("LLVMModuleCreateWithNameInContext");

    fun_mod_v = LLVMBuildCall2(builder, llvm_mod_create_ft_, llvm_mod_create_f, val0, 2, "fun_mod_v");


    v_store(fun_mod_v, val0);

    LLVMBuildCall2(builder, set_module_ft_, set_module_f, val0, 1, "");


    LLVMBuildBr(builder, else_b);


    LLVMPositionBuilderAtEnd(builder, else_b);


    v_store(fun_name, val0);
    v_store(fun_type, val1);

    prepare_function_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_prepare_function"));
    prepare_function_f   = v_obtain_function("v_prepare_function");

    fun_value = LLVMBuildCall2(builder, prepare_function_ft_, prepare_function_f, val0, 2, "fun_value");


    v_store(saved_compiler_g, val0);
    v_store(n1,               val1);

    vis_init_ft_ = v_type_get_llvm_type(v_find_symbol_type("voidc_initialize_visitor_impl"));
    vis_init_f   = v_obtain_function("voidc_initialize_visitor_impl");

    LLVMBuildCall2(builder, vis_init_ft_, vis_init_f, val0, 2, "");


//  v_store(saved_compiler_g, val0);
    v_store(voidc_compiler_v, val1);
    v_store(n1,               val2);

    vis_copy_ft_ = v_type_get_llvm_type(v_find_symbol_type("voidc_copy_visitor_impl"));
    vis_copy_f   = v_obtain_function("voidc_copy_visitor_impl");

    LLVMBuildCall2(builder, vis_copy_ft_, vis_copy_f, val0, 3, "");


    null_void_ptr_v = LLVMConstNull(void_ptr_);

    v_store(voidc_compiler_v, val0);
//  v_store(voidc_compiler_v, val1);
    v_store(method_f,         val2);
    v_store(null_void_ptr_v,  val3);

    set_method_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_visitor_set_method_ast_unit_t"));
    set_method_f   = v_obtain_function("v_visitor_set_method_ast_unit_t");

    LLVMBuildCall2(builder, set_method_ft_, set_method_f, val0, 4, "");


    LLVMBuildRet(builder, fun_value);


    //-----------------------------------------------------------------
    //- "Function hack" intrinsic
    //-----------------------------------------------------------------
    //- voidc_function_hack_intrinsic: (visitor: voidc_visitor_ptr, aux: void_ptr,
    //-                                 arg_list: v_ast_expr_list_ptr
    //-                                ) -> void
    //- {
    //-     builder = v_target_get_builder();
    //-
    //-     tt = v_get_result_type();
    //-
    //-     arg0 = v_alloca(v_ast_opaque_expr_sptr, 2);
    //-     v_initialize(arg0, 2);
    //-
    //-     arg1 = v_getelementptr(arg0, 1);
    //-
    //-     base_arg = v_cast(arg0, v_ast_base_ptr);
    //-
    //-     v_list_get_items(arg_list, 0, arg0, 2);
    //-
    //-     v_set_result_type(char_ptr);
    //-
    //-     v_ast_accept_visitor(base_arg, visitor);
    //-
    //-     fun_name = v_get_result_value();        //- :char_ptr
    //-
    //-     v_set_result_type(v_type_ptr);
    //-
    //-     base_arg = v_cast(arg1, v_ast_base_ptr);
    //-
    //-     v_ast_accept_visitor(base_arg, visitor);
    //-
    //-     fun_type = v_get_result_value();        //- :v_type_ptr
    //-
    //-     v_terminate(arg0, 2);
    //-
    //-
    //-     arg0 = v_alloca(LLVMValueRef, 2);
    //-     arg1 = v_getelementptr(arg0, 1);
    //-
    //-     v_store(fun_name, arg0);
    //-     v_store(fun_type, arg1);
    //-
    //-     helper_ft_ = v_type_get_llvm_type(v_find_symbol_type("voidc_function_hack_intrinsic_helper"));
    //-     helper_f   = v_obtain_function("voidc_function_hack_intrinsic_helper");
    //-
    //-     ret = LLVMBuildCall2(builder, helper_ft_, helper_f, arg0, 2, "");
    //-
    //-
    //-     nok_v = LLVMBuildIsNull(builder, ret, "");
    //-
    //-     cur_b = LLVMGetInsertBlock(builder);
    //-     cur_f = LLVMGetBasicBlockParent(cur_b);
    //-
    //-     then_b = LLVMAppendBasicBlock(cur_f, "then_b");
    //-     else_b = LLVMAppendBasicBlock(cur_f, "else_b");
    //-
    //-     LLVMBuildCondBr(builder, nok_v, then_b, else_b);
    //-
    //-     LLVMPositionBuilderAtEnd(builder, then_b);
    //-
    //-     LLVMBuildRetVoid(builder);
    //-
    //-     LLVMPositionBuilderAtEnd(builder, else_b);
    //-
    //-
    //-     v_set_result_type(tt);
    //-
    //-     v_adopt_result(LLVMValueRef, ret);
    //- }
    //-----------------------------------------------------------------
    intrinsic_f = v_obtain_function("voidc_function_hack_intrinsic");

    visitor  = LLVMGetParam(intrinsic_f, 0);
    aux      = LLVMGetParam(intrinsic_f, 1);
    arg_list = LLVMGetParam(intrinsic_f, 2);

    entry = LLVMAppendBasicBlock(intrinsic_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);


    get_builder_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_target_get_builder"));
    get_builder_f   = v_obtain_function("v_target_get_builder");

    builder_v = LLVMBuildCall2(builder, get_builder_ft_, get_builder_f, val0, 0, "builder_v");


    get_res_type_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_get_result_type"));
    get_res_type_f   = v_obtain_function("v_get_result_type");

    tt_v = LLVMBuildCall2(builder, get_res_type_ft_, get_res_type_f, 0, 0, "tt_v");


    v_ast_opaque_expr_sptr_ = v_type_get_llvm_type(v_ast_opaque_expr_sptr);

    arg0_v = LLVMBuildArrayAlloca(builder, v_ast_opaque_expr_sptr_, n2, "arg0_v");


    v_store(arg0_v, val0);
    v_store(n2,     val1);

    expr_init_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_ast_initialize_expr_impl"));
    expr_init_f   = v_obtain_function("v_ast_initialize_expr_impl");

    LLVMBuildCall2(builder, expr_init_ft_, expr_init_f, val0, 2, "");


    v_store(n1, val0);

    arg1_v = LLVMBuildGEP2(builder, v_ast_opaque_expr_sptr_, arg0_v, val0, 1, "arg1");


    v_ast_base_ptr_ = v_type_get_llvm_type(v_ast_base_ptr);

    base_arg = LLVMBuildBitCast(builder, arg0_v, v_ast_base_ptr_, "base_arg");


    v_store(arg_list, val0);
    v_store(n0,       val1);
    v_store(arg0_v,   val2);
    v_store(n2,       val3);

    expr_list_get_items_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_ast_list_get_items_expr_list_impl"));
    expr_list_get_items_f   = v_obtain_function("v_ast_list_get_items_expr_list_impl");

    LLVMBuildCall2(builder, expr_list_get_items_ft_, expr_list_get_items_f, val0, 4, "");


    char_ptr_v = v_obtain_global("char_ptr");

    v_store(char_ptr_v, val0);

    set_res_type_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_set_result_type"));
    set_res_type_f   = v_obtain_function("v_set_result_type");

    LLVMBuildCall2(builder, set_res_type_ft_, set_res_type_f, val0, 1, "");


    v_store(base_arg, val0);
    v_store(visitor,  val1);

    LLVMBuildCall2(builder, accept_visitor_ft_, accept_visitor_f, val0, 2, "");


    get_res_val_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_get_result_value"));
    get_res_val_f   = v_obtain_function("v_get_result_value");

    fun_name = LLVMBuildCall2(builder, get_res_val_ft_, get_res_val_f, 0, 0, "fun_name");


    type_ptr_v = v_obtain_global("v_type_ptr");

    v_store(type_ptr_v, val0);

    LLVMBuildCall2(builder, set_res_type_ft_, set_res_type_f, val0, 1, "");


    base_arg = LLVMBuildBitCast(builder, arg1_v, v_ast_base_ptr_, "base_arg");

    v_store(base_arg, val0);
    v_store(visitor,  val1);

    LLVMBuildCall2(builder, accept_visitor_ft_, accept_visitor_f, val0, 2, "");


    fun_type = LLVMBuildCall2(builder, get_res_val_ft_, get_res_val_f, 0, 0, "fun_type");


    v_store(arg0_v, val0);
    v_store(n2,     val1);

    expr_term_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_ast_terminate_expr_impl"));
    expr_term_f   = v_obtain_function("v_ast_terminate_expr_impl");

    LLVMBuildCall2(builder, expr_term_ft_, expr_term_f, val0, 2, "");


    LLVMValueRef_ = v_type_get_llvm_type(LLVMValueRef);

    arg0 = LLVMBuildArrayAlloca(builder, LLVMValueRef_, n2, "arg0");

    LLVMBuildStore(builder, fun_name, arg0);

    v_store(n1, val0);

    arg1 = LLVMBuildGEP2(builder, LLVMValueRef_, arg0, val0, 1, "arg1");

    LLVMBuildStore(builder, fun_type, arg1);


    helper_fn = LLVMBuildGlobalStringPtr(builder, "voidc_function_hack_intrinsic_helper", "helper_fn");

    v_store(helper_fn, val0);

    find_sym_type_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_find_symbol_type"));
    find_sym_type_f   = v_obtain_function("v_find_symbol_type");

    helper_ftv = LLVMBuildCall2(builder, find_sym_type_ft_, find_sym_type_f, val0, 1, "helper_ftv");

    v_store(helper_ftv, val0);

    get_llvm_type_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_type_get_llvm_type"));
    get_llvm_type_f   = v_obtain_function("v_type_get_llvm_type");

    helper_ft_v = LLVMBuildCall2(builder, get_llvm_type_ft_, get_llvm_type_f, val0, 1, "helper_ft_v");

    v_store(helper_fn, val0);

    obtain_fun_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_obtain_function"));
    obtain_fun_f   = v_obtain_function("v_obtain_function");

    helper_fv = LLVMBuildCall2(builder, obtain_fun_ft_, obtain_fun_f, val0, 1, "helper_fv");


    empty_str = LLVMBuildGlobalStringPtr(builder, "", "empty_str");

    v_store(builder_v,   val0);
    v_store(helper_ft_v, val1);
    v_store(helper_fv,   val2);
    v_store(arg0,        val3);
    v_store(n2,          val4);
    v_store(empty_str,   val5);

    llvm_build_call2_ft_ = v_type_get_llvm_type(v_find_symbol_type("LLVMBuildCall2"));
    llvm_build_call2_f   = v_obtain_function("LLVMBuildCall2");

    ret_v = LLVMBuildCall2(builder, llvm_build_call2_ft_, llvm_build_call2_f, val0, 6, "ret_v");


//  v_store(builder_v, val0);
    v_store(ret_v,     val1);
    v_store(empty_str, val2);

    llvm_build_is_null_ft_ = v_type_get_llvm_type(v_find_symbol_type("LLVMBuildIsNull"));
    llvm_build_is_null_f   = v_obtain_function("LLVMBuildIsNull");

    nok_v = LLVMBuildCall2(builder, llvm_build_is_null_ft_, llvm_build_is_null_f, val0, 3, "nok_v");


//  v_store(builder_v, val0);

    llvm_get_insert_block_ft_ = v_type_get_llvm_type(v_find_symbol_type("LLVMGetInsertBlock"));
    llvm_get_insert_block_f   = v_obtain_function("LLVMGetInsertBlock");

    cur_b = LLVMBuildCall2(builder, llvm_get_insert_block_ft_, llvm_get_insert_block_f, val0, 1, "cur_b");

    llvm_get_basic_block_parent_ft_ = v_type_get_llvm_type(v_find_symbol_type("LLVMGetBasicBlockParent"));
    llvm_get_basic_block_parent_f   = v_obtain_function("LLVMGetBasicBlockParent");

    v_store(cur_b, val0);

    cur_fv = LLVMBuildCall2(builder, llvm_get_basic_block_parent_ft_, llvm_get_basic_block_parent_f, val0, 1, "cur_fv");

    llvm_append_basic_block_ft_ = v_type_get_llvm_type(v_find_symbol_type("LLVMAppendBasicBlock"));
    llvm_append_basic_block_f   = v_obtain_function("LLVMAppendBasicBlock");

    then_b_str = LLVMBuildGlobalStringPtr(builder, "then_b", "then_b_str");
    else_b_str = LLVMBuildGlobalStringPtr(builder, "else_b", "else_b_str");

    v_store(cur_fv,     val0);
    v_store(then_b_str, val1);

    then_bv = LLVMBuildCall2(builder, llvm_append_basic_block_ft_, llvm_append_basic_block_f, val0, 2, "then_bv");

//  v_store(cur_fv,     val0);
    v_store(else_b_str, val1);

    else_bv = LLVMBuildCall2(builder, llvm_append_basic_block_ft_, llvm_append_basic_block_f, val0, 2, "else_bv");


    llvm_build_cond_br_ft_ = v_type_get_llvm_type(v_find_symbol_type("LLVMBuildCondBr"));
    llvm_build_cond_br_f   = v_obtain_function("LLVMBuildCondBr");

    v_store(builder_v, val0);
    v_store(nok_v,     val1);
    v_store(then_bv,   val2);
    v_store(else_bv,   val3);

    LLVMBuildCall2(builder, llvm_build_cond_br_ft_, llvm_build_cond_br_f, val0, 4, "");


//  v_store(builder_v, val0);
    v_store(then_bv,   val1);

    llvm_position_builder_at_end_ft_ = v_type_get_llvm_type(v_find_symbol_type("LLVMPositionBuilderAtEnd"));
    llvm_position_builder_at_end_f   = v_obtain_function("LLVMPositionBuilderAtEnd");

    LLVMBuildCall2(builder, llvm_position_builder_at_end_ft_, llvm_position_builder_at_end_f, val0, 2, "");

    llvm_build_ret_void_ft_ = v_type_get_llvm_type(v_find_symbol_type("LLVMBuildRetVoid"));
    llvm_build_ret_void_f   = v_obtain_function("LLVMBuildRetVoid");

    LLVMBuildCall2(builder, llvm_build_ret_void_ft_, llvm_build_ret_void_f, val0, 1, "");


//  v_store(builder_v, val0);
    v_store(else_bv,   val1);

    LLVMBuildCall2(builder, llvm_position_builder_at_end_ft_, llvm_position_builder_at_end_f, val0, 2, "");


    v_store(tt_v, val0);

    LLVMBuildCall2(builder, set_res_type_ft_, set_res_type_f, val0, 1, "");


    //- That's it...

    llvm_value_ref_v = v_obtain_global("LLVMValueRef");

    v_store(llvm_value_ref_v, val0);
    v_store(ret_v,            val1);

    adopt_res_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_adopt_result"));
    adopt_res_f   = v_obtain_function("v_adopt_result");

    LLVMBuildCall2(builder, adopt_res_ft_, adopt_res_f, val0, 2, "");


    LLVMBuildRetVoid(builder);


    //-----------------------------------------------------------------
    //- "Return" intrinsic
    //-----------------------------------------------------------------
    //- voidc_function_hack_return_intrinsic: (visitor: voidc_visitor_ptr, aux: void_ptr,
    //-                                        arg_list: v_ast_expr_list_ptr
    //-                                       ) -> void
    //- {
    //-     builder = v_target_get_builder();
    //-
    //-     arg0 = v_alloca(v_ast_opaque_expr_sptr);
    //-     v_initialize(arg0);
    //-
    //-     args_count = v_list_get_size(arg_list);
    //-
    //-     if (args_count)
    //-     {
    //-         v_list_get_items(arg_list, 0, arg0, 1);
    //-
    //-         ret_type = v_get_variable_type("voidc.internal_return_type");
    //-
    //-         v_set_result_type(ret_type);
    //-
    //-         base_arg0 = v_cast(arg0, v_ast_base_ptr);
    //-
    //-         v_ast_accept_visitor(base_arg0, visitor);
    //-
    //-         ret = v_get_result_value();
    //-
    //-         ret_var_v = v_get_variable_value("voidc.internal_return_value");
    //-
    //-         LLVMBuildStore(builder, ret, ret_var_v);
    //-     }
    //-
    //-     v_terminate(arg0);
    //-
    //-     leave_bv = v_get_variable_value("voidc.internal_branch_target_leave");
    //-     leave_b  = LLVMValueAsBasicBlock(leave_bv);
    //-
    //-     LLVMBuildBr(builder, leave_b);
    //- }
    //-----------------------------------------------------------------
    return_f = v_obtain_function("voidc_function_hack_return_intrinsic");

    visitor  = LLVMGetParam(return_f, 0);
    aux      = LLVMGetParam(return_f, 1);
    arg_list = LLVMGetParam(return_f, 2);

    entry = LLVMAppendBasicBlock(return_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);


    builder_v = LLVMBuildCall2(builder, get_builder_ft_, get_builder_f, val0, 0, "builder_v");


    arg0_v = LLVMBuildAlloca(builder, v_ast_opaque_expr_sptr_, "arg0_v");


    v_store(arg0_v, val0);
    v_store(n1,     val1);

    LLVMBuildCall2(builder, expr_init_ft_, expr_init_f, val0, 2, "");


    v_store(arg_list, val0);

    list_get_size_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_ast_list_get_size_expr_list_impl"));
    list_get_size_f   = v_obtain_function("v_ast_list_get_size_expr_list_impl");

    args_count_v = LLVMBuildCall2(builder, list_get_size_ft_, list_get_size_f, val0, 1, "args_count_v");


    then_b = LLVMAppendBasicBlock(return_f, "then_b");
    else_b = LLVMAppendBasicBlock(return_f, "else_b");


    ok_v = LLVMBuildIsNotNull(builder, args_count_v, "ok_v");

    LLVMBuildCondBr(builder, ok_v, then_b, else_b);


    LLVMPositionBuilderAtEnd(builder, then_b);


    v_store(arg_list, val0);
    v_store(n0,       val1);
    v_store(arg0_v,   val2);
    v_store(n1,       val3);

    LLVMBuildCall2(builder, expr_list_get_items_ft_, expr_list_get_items_f, val0, 4, "");


    ret_type_var_n = LLVMBuildGlobalStringPtr(builder, "voidc.internal_return_type", "ret_type_var_n");

    v_store(ret_type_var_n, val0);

    get_var_type_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_get_variable_type"));
    get_var_type_f   = v_obtain_function("v_get_variable_type");

    ret_type_v = LLVMBuildCall2(builder, get_var_type_ft_, get_var_type_f, val0, 1, "ret_type_v");


    v_store(ret_type_v, val0);

    LLVMBuildCall2(builder, set_res_type_ft_, set_res_type_f, val0, 1, "");


    base_arg0 = LLVMBuildBitCast(builder, arg0_v, v_ast_base_ptr_, "base_arg0");

    v_store(base_arg0, val0);
    v_store(visitor,   val1);

    LLVMBuildCall2(builder, accept_visitor_ft_, accept_visitor_f, val0, 2, "");


    ret_v = LLVMBuildCall2(builder, get_res_val_ft_, get_res_val_f, 0, 0, "ret_v");


    ret_var_v_n = LLVMBuildGlobalStringPtr(builder, "voidc.internal_return_value", "ret_var_v_n");

    v_store(ret_var_v_n, val0);

    get_var_value_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_get_variable_value"));
    get_var_value_f   = v_obtain_function("v_get_variable_value");

    ret_var_v = LLVMBuildCall2(builder, get_var_value_ft_, get_var_value_f, val0, 1, "ret_var_v");


    v_store(builder_v, val0);
    v_store(ret_v,     val1);
    v_store(ret_var_v, val2);

    llvm_build_store_ft_ = v_type_get_llvm_type(v_find_symbol_type("LLVMBuildStore"));
    llvm_build_store_f   = v_obtain_function("LLVMBuildStore");

    LLVMBuildCall2(builder, llvm_build_store_ft_, llvm_build_store_f, val0, 3, "");


    LLVMBuildBr(builder, else_b);


    LLVMPositionBuilderAtEnd(builder, else_b);


    v_store(arg0_v, val0);
    v_store(n1,     val1);

    LLVMBuildCall2(builder, expr_term_ft_, expr_term_f, val0, 2, "");


    leave_bv_v_n = LLVMBuildGlobalStringPtr(builder, "voidc.internal_branch_target_leave", "leave_bv_v_n");

    v_store(leave_bv_v_n, val0);

    leave_bv_v = LLVMBuildCall2(builder, get_var_value_ft_, get_var_value_f, val0, 1, "leave_bv_v");


    v_store(leave_bv_v, val0);

    llvm_value_as_basic_block_ft_ = v_type_get_llvm_type(v_find_symbol_type("LLVMValueAsBasicBlock"));
    llvm_value_as_basic_block_f   = v_obtain_function("LLVMValueAsBasicBlock");

    leave_b_v = LLVMBuildCall2(builder, llvm_value_as_basic_block_ft_, llvm_value_as_basic_block_f, val0, 1, "leave_b_v");


    v_store(builder_v, val0);
    v_store(leave_b_v, val1);

    llvm_build_br_ft_ = v_type_get_llvm_type(v_find_symbol_type("LLVMBuildBr"));
    llvm_build_br_f   = v_obtain_function("LLVMBuildBr");

    LLVMBuildCall2(builder, llvm_build_br_ft_, llvm_build_br_f, val0, 2, "");


    LLVMBuildRetVoid(builder);


    //-----------------------------------------------------------------
    LLVMClearInsertionPosition(builder);


    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_unit_load_module_to_jit(module);
    voidc_add_module_to_jit(module);

    LLVMDisposeModule(module);
    v_set_module(0);
}

{   v_export_intrinsic("v_function_hack", voidc_function_hack_intrinsic, 0);
    v_export_intrinsic("v_return",        voidc_function_hack_return_intrinsic, 0);
}


//---------------------------------------------------------------------
//- Function Hack module #2
//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("function_hack_module_N2");

    v_set_module(module);

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}


//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("v_return_if_intrinsic", voidc_intrinsic_t);

    p0 = LLVMGetParam(f, 0);    v_add_variable("visitor",  voidc_visitor_ptr,   p0);
    p1 = LLVMGetParam(f, 1);    v_add_variable("aux",      void_ptr,            p1);
    p2 = LLVMGetParam(f, 2);    v_add_variable("arg_list", v_ast_expr_list_ptr, p2);
}
{
    arg0 = v_alloca(v_ast_opaque_expr_sptr);
    v_initialize(arg0);

    base_arg = v_cast(arg0, v_ast_base_ptr);

    v_list_get_items(arg_list, 0, arg0);

    v_set_result_type(UNREFERENCE_TAG);

    v_ast_accept_visitor(base_arg, visitor);

    v_terminate(arg0);

    cond_a = v_get_result_value();

    builder = v_target_get_builder();

    cond = LLVMBuildIsNotNull(builder, cond_a, "cond");

    cur_b = LLVMGetInsertBlock(builder);
    cur_f = LLVMGetBasicBlockParent(cur_b);

    then_b = LLVMAppendBasicBlock(cur_f, "then_b");
    else_b = LLVMAppendBasicBlock(cur_f, "else_b");

    LLVMBuildCondBr(builder, cond, then_b, else_b);

    LLVMPositionBuilderAtEnd(builder, then_b);

    leave_bv = v_get_variable_value("voidc.internal_branch_target_leave");
    leave_b  = LLVMValueAsBasicBlock(leave_bv);

    LLVMBuildBr(builder, leave_b);

    LLVMPositionBuilderAtEnd(builder, else_b);
}


//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("v_return_if_not_intrinsic", voidc_intrinsic_t);

    p0 = LLVMGetParam(f, 0);    v_add_variable("visitor",  voidc_visitor_ptr,   p0);
    p1 = LLVMGetParam(f, 1);    v_add_variable("aux",      void_ptr,            p1);
    p2 = LLVMGetParam(f, 2);    v_add_variable("arg_list", v_ast_expr_list_ptr, p2);
}
{
    arg0 = v_alloca(v_ast_opaque_expr_sptr);
    v_initialize(arg0);

    base_arg = v_cast(arg0, v_ast_base_ptr);

    v_list_get_items(arg_list, 0, arg0);

    v_set_result_type(UNREFERENCE_TAG);

    v_ast_accept_visitor(base_arg, visitor);

    v_terminate(arg0);

    cond_a = v_get_result_value();

    builder = v_target_get_builder();

    cond = LLVMBuildIsNull(builder, cond_a, "cond");

    cur_b = LLVMGetInsertBlock(builder);
    cur_f = LLVMGetBasicBlockParent(cur_b);

    then_b = LLVMAppendBasicBlock(cur_f, "then_b");
    else_b = LLVMAppendBasicBlock(cur_f, "else_b");

    LLVMBuildCondBr(builder, cond, then_b, else_b);

    LLVMPositionBuilderAtEnd(builder, then_b);

    leave_bv = v_get_variable_value("voidc.internal_branch_target_leave");
    leave_b  = LLVMValueAsBasicBlock(leave_bv);

    LLVMBuildBr(builder, leave_b);

    LLVMPositionBuilderAtEnd(builder, else_b);
}


//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(LLVMValueRef, typ0);
    v_store(int,          typ1);
    v_store(char_ptr,     typ2);
    v_store(v_type_ptr,   typ3);

    ft = v_function_type(LLVMValueRef, typ0, 4, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_add_parameter_name", ft);

    p0 = LLVMGetParam(f, 0);    v_add_variable("fun",  LLVMValueRef, p0);
    p1 = LLVMGetParam(f, 1);    v_add_variable("num",  int,          p1);
    p2 = LLVMGetParam(f, 2);    v_add_variable("name", char_ptr,     p2);
    p3 = LLVMGetParam(f, 3);    v_add_variable("type", v_type_ptr,   p3);
}
{
    p = LLVMGetParam(fun, num);

    LLVMSetValueName(p, name);

    v_add_variable(name, type, p);

    v_return(p);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_unit_load_module_to_jit(module);
    voidc_add_module_to_jit(module);

    LLVMDisposeModule(module);
    v_set_module(0);
}


//---------------------------------------------------------------------
{
    v_export_intrinsic("v_return_if",      v_return_if_intrinsic, 0);
    v_export_intrinsic("v_return_if_not",  v_return_if_not_intrinsic, 0);

    v_make_export_symbol("v_add_parameter_name");
}


