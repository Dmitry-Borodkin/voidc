//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("handlers.void  must be imported into the voidc target only!");

    v_import("level-00");

    v_import("llvm-c/Core.void");

    v_import("function_hack.void");
    v_import("if_then_else.void");
    v_import("arithmetic.void");
    v_import("block.void");
    v_import("loop.void");
    v_import("memory.void");
}

//{ v_import("printf.void"); }

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_loop();
}


//---------------------------------------------------------------------
{   v_add_type("void_ptr", v_pointer_type(void, 0));
}


//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("voidc_handler_intrinsic_module");

    v_set_module(module);       //- Sic!

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}


//---------------------------------------------------------------------
//- v_handle - intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("v_handle_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "aux",  void_ptr);
    v_add_parameter_name(f, 1, "vis",  voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self", v_ast_base_ptr);
}
{
    args = v_ast_expr_call_get_arg_list(v_cast(self, v_ast_expr_ptr));

    arg0 = v_list_get_item(args, 0);


    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(arg0, v_ast_base_ptr), vis);

    ht = v_get_result_type();
    hv = v_get_result_value();

    het  = v_type_refptr_get_element_type(ht);
    het_ = v_type_get_llvm_type(het);

    hts = v_type_struct_get_element_types(het);

    hft  = v_reference(v_getelementptr(hts, 0));
    hft_ = v_type_get_llvm_type(hft);

    hat  = v_reference(v_getelementptr(hts, 1));
    hat_ = v_type_get_llvm_type(hat);


    arg_count = v_cast(v_list_get_size(args), unsigned);

    val_count = v_assign(v_reference(v_alloca(unsigned)), arg_count);

    if (v_icmp(LLVMIntULT, val_count, v_cast(1, unsigned))) v_assign(val_count, 2);

    val = v_malloc(LLVMValueRef, val_count);

    int_ = v_type_get_llvm_type(v_find_type("int"));

    n0 = LLVMConstInt(int_, 0, 0);
    n1 = LLVMConstInt(int_, 1, 0);

    builder = v_target_get_builder();

    v_store(n0, v_getelementptr(val, 0));
    v_store(n0, v_getelementptr(val, 1));

    hfun = LLVMBuildGEP2(builder, het_, hv, val, 2, "");

    hfun = LLVMBuildLoad2(builder, hft_, hfun, "");

    v_store(n1, v_getelementptr(val, 1));

    harg = LLVMBuildGEP2(builder, het_, hv, val, 2, "");

    harg = LLVMBuildLoad2(builder, hat_, harg, "");


    ft = v_type_refptr_get_element_type(hft);

    par_count = v_type_function_get_param_count(ft);
    par_types = v_type_function_get_param_types(ft);

    v_set_result_type(v_load(par_types));
    v_set_result_value(0);

    v_adopt_result(hat, harg);

    v_store(v_get_result_value(), val);


    i = v_assign(v_reference(v_alloca(unsigned)), 1);

    loop
    {
        if (v_icmp(LLVMIntUGE, i, arg_count)) v_break();

        if (v_icmp(LLVMIntULT, i, par_count)) v_set_result_type(v_load(v_getelementptr(par_types, i)));
        else                                  v_set_result_type(UNREFERENCE_TAG);

        v_set_result_value(0);

        argi = v_list_get_item(args, i);

        v_ast_accept_visitor(v_cast(argi, v_ast_base_ptr), vis);

        v_store(v_get_result_value(), v_getelementptr(val, i));

        v_assign(i, v_binop(LLVMAdd, i, 1));
    }

    ft_ = v_type_get_llvm_type(ft);

    vr = LLVMBuildCall2(builder, ft_, hfun, val, arg_count, "");

    tr = v_type_function_get_return_type(ft);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(tr, vr);


    v_free(val);
}


//---------------------------------------------------------------------
//- v_handler_type - ...
//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr);

    v_store(v_type_ptr, typ);

    ft = v_function_type(v_type_ptr, typ, 1, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_handler_type", ft);

    v_add_parameter_name(f, 0, "ft", v_type_ptr);
}
{
    typ0 = v_alloca(v_type_ptr, 2);
    typ1 = v_getelementptr(typ0, 1);

    fun_t = v_pointer_type(ft, 0);
    aux_t = v_load(v_type_function_get_param_types(ft));

    v_store(fun_t, typ0);
    v_store(aux_t, typ1);

    v_return( v_struct_type(typ0, 2, false) );
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_unit_load_module_to_jit(module, true);

    LLVMDisposeModule(module);
    v_set_module(0);
}

{   v_export_intrinsic("v_handle", v_handle_intrinsic, 0);

    v_make_export_symbol("v_handler_type");
}


