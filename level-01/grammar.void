//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("grammar.void  must be imported into the voidc target only!");

    v_import("level-00");

    v_import("llvm-c/Core.void");

    v_import("function_hack.void");
    v_import("if_then_else.void");
    v_import("arithmetic.void");
    v_import("block.void");
    v_import("loop.void");
}

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_loop();
}


//---------------------------------------------------------------------
{   v_add_type("void_ptr", v_pointer_type(void, 0));
    v_add_type("char_ptr", v_pointer_type(char, 0));

    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("q_local_import", q_ref, q("v_local_import"));

    v_add_symbol("q_peg_parser_t",             q_ref, q("v_peg_parser_t"));
    v_add_symbol("q_peg_action_t",             q_ref, q("v_peg_action_t"));
    v_add_symbol("q_peg_argument_t",           q_ref, q("v_peg_argument_t"));
    v_add_symbol("q_peg_class_parser_range_t", q_ref, q("v_peg_class_parser_range_t"));

    v_add_symbol("q_alloca",        q_ref, q("v_alloca"));
    v_add_symbol("q_initialize",    q_ref, q("v_initialize"));
    v_add_symbol("q_terminate",     q_ref, q("v_terminate"));
    v_add_symbol("q_getelementptr", q_ref, q("v_getelementptr"));
    v_add_symbol("q_load",          q_ref, q("v_load"));
    v_add_symbol("q_store",         q_ref, q("v_store"));
    v_add_symbol("q_copy",          q_ref, q("v_copy"));

    v_add_symbol("q_act",   q_ref, q("v.act"));
    v_add_symbol("int_q",   q_ref, q("int"));
    v_add_symbol("q_int",   q_ref, q("v.int"));
    v_add_symbol("q_pr_",   q_ref, q("v.pr_"));
    v_add_symbol("q_pr0",   q_ref, q("v.pr0"));
    v_add_symbol("q_ar0",   q_ref, q("v.ar0"));
    v_add_symbol("q_rn0",   q_ref, q("v.rn0"));
    v_add_symbol("q_rn_0_", q_ref, q("v.rn_0_"));
    v_add_symbol("q_rn_1_", q_ref, q("v.rn_1_"));

    v_add_symbol("leftrec_q", q_ref, q("leftrec"));

    v_add_symbol("q_peg_grammar_set_parser",         q_ref, q("v_peg_grammar_set_parser"));
    v_add_symbol("q_peg_grammar_get_parser",         q_ref, q("v_peg_grammar_get_parser"));
    v_add_symbol("q_peg_grammar_erase_parser",       q_ref, q("v_peg_grammar_erase_parser"));
    v_add_symbol("q_peg_choice_parser_concat",       q_ref, q("v_peg_choice_parser_concat"));
    v_add_symbol("q_peg_sequence_parser_concat",     q_ref, q("v_peg_sequence_parser_concat"));
    v_add_symbol("q_peg_grammar_set_action",         q_ref, q("v_peg_grammar_set_action"));
    v_add_symbol("q_peg_grammar_erase_action",       q_ref, q("v_peg_grammar_erase_action"));
    v_add_symbol("q_peg_grammar_set_value",          q_ref, q("v_peg_grammar_set_value"));
    v_add_symbol("q_peg_grammar_erase_value",        q_ref, q("v_peg_grammar_erase_value"));
    v_add_symbol("q_peg_make_sequence_parser",       q_ref, q("v_peg_make_sequence_parser"));
    v_add_symbol("q_peg_make_choice_parser",         q_ref, q("v_peg_make_choice_parser"));
    v_add_symbol("q_peg_make_catch_variable_parser", q_ref, q("v_peg_make_catch_variable_parser"));
    v_add_symbol("q_peg_make_identifier_parser",     q_ref, q("v_peg_make_identifier_parser"));
    v_add_symbol("q_peg_make_backref_parser",        q_ref, q("v_peg_make_backref_parser"));
    v_add_symbol("q_peg_make_action_parser",         q_ref, q("v_peg_make_action_parser"));
    v_add_symbol("q_peg_make_class_parser",          q_ref, q("v_peg_make_class_parser"));
    v_add_symbol("q_peg_make_literal_parser",        q_ref, q("v_peg_make_literal_parser"));
    v_add_symbol("q_peg_make_character_parser",      q_ref, q("v_peg_make_character_parser"));
    v_add_symbol("q_peg_make_dot_parser",            q_ref, q("v_peg_make_dot_parser"));
    v_add_symbol("q_peg_make_call_action",           q_ref, q("v_peg_make_call_action"));
    v_add_symbol("q_peg_make_return_action",         q_ref, q("v_peg_make_return_action"));
    v_add_symbol("q_peg_make_identifier_argument",   q_ref, q("v_peg_make_identifier_argument"));
    v_add_symbol("q_peg_make_backref_argument",      q_ref, q("v_peg_make_backref_argument"));
    v_add_symbol("q_peg_make_integer_argument",      q_ref, q("v_peg_make_integer_argument"));
    v_add_symbol("q_peg_make_literal_argument",      q_ref, q("v_peg_make_literal_argument"));
    v_add_symbol("q_peg_make_character_argument",    q_ref, q("v_peg_make_character_argument"));
}


//=====================================================================
{   voidc_unit_begin_module("voidc_stmt_grammar_module"); }


//---------------------------------------------------------------------
//- Global variables
//---------------------------------------------------------------------
{
    module = v_get_module();

    v_ast_expr_t_ = v_type_get_llvm_type(v_ast_expr_t);

    gr_arg = LLVMAddGlobal(module, v_ast_expr_t_, "voidc_ast_stmt_grammar_grammar_arg");

    LLVMSetLinkage(gr_arg, LLVMPrivateLinkage);

    gr_arg_u = LLVMGetUndef(v_ast_expr_t_);

    LLVMSetInitializer(gr_arg, gr_arg_u);

    v_ast_stmt_list_t_ = v_type_get_llvm_type(v_ast_stmt_list_t);

    stmt_list = LLVMAddGlobal(module, v_ast_stmt_list_t_, "voidc_ast_stmt_grammar_stmt_list");

    LLVMSetLinkage(stmt_list, LLVMPrivateLinkage);

    stmt_list_u = LLVMGetUndef(v_ast_stmt_list_t_);

    LLVMSetInitializer(stmt_list, stmt_list_u);

    int_ = v_type_get_llvm_type(int);

    pr_count = LLVMAddGlobal(module, int_, "voidc_ast_stmt_grammar_parsers_count");
    pr_num   = LLVMAddGlobal(module, int_, "voidc_ast_stmt_grammar_parser_number");

    LLVMSetLinkage(pr_count, LLVMPrivateLinkage);
    LLVMSetLinkage(pr_num,   LLVMPrivateLinkage);

    int_u = LLVMGetUndef(int_);

    LLVMSetInitializer(pr_count, int_u);
    LLVMSetInitializer(pr_num,   int_u);

    ar_count = LLVMAddGlobal(module, int_, "voidc_ast_stmt_grammar_arguments_count");
    ar_num   = LLVMAddGlobal(module, int_, "voidc_ast_stmt_grammar_argument_number");

    LLVMSetLinkage(ar_count, LLVMPrivateLinkage);
    LLVMSetLinkage(ar_num,   LLVMPrivateLinkage);

    LLVMSetInitializer(ar_count, int_u);
    LLVMSetInitializer(ar_num,   int_u);

    rn_count = LLVMAddGlobal(module, int_, "voidc_ast_stmt_grammar_ranges_count");
    rn_num   = LLVMAddGlobal(module, int_, "voidc_ast_stmt_grammar_range_number");

    LLVMSetLinkage(rn_count, LLVMPrivateLinkage);
    LLVMSetLinkage(rn_num,   LLVMPrivateLinkage);

    LLVMSetInitializer(rn_count, int_u);
    LLVMSetInitializer(rn_num,   int_u);

    v_add_symbol("voidc_ast_stmt_grammar_grammar_arg", v_ast_expr_t,      0);    //- Sic!
    v_add_symbol("voidc_ast_stmt_grammar_stmt_list",   v_ast_stmt_list_t, 0);    //- Sic!

    int_ref = v_reference_type(int, 0);

    v_add_symbol("voidc_ast_stmt_grammar_parsers_count",   int_ref, 0);   //- Sic!
    v_add_symbol("voidc_ast_stmt_grammar_parser_number",   int_ref, 0);   //- Sic!
    v_add_symbol("voidc_ast_stmt_grammar_arguments_count", int_ref, 0);   //- Sic!
    v_add_symbol("voidc_ast_stmt_grammar_argument_number", int_ref, 0);   //- Sic!
    v_add_symbol("voidc_ast_stmt_grammar_ranges_count",    int_ref, 0);   //- Sic!
    v_add_symbol("voidc_ast_stmt_grammar_range_number",    int_ref, 0);   //- Sic!

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}


//---------------------------------------------------------------------
//- Some utility ...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 5);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);
    typ4 = v_getelementptr(typ0, 4);

    v_store(v_ast_stmt_ptr, typ0);
    v_store(v_quark_t,      typ1);
    v_store(v_quark_t,      typ2);
    v_store(v_ast_expr_ptr, typ3);
    v_store(int,            typ4);

    ft = v_function_type(void, typ0, 5, false);

    v_export_symbol_type("v_ast_make_stmt_call", ft);

    //-----------------------------------------------------------------
    f = v_function_hack("v_ast_make_stmt_call", ft);

    v_add_parameter_name(f, 0, "stmt",  v_ast_stmt_ptr);
    v_add_parameter_name(f, 1, "qvar",  v_quark_t);
    v_add_parameter_name(f, 2, "qfun",  v_quark_t);
    v_add_parameter_name(f, 3, "args",  v_ast_expr_ptr);
    v_add_parameter_name(f, 4, "count", int);
}
{
    ar_l = v_alloca(v_ast_expr_list_t);
    v_initialize(ar_l);

    expr = v_alloca(v_ast_expr_t);
    v_initialize(expr);

    v_ast_make_expr_identifier_q(expr, qfun);

    v_make_list(ar_l, args, count);

    v_ast_make_expr_call(expr, expr, ar_l);

    v_ast_make_stmt_q(stmt, qvar, expr);

    v_terminate(expr);
    v_terminate(ar_l);
}


//---------------------------------------------------------------------
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_grammar_parsers_inc", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);
}
{
    number = v_binop(LLVMAdd, voidc_ast_stmt_grammar_parser_number, 1);

    v_assign(voidc_ast_stmt_grammar_parser_number, number);

    gt = v_icmp(LLVMIntUGT, number, voidc_ast_stmt_grammar_parsers_count);

    if (gt) v_assign(voidc_ast_stmt_grammar_parsers_count, number);
}

//---------------------------------------------------------------------
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_grammar_parsers_dec", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);
}
{
    number = v_binop(LLVMSub, voidc_ast_stmt_grammar_parser_number, 1);

    v_assign(voidc_ast_stmt_grammar_parser_number, number);
}


//---------------------------------------------------------------------
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_grammar_arguments_inc", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);
}
{
    number = v_binop(LLVMAdd, voidc_ast_stmt_grammar_argument_number, 1);

    v_assign(voidc_ast_stmt_grammar_argument_number, number);

    gt = v_icmp(LLVMIntUGT, number, voidc_ast_stmt_grammar_arguments_count);

    if (gt) v_assign(voidc_ast_stmt_grammar_arguments_count, number);
}


//---------------------------------------------------------------------
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_grammar_ranges_inc", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);
}
{
    number = v_binop(LLVMAdd, voidc_ast_stmt_grammar_range_number, 1);

    v_assign(voidc_ast_stmt_grammar_range_number, number);

    gt = v_icmp(LLVMIntUGT, number, voidc_ast_stmt_grammar_ranges_count);

    if (gt) v_assign(voidc_ast_stmt_grammar_ranges_count, number);
}


//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 5);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);
    typ4 = v_getelementptr(typ0, 4);

    v_store(v_ast_stmt_list_ptr, typ0);
    v_store(v_quark_t,           typ1);
    v_store(char_ptr,            typ2);
    v_store(int,                 typ3);
    v_store(bool,                typ4);

    ft = v_function_type(void, typ0, 5, false);

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_grammar_stack_init", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "stmt_list", v_ast_stmt_list_ptr);
    v_add_parameter_name(f, 1, "qtype",     v_quark_t);
    v_add_parameter_name(f, 2, "prefix",    char_ptr);
    v_add_parameter_name(f, 3, "size",      int);
    v_add_parameter_name(f, 4, "do_init",   bool);
}
{
    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);

    v_ast_make_expr_identifier_q(arg0, qtype);

    num = v_cast(size, intptr_t);

    v_ast_make_expr_integer(arg1, num);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    v_std_string_set(sstr, prefix);

    v_std_string_append_number(sstr, 0);

    str = v_std_string_get(sstr);

    qstr = v_quark_from_string(str);


    v_ast_make_stmt_call(stmt, qstr, q_alloca, arg0, 2);

    v_list_append(stmt_list, stmt_list, stmt);


    v_ast_make_expr_identifier_q(arg0, qstr);

    if (do_init)
    {
        v_ast_make_stmt_call(stmt, 0, q_initialize, arg0, 2);

        v_list_append(stmt_list, stmt_list, stmt);
    }


    n_v = v_alloca(intptr_t);

    v_store(1, n_v);

    n1 = v_cast(1, intptr_t);

    loop
    {
        n = v_load(n_v);

        f = v_icmp(LLVMIntUGE, n, num);

        if (f)  v_break();


        v_ast_make_expr_integer(arg1, n);


        v_std_string_set(sstr, prefix);

        v_std_string_append_number(sstr, n);

        str = v_std_string_get(sstr);

        v_ast_make_stmt_call(stmt, v_quark_from_string(str), q_getelementptr, arg0, 2);

        v_list_append(stmt_list, stmt_list, stmt);


        n = v_binop(LLVMAdd, n, n1);

        v_store(n, n_v);
    }


    v_terminate(stmt);
    v_terminate(sstr);
    v_terminate(arg0, 2);
}


//---------------------------------------------------------------------
//- mk_stmt_grammar_init - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_stmt_grammar_init_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    gr_name = v_std_any_get_pointer(v_std_string_t, any0);

    gr_str = v_std_string_get(gr_name);


    v_initialize(voidc_ast_stmt_grammar_grammar_arg);

    v_ast_make_expr_identifier(voidc_ast_stmt_grammar_grammar_arg, gr_str);


    v_initialize(voidc_ast_stmt_grammar_stmt_list);

    v_make_list_nil(voidc_ast_stmt_grammar_stmt_list);


    v_assign(voidc_ast_stmt_grammar_parsers_count  , 2);     //- Sic!
    v_assign(voidc_ast_stmt_grammar_parser_number  , 0);
    v_assign(voidc_ast_stmt_grammar_arguments_count, 1);     //- ...
    v_assign(voidc_ast_stmt_grammar_argument_number, 0);
    v_assign(voidc_ast_stmt_grammar_ranges_count   , 1);     //- ...
    v_assign(voidc_ast_stmt_grammar_range_number   , 0);


    v_std_any_set_value(ret, 1);
}

//---------------------------------------------------------------------
//- mk_stmt_grammar - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_stmt_grammar_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    gr_stmt_list = v_alloca(v_ast_stmt_list_t);
    v_initialize(gr_stmt_list);

    v_make_list_nil(gr_stmt_list);


    //-----------------------------------------------------------------
    //- ...

    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    //-----------------------------------------------------------------
    //- Local imports

    v_ast_make_expr_string(arg0, "level-00/voidc_util.void");

    v_ast_make_stmt_call(stmt, 0, q_local_import, arg0, 1);

    v_list_append(gr_stmt_list, gr_stmt_list, stmt);

    v_ast_make_expr_string(arg0, "level-00/vpeg_parser.void");

    v_ast_make_stmt_call(stmt, 0, q_local_import, arg0, 1);

    v_list_append(gr_stmt_list, gr_stmt_list, stmt);

    v_ast_make_expr_string(arg0, "level-00/vpeg_grammar.void");

    v_ast_make_stmt_call(stmt, 0, q_local_import, arg0, 1);

    v_list_append(gr_stmt_list, gr_stmt_list, stmt);


    //-----------------------------------------------------------------
    //- Parsers "stack"

    voidc_ast_stmt_grammar_stack_init(gr_stmt_list,
                                      q_peg_parser_t,
                                      "v.pr",
                                      voidc_ast_stmt_grammar_parsers_count,
                                      true
                                     );


    //-----------------------------------------------------------------
    //- Arguments "stack"

    voidc_ast_stmt_grammar_stack_init(gr_stmt_list,
                                      q_peg_argument_t,
                                      "v.ar",
                                      voidc_ast_stmt_grammar_arguments_count,
                                      true
                                     );


    //-----------------------------------------------------------------
    //- Ranges "stack"

    voidc_ast_stmt_grammar_stack_init(gr_stmt_list,
                                      q_peg_class_parser_range_t,
                                      "v.rn",
                                      voidc_ast_stmt_grammar_ranges_count,
                                      false
                                     );


    //-----------------------------------------------------------------
    //- ...

    v_ast_make_expr_identifier_q(arg0, q_peg_action_t);

    v_ast_make_stmt_call(stmt, q_act, q_alloca, arg0, 1);

    v_list_append(gr_stmt_list, gr_stmt_list, stmt);


    v_ast_make_expr_identifier_q(arg0, q_act);

    v_ast_make_stmt_call(stmt, 0, q_initialize, arg0, 1);

    v_list_append(gr_stmt_list, gr_stmt_list, stmt);


    //-----------------------------------------------------------------
    //- ...

    v_ast_make_expr_identifier_q(arg0, int_q);

    v_ast_make_stmt_call(stmt, q_int, q_alloca, arg0, 1);

    v_list_append(gr_stmt_list, gr_stmt_list, stmt);


    //-----------------------------------------------------------------
    //- ...

    v_ast_make_stmt_block(stmt, voidc_ast_stmt_grammar_stmt_list, 0);

    v_list_append(gr_stmt_list, gr_stmt_list, stmt);


    //-----------------------------------------------------------------
    //- ...

    v_ast_make_expr_identifier_q(arg0, q_act);

    v_ast_make_stmt_call(stmt, 0, q_terminate, arg0, 1);

    v_list_append(gr_stmt_list, gr_stmt_list, stmt);


    //-----------------------------------------------------------------
    //- ...

    pr_num = v_cast(voidc_ast_stmt_grammar_parsers_count,   intptr_t);
    ar_num = v_cast(voidc_ast_stmt_grammar_arguments_count, intptr_t);

    //-----------------------------------------------------------------
    //- Arguments "stack" clear

    v_ast_make_expr_identifier_q(arg0, q_ar0);
    v_ast_make_expr_integer(arg1, ar_num);

    v_ast_make_stmt_call(stmt, 0, q_terminate, arg0, 2);

    v_list_append(gr_stmt_list, gr_stmt_list, stmt);

    //-----------------------------------------------------------------
    //- Parsers "stack" clear

    v_ast_make_expr_identifier_q(arg0, q_pr0);
    v_ast_make_expr_integer(arg1, pr_num);

    v_ast_make_stmt_call(stmt, 0, q_terminate, arg0, 2);

    v_list_append(gr_stmt_list, gr_stmt_list, stmt);


    //-----------------------------------------------------------------
    //- ...

    v_ast_make_stmt_block(stmt, gr_stmt_list, 0);

    v_std_any_set_pointer(ret, stmt);


    //-----------------------------------------------------------------
    //- ...

    v_terminate(stmt);
    v_terminate(arg0, 2);
    v_terminate(gr_stmt_list);

    v_terminate(voidc_ast_stmt_grammar_stmt_list);
    v_terminate(voidc_ast_stmt_grammar_grammar_arg);
}


//---------------------------------------------------------------------
//- mk_gr_stmt_parser - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_gr_stmt_parser_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    any1 = v_getelementptr(any0, 1);

    pr_sstr = v_std_any_get_pointer(v_std_string_t, any0);

    pr_str = v_std_string_get(pr_sstr);

    as_sstr = v_std_any_get_pointer(v_std_string_t, any1);

    as_0 = v_std_string_get(as_sstr);
    as_1 = v_getelementptr(as_0, 1);


    arg0 = v_alloca(v_ast_expr_t, 5);
    v_initialize(arg0, 5);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);
    arg3 = v_getelementptr(arg0, 3);
    arg4 = v_getelementptr(arg0, 4);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);

    stmt_list = v_alloca(v_ast_stmt_list_t);
    v_initialize(stmt_list);

    v_copy(stmt_list, voidc_ast_stmt_grammar_stmt_list);


    c1 = v_load(as_1);

    cz = v_cast(0, char);

    is_z = v_icmp(LLVMIntEQ, c1, cz);

    if (is_z)       //- Straight assignment: "="
    {
        v_copy(arg0, voidc_ast_stmt_grammar_grammar_arg);
        v_copy(arg1, voidc_ast_stmt_grammar_grammar_arg);

        v_ast_make_expr_string(arg2, pr_str);


        if (voidc_ast_stmt_grammar_parser_number)   //- Assign parser from v.pr0
        {
            //- assert(pr_num == 1);

            v_ast_make_expr_identifier_q(arg3, q_pr0);      //- Sic!

            v_ast_make_expr_integer(arg4, 0);

            v_ast_make_stmt_call(stmt, 0, q_peg_grammar_set_parser, arg0, 5);
        }
        else            //- Erase parser
        {
            v_ast_make_stmt_call(stmt, 0, q_peg_grammar_erase_parser, arg0, 3);
        }

        v_list_append(stmt_list, stmt_list, stmt);
    }
    else
    {
        v_copy(arg0, voidc_ast_stmt_grammar_grammar_arg);

        v_ast_make_expr_string(arg1, pr_str);

        v_ast_make_expr_identifier_q(arg2, q_int);      //- "leftrec" !

        v_ast_make_stmt_call(stmt, q_pr_, q_peg_grammar_get_parser, arg0, 3);

        v_list_append(stmt_list, stmt_list, stmt);


        v_ast_make_expr_identifier_q(arg0, q_pr0);      //- Target


        c0 = v_load(as_0);

        ce = v_cast('=', char);

        is_e = v_icmp(LLVMIntEQ, c0, ce);

        c_k = v_alloca(char);       //- To obtain '*' or '+'

        if (is_e)       //- Append to back
        {
            v_store(c1, c_k);

            v_ast_make_expr_identifier_q(arg1, q_pr_);      //- From grammar
            v_ast_make_expr_identifier_q(arg2, q_pr0);      //- Built
        }
        else            //- Append to front
        {
            v_store(c0, c_k);

            v_ast_make_expr_identifier_q(arg1, q_pr0);      //- Built
            v_ast_make_expr_identifier_q(arg2, q_pr_);      //- From grammar
        }


        k = v_load(c_k);

        cp = v_cast('+', char);

        is_p = v_icmp(LLVMIntEQ, k, cp);

        if (is_p) v_ast_make_stmt_call(stmt, 0, q_peg_choice_parser_concat,   arg0, 3);
        else      v_ast_make_stmt_call(stmt, 0, q_peg_sequence_parser_concat, arg0, 3);

        v_list_append(stmt_list, stmt_list, stmt);


        v_ast_make_expr_identifier_q(arg0, q_int);

        v_ast_make_stmt_call(stmt, leftrec_q, q_load, arg0, 1);

        v_list_append(stmt_list, stmt_list, stmt);


        v_copy(arg0, voidc_ast_stmt_grammar_grammar_arg);
        v_copy(arg1, voidc_ast_stmt_grammar_grammar_arg);

        v_ast_make_expr_string(arg2, pr_str);

        v_ast_make_expr_identifier_q(arg3, q_pr0);          //- Sic!

        v_ast_make_expr_identifier_q(arg4, leftrec_q);      //- "leftrec" !

        v_ast_make_stmt_call(stmt, 0, q_peg_grammar_set_parser, arg0, 5);

        v_list_append(stmt_list, stmt_list, stmt);
    }


    v_copy(voidc_ast_stmt_grammar_stmt_list, stmt_list);

    v_assign(voidc_ast_stmt_grammar_parser_number, 0);

    v_std_any_set_value(ret, 1);


    v_terminate(stmt_list);
    v_terminate(stmt);
    v_terminate(arg0, 5);
}


//---------------------------------------------------------------------
//- mk_gr_stmt_parser_leftrec - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_gr_stmt_parser_leftrec_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    pr_sstr = v_std_any_get_pointer(v_std_string_t, any0);

    pr_str = v_std_string_get(pr_sstr);


    arg0 = v_alloca(v_ast_expr_t, 5);
    v_initialize(arg0, 5);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);
    arg3 = v_getelementptr(arg0, 3);
    arg4 = v_getelementptr(arg0, 4);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    v_copy(arg0, voidc_ast_stmt_grammar_grammar_arg);
    v_copy(arg1, voidc_ast_stmt_grammar_grammar_arg);

    v_ast_make_expr_string(arg2, pr_str);

    v_ast_make_expr_integer(arg3, 0);        //- "leftrec" ?

    v_ast_make_stmt_call(stmt, q_pr_, q_peg_grammar_get_parser, arg1, 3);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);


    v_ast_make_expr_identifier_q(arg3, q_pr_);

    v_ast_make_expr_integer(arg4, 1);        //- "leftrec" !

    v_ast_make_stmt_call(stmt, 0, q_peg_grammar_set_parser, arg0, 5);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);


    v_std_any_set_value(ret, 1);

    v_terminate(stmt);
    v_terminate(arg0, 5);
}


//---------------------------------------------------------------------
//- mk_gr_stmt_action - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_gr_stmt_action_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    arg0 = v_alloca(v_ast_expr_t, 5);
    v_initialize(arg0, 5);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);
    arg3 = v_getelementptr(arg0, 3);
    arg4 = v_getelementptr(arg0, 4);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    v_copy(arg0, voidc_ast_stmt_grammar_grammar_arg);
    v_copy(arg1, voidc_ast_stmt_grammar_grammar_arg);

    act_sstr = v_std_any_get_pointer(v_std_string_t, any0);

    act_str = v_std_string_get(act_sstr);

    v_ast_make_expr_string(arg2, act_str);


    any1 = v_getelementptr(any0, 1);

    fun_sstr = v_std_any_get_pointer(v_std_string_t, any1);

    if (fun_sstr)
    {
        v_ast_make_expr_identifier(arg3, v_std_string_get(fun_sstr));

        any2 = v_getelementptr(any0, 2);

        aux_sstr = v_std_any_get_pointer(v_std_string_t, any2);

        if (aux_sstr)   v_ast_make_expr_identifier(arg4, v_std_string_get(aux_sstr));
        else            v_ast_make_expr_integer(arg4, 0);

        v_ast_make_stmt_call(stmt, 0, q_peg_grammar_set_action, arg0, 5);
    }
    else
    {
        v_ast_make_stmt_call(stmt, 0, q_peg_grammar_erase_action, arg0, 3);
    }

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);


    v_std_any_set_value(ret, 1);


    v_terminate(stmt);
    v_terminate(arg0, 5);
}


//---------------------------------------------------------------------
//- mk_gr_stmt_value - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_gr_stmt_value_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    arg0 = v_alloca(v_ast_expr_t, 4);
    v_initialize(arg0, 4);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);
    arg3 = v_getelementptr(arg0, 3);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    v_copy(arg0, voidc_ast_stmt_grammar_grammar_arg);
    v_copy(arg1, voidc_ast_stmt_grammar_grammar_arg);

    grv_sstr = v_std_any_get_pointer(v_std_string_t, any0);

    grv_str = v_std_string_get(grv_sstr);

    v_ast_make_expr_string(arg2, grv_str);


    any1 = v_getelementptr(any0, 1);

    exv_sstr = v_std_any_get_pointer(v_std_string_t, any1);

    if (exv_sstr)
    {
        exv_str = v_std_string_get(exv_sstr);

        v_ast_make_expr_identifier(arg3, exv_str);

        v_ast_make_stmt_call(stmt, 0, q_peg_grammar_set_value, arg0, 4);
    }
    else
    {
        v_ast_make_stmt_call(stmt, 0, q_peg_grammar_erase_value, arg0, 3);
    }

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);


    v_std_any_set_value(ret, 1);


    v_terminate(stmt);
    v_terminate(arg0, 4);
}


//---------------------------------------------------------------------
//- mk_pr_special - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_special_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    //- assert(voidc_ast_stmt_grammar_parser_number == 0);

    arg_sstr = v_std_any_get_pointer(v_std_string_t, any0);

    arg_str = v_std_string_get(arg_sstr);


    p1 = v_getelementptr(arg_str, 1);
    c1 = v_load(p1);

    if (c1)     //- "(/)" or "()"
    {
        arg0 = v_alloca(v_ast_expr_t, 3);
        v_initialize(arg0, 3);

        arg1 = v_getelementptr(arg0, 1);
        arg2 = v_getelementptr(arg0, 2);

        stmt = v_alloca(v_ast_stmt_t);
        v_initialize(stmt);

        v_ast_make_expr_identifier_q(arg0, q_pr0);

        v_ast_make_expr_integer(arg1, 0);
        v_ast_make_expr_integer(arg2, 0);


        c_rpar = v_cast(')', char);

        f = v_icmp(LLVMIntEQ, c1, c_rpar);

        if (f)      //- "()"
        {
            v_ast_make_stmt_call(stmt, 0, q_peg_make_sequence_parser, arg0, 3);
        }
        else        //- "(/)"
        {
            v_ast_make_stmt_call(stmt, 0, q_peg_make_choice_parser, arg0, 3);
        }

        v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

        voidc_ast_stmt_grammar_parsers_inc();


        v_terminate(stmt);
        v_terminate(arg0, 3);
    }
//  else  {}    //- "0"


    v_std_any_set_value(ret, 1);
}

//---------------------------------------------------------------------
//- mk_pr_choice - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_choice_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    arg0 = v_alloca(v_ast_expr_t, 3);
    v_initialize(arg0, 3);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    pr_num = v_cast(voidc_ast_stmt_grammar_parser_number, intptr_t);

    n1 = v_cast(1, intptr_t);

    pr_num = v_binop(LLVMSub, pr_num, n1);          //- pr_int - 1


    pr_sstr = v_alloca(v_std_string_t);
    v_initialize(pr_sstr);

    v_std_string_set(pr_sstr, "v.pr");

    v_std_string_append_number(pr_sstr, pr_num);

    pr_str = v_std_string_get(pr_sstr);

    v_ast_make_expr_identifier(arg2, pr_str);


    pr_num = v_binop(LLVMSub, pr_num, n1);          //- pr_int - 2

    v_std_string_set(pr_sstr, "v.pr");

    v_std_string_append_number(pr_sstr, pr_num);

    pr_str = v_std_string_get(pr_sstr);

    v_ast_make_expr_identifier(arg0, pr_str);
    v_ast_make_expr_identifier(arg1, pr_str);


    v_ast_make_stmt_call(stmt, 0, q_peg_choice_parser_concat, arg0, 3);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_parsers_dec();


    v_std_any_set_value(ret, 1);


    v_terminate(pr_sstr);
    v_terminate(stmt);
    v_terminate(arg0, 3);
}

//---------------------------------------------------------------------
//- mk_pr_sequence - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_sequence_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    arg0 = v_alloca(v_ast_expr_t, 3);
    v_initialize(arg0, 3);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    pr_num = v_cast(voidc_ast_stmt_grammar_parser_number, intptr_t);

    n1 = v_cast(1, intptr_t);

    pr_num = v_binop(LLVMSub, pr_num, n1);          //- pr_int - 1


    pr_sstr = v_alloca(v_std_string_t);
    v_initialize(pr_sstr);

    v_std_string_set(pr_sstr, "v.pr");

    v_std_string_append_number(pr_sstr, pr_num);

    pr_str = v_std_string_get(pr_sstr);

    v_ast_make_expr_identifier(arg2, pr_str);


    pr_num = v_binop(LLVMSub, pr_num, n1);          //- pr_int - 2

    v_std_string_set(pr_sstr, "v.pr");

    v_std_string_append_number(pr_sstr, pr_num);

    pr_str = v_std_string_get(pr_sstr);

    v_ast_make_expr_identifier(arg0, pr_str);
    v_ast_make_expr_identifier(arg1, pr_str);


    v_ast_make_stmt_call(stmt, 0, q_peg_sequence_parser_concat, arg0, 3);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_parsers_dec();


    v_std_any_set_value(ret, 1);


    v_terminate(pr_sstr);
    v_terminate(stmt);
    v_terminate(arg0, 3);
}

//---------------------------------------------------------------------
//- mk_pr_catch_var - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_catch_var_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    arg_sstr = v_std_any_get_pointer(v_std_string_t, any0);

    arg_str = v_std_string_get(arg_sstr);


    arg0 = v_alloca(v_ast_expr_t, 3);
    v_initialize(arg0, 3);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    pr_num = v_cast(voidc_ast_stmt_grammar_parser_number, intptr_t);

    n1 = v_cast(1, intptr_t);

    pr_num = v_binop(LLVMSub, pr_num, n1);          //- pr_int - 1


    pr_sstr = v_alloca(v_std_string_t);
    v_initialize(pr_sstr);

    v_std_string_set(pr_sstr, "v.pr");

    v_std_string_append_number(pr_sstr, pr_num);

    pr_str = v_std_string_get(pr_sstr);

    v_ast_make_expr_identifier(arg0, pr_str);
    v_ast_make_expr_string(arg1, arg_str);
    v_ast_make_expr_identifier(arg2, pr_str);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_catch_variable_parser, arg0, 3);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);


    v_std_any_set_value(ret, 1);


    v_terminate(pr_sstr);
    v_terminate(stmt);
    v_terminate(arg0, 3);
}


//---------------------------------------------------------------------
//- voidc_make_parser_unary - grammar action helper
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr);

    v_store(char_ptr, typ0);

    ft = v_function_type(void, typ0, 1, false);

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_make_parser_unary", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "fun", char_ptr);
}
{
    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    pr_num = v_cast(voidc_ast_stmt_grammar_parser_number, intptr_t);

    n1 = v_cast(1, intptr_t);

    pr_num = v_binop(LLVMSub, pr_num, n1);          //- pr_int - 1


    pr_sstr = v_alloca(v_std_string_t);
    v_initialize(pr_sstr);

    v_std_string_set(pr_sstr, "v.pr");

    v_std_string_append_number(pr_sstr, pr_num);

    pr_str = v_std_string_get(pr_sstr);

    v_ast_make_expr_identifier(arg0, pr_str);
    v_ast_make_expr_identifier(arg1, pr_str);

    v_ast_make_stmt_call(stmt, 0, v_quark_from_string(fun), arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);


    v_terminate(pr_sstr);
    v_terminate(stmt);
    v_terminate(arg0, 2);
}

//---------------------------------------------------------------------
//- mk_pr_and - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_and_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    voidc_make_parser_unary("v_peg_make_and_parser");

    v_std_any_set_value(ret, 1);
}

//---------------------------------------------------------------------
//- mk_pr_not - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_not_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    voidc_make_parser_unary("v_peg_make_not_parser");

    v_std_any_set_value(ret, 1);
}

//---------------------------------------------------------------------
//- mk_pr_star - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_star_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    voidc_make_parser_unary("v_peg_make_star_parser");

    v_std_any_set_value(ret, 1);
}

//---------------------------------------------------------------------
//- mk_pr_plus - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_plus_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    voidc_make_parser_unary("v_peg_make_plus_parser");

    v_std_any_set_value(ret, 1);
}

//---------------------------------------------------------------------
//- mk_pr_question - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_question_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    voidc_make_parser_unary("v_peg_make_question_parser");

    v_std_any_set_value(ret, 1);
}

//---------------------------------------------------------------------
//- mk_pr_identifier - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_identifier_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    id_sstr = v_std_any_get_pointer(v_std_string_t, any0);

    id_str = v_std_string_get(id_sstr);


    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    pr_num = v_cast(voidc_ast_stmt_grammar_parser_number, intptr_t);

    pr_sstr = v_alloca(v_std_string_t);
    v_initialize(pr_sstr);

    v_std_string_set(pr_sstr, "v.pr");

    v_std_string_append_number(pr_sstr, pr_num);

    pr_str = v_std_string_get(pr_sstr);

    v_ast_make_expr_identifier(arg0, pr_str);

    v_ast_make_expr_string(arg1, id_str);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_identifier_parser, arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_parsers_inc();


    v_std_any_set_value(ret, 1);


    v_terminate(pr_sstr);
    v_terminate(stmt);
    v_terminate(arg0, 2);
}

//---------------------------------------------------------------------
//- mk_pr_backref - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_backref_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    br_num = v_std_any_get_value(size_t, any0);     //- size_t == uintptr_t ...

    br_num = v_cast(br_num, intptr_t);


    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    pr_num = v_cast(voidc_ast_stmt_grammar_parser_number, intptr_t);

    pr_sstr = v_alloca(v_std_string_t);
    v_initialize(pr_sstr);

    v_std_string_set(pr_sstr, "v.pr");

    v_std_string_append_number(pr_sstr, pr_num);

    pr_str = v_std_string_get(pr_sstr);

    v_ast_make_expr_identifier(arg0, pr_str);

    v_ast_make_expr_integer(arg1, br_num);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_backref_parser, arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_parsers_inc();


    v_std_any_set_value(ret, 1);


    v_terminate(pr_sstr);
    v_terminate(stmt);
    v_terminate(arg0, 2);
}

//---------------------------------------------------------------------
//- mk_pr_catch_str - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_catch_str_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    voidc_make_parser_unary("v_peg_make_catch_string_parser");

    v_std_any_set_value(ret, 1);
}

//---------------------------------------------------------------------
//- mk_pr_action - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_action_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    pr_num = v_cast(voidc_ast_stmt_grammar_parser_number, intptr_t);

    pr_sstr = v_alloca(v_std_string_t);
    v_initialize(pr_sstr);

    v_std_string_set(pr_sstr, "v.pr");

    v_std_string_append_number(pr_sstr, pr_num);

    pr_str = v_std_string_get(pr_sstr);

    v_ast_make_expr_identifier(arg0, pr_str);

    v_ast_make_expr_identifier_q(arg1, q_act);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_action_parser, arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_parsers_inc();


    v_std_any_set_value(ret, 1);


    v_terminate(pr_sstr);
    v_terminate(stmt);
    v_terminate(arg0, 2);
}

//---------------------------------------------------------------------
//- mk_pr_class - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_class_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    rn_num = v_cast(voidc_ast_stmt_grammar_range_number,  intptr_t);
    pr_num = v_cast(voidc_ast_stmt_grammar_parser_number, intptr_t);


    arg0 = v_alloca(v_ast_expr_t, 3);
    v_initialize(arg0, 3);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);

    v_std_string_set(sstr, "v.pr");

    v_std_string_append_number(sstr, pr_num);

    str = v_std_string_get(sstr);

    v_ast_make_expr_identifier(arg0, str);
    v_ast_make_expr_identifier_q(arg1, q_rn0);

    v_ast_make_expr_integer(arg2, rn_num);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_class_parser, arg0, 3);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_parsers_inc();

    v_assign(voidc_ast_stmt_grammar_range_number, 0);


    v_std_any_set_value(ret, 1);


    v_terminate(sstr);
    v_terminate(stmt);
    v_terminate(arg0, 3);
}

//---------------------------------------------------------------------
//- mk_pr_literal - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_literal_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    lit_sstr = v_std_any_get_pointer(v_std_string_t, any0);

    lit_str = v_std_string_get(lit_sstr);


    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    pr_num = v_cast(voidc_ast_stmt_grammar_parser_number, intptr_t);

    pr_sstr = v_alloca(v_std_string_t);
    v_initialize(pr_sstr);

    v_std_string_set(pr_sstr, "v.pr");

    v_std_string_append_number(pr_sstr, pr_num);

    pr_str = v_std_string_get(pr_sstr);

    v_ast_make_expr_identifier(arg0, pr_str);

    v_ast_make_expr_string(arg1, lit_str);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_literal_parser, arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_parsers_inc();


    v_std_any_set_value(ret, 1);


    v_terminate(pr_sstr);
    v_terminate(stmt);
    v_terminate(arg0, 2);
}

//---------------------------------------------------------------------
//- mk_pr_char - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_char_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    ch = v_std_any_get_value(char32_t, any0);


    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    pr_num = v_cast(voidc_ast_stmt_grammar_parser_number, intptr_t);

    pr_sstr = v_alloca(v_std_string_t);
    v_initialize(pr_sstr);

    v_std_string_set(pr_sstr, "v.pr");

    v_std_string_append_number(pr_sstr, pr_num);

    pr_str = v_std_string_get(pr_sstr);

    v_ast_make_expr_identifier(arg0, pr_str);

    v_ast_make_expr_char(arg1, ch);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_character_parser, arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_parsers_inc();


    v_std_any_set_value(ret, 1);


    v_terminate(pr_sstr);
    v_terminate(stmt);
    v_terminate(arg0, 2);
}

//---------------------------------------------------------------------
//- mk_pr_dot - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_dot_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    arg0 = v_alloca(v_ast_expr_t);
    v_initialize(arg0);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    pr_num = v_cast(voidc_ast_stmt_grammar_parser_number, intptr_t);

    pr_sstr = v_alloca(v_std_string_t);
    v_initialize(pr_sstr);

    v_std_string_set(pr_sstr, "v.pr");

    v_std_string_append_number(pr_sstr, pr_num);

    pr_str = v_std_string_get(pr_sstr);

    v_ast_make_expr_identifier(arg0, pr_str);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_dot_parser, arg0, 1);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_parsers_inc();


    v_std_any_set_value(ret, 1);


    v_terminate(pr_sstr);
    v_terminate(stmt);
    v_terminate(arg0);
}

//---------------------------------------------------------------------
//- mk_pr_range - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_range_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    arg0 = v_alloca(v_ast_expr_t, 3);
    v_initialize(arg0, 3);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    rn_num = v_cast(voidc_ast_stmt_grammar_range_number, intptr_t);

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);

    v_std_string_set(sstr, "v.rn");

    v_std_string_append_number(sstr, rn_num);

    str = v_std_string_get(sstr);

    v_ast_make_expr_identifier(arg0, str);

    v_ast_make_expr_integer(arg1, 0);
    v_ast_make_expr_integer(arg2, 0);

    v_ast_make_stmt_call(stmt, q_rn_0_, q_getelementptr, arg0, 3);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);


    v_ast_make_expr_integer(arg2, 1);

    v_ast_make_stmt_call(stmt, q_rn_1_, q_getelementptr, arg0, 3);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);


    c0 = v_std_any_get_value(char32_t, any0);

    v_ast_make_expr_char(arg0, c0);

    v_ast_make_expr_identifier_q(arg1, q_rn_0_);

    v_ast_make_stmt_call(stmt, 0, q_store, arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);


    any1 = v_getelementptr(any0, 1);

    c1 = v_std_any_get_value(char32_t, any1);

    v_ast_make_expr_char(arg0, c1);

    v_ast_make_expr_identifier_q(arg1, q_rn_1_);

    v_ast_make_stmt_call(stmt, 0, q_store, arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);


    voidc_ast_stmt_grammar_ranges_inc();


    v_std_any_set_value(ret, 1);


    v_terminate(sstr);
    v_terminate(stmt);
    v_terminate(arg0, 3);
}

//---------------------------------------------------------------------
//- mk_pr_action_call - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_action_call_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    fun_sstr = v_std_any_get_pointer(v_std_string_t, any0);

    fun_str = v_std_string_get(fun_sstr);


    ar_num = v_cast(voidc_ast_stmt_grammar_argument_number, intptr_t);


    arg0 = v_alloca(v_ast_expr_t, 4);
    v_initialize(arg0, 4);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);
    arg3 = v_getelementptr(arg0, 3);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    v_ast_make_expr_identifier_q(arg0, q_act);

    v_ast_make_expr_string(arg1, fun_str);

    v_ast_make_expr_identifier_q(arg2, q_ar0);

    v_ast_make_expr_integer(arg3, ar_num);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_call_action, arg0, 4);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    v_assign(voidc_ast_stmt_grammar_argument_number, 0);


    v_std_any_set_value(ret, 1);


    v_terminate(stmt);
    v_terminate(arg0, 4);
}

//---------------------------------------------------------------------
//- mk_pr_action_return - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_action_return_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    v_ast_make_expr_identifier_q(arg0, q_act);
    v_ast_make_expr_identifier_q(arg1, q_ar0);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_return_action, arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    v_assign(voidc_ast_stmt_grammar_argument_number, 0);


    v_std_any_set_value(ret, 1);


    v_terminate(stmt);
    v_terminate(arg0, 2);
}


//---------------------------------------------------------------------
//- mk_pr_arg_identifier - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_arg_identifier_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    id_sstr = v_std_any_get_pointer(v_std_string_t, any0);

    id_str = v_std_string_get(id_sstr);


    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    ar_num = v_cast(voidc_ast_stmt_grammar_argument_number, intptr_t);

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);

    v_std_string_set(sstr, "v.ar");

    v_std_string_append_number(sstr, ar_num);

    str = v_std_string_get(sstr);

    v_ast_make_expr_identifier(arg0, str);

    v_ast_make_expr_string(arg1, id_str);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_identifier_argument, arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_arguments_inc();


    v_std_any_set_value(ret, 1);


    v_terminate(sstr);
    v_terminate(stmt);
    v_terminate(arg0, 2);
}

//---------------------------------------------------------------------
//- mk_pr_arg_backref - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_arg_backref_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    br_num = v_std_any_get_value(size_t, any0);     //- size_t == uintptr_t ...

    br_num = v_cast(br_num, intptr_t);


    any1 = v_getelementptr(any0, 1);

    bk_ptr = v_std_any_get_pointer(char32_t, any1);

    bk_v = v_alloca(int);

    if (bk_ptr)
    {
        bk_char32 = v_load(bk_ptr);

        f = v_icmp(LLVMIntEQ, bk_char32, 's');

        if (f)  v_store(v_peg_backref_argument_kind_start, bk_v);
        else    v_store(v_peg_backref_argument_kind_end,   bk_v);
    }
    else
    {
        v_store(v_peg_backref_argument_kind_string, bk_v);
    }

    bk_int = v_load(bk_v);

    bk_num = v_cast(bk_int, intptr_t);


    arg0 = v_alloca(v_ast_expr_t, 3);
    v_initialize(arg0, 3);

    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    ar_num = v_cast(voidc_ast_stmt_grammar_argument_number, intptr_t);

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);

    v_std_string_set(sstr, "v.ar");

    v_std_string_append_number(sstr, ar_num);

    str = v_std_string_get(sstr);

    v_ast_make_expr_identifier(arg0, str);

    v_ast_make_expr_integer(arg1, br_num);
    v_ast_make_expr_integer(arg2, bk_num);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_backref_argument, arg0, 3);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_arguments_inc();


    v_std_any_set_value(ret, 1);


    v_terminate(sstr);
    v_terminate(stmt);
    v_terminate(arg0, 3);
}

//---------------------------------------------------------------------
//- mk_pr_arg_integer - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_arg_integer_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    num = v_std_any_get_value(intptr_t, any0);


    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    ar_num = v_cast(voidc_ast_stmt_grammar_argument_number, intptr_t);

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);

    v_std_string_set(sstr, "v.ar");

    v_std_string_append_number(sstr, ar_num);

    str = v_std_string_get(sstr);

    v_ast_make_expr_identifier(arg0, str);

    v_ast_make_expr_integer(arg1, num);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_integer_argument, arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_arguments_inc();


    v_std_any_set_value(ret, 1);


    v_terminate(sstr);
    v_terminate(stmt);
    v_terminate(arg0, 2);
}

//---------------------------------------------------------------------
//- mk_pr_arg_string - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_arg_string_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    lit_sstr = v_std_any_get_pointer(v_std_string_t, any0);

    lit_str = v_std_string_get(lit_sstr);


    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    ar_num = v_cast(voidc_ast_stmt_grammar_argument_number, intptr_t);

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);

    v_std_string_set(sstr, "v.ar");

    v_std_string_append_number(sstr, ar_num);

    str = v_std_string_get(sstr);

    v_ast_make_expr_identifier(arg0, str);

    v_ast_make_expr_string(arg1, lit_str);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_literal_argument, arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_arguments_inc();


    v_std_any_set_value(ret, 1);


    v_terminate(sstr);
    v_terminate(stmt);
    v_terminate(arg0, 2);
}

//---------------------------------------------------------------------
//- mk_pr_arg_char - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_pr_arg_char_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    ch = v_std_any_get_value(char32_t, any0);


    arg0 = v_alloca(v_ast_expr_t, 2);
    v_initialize(arg0, 2);

    arg1 = v_getelementptr(arg0, 1);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);


    ar_num = v_cast(voidc_ast_stmt_grammar_argument_number, intptr_t);

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);

    v_std_string_set(sstr, "v.ar");

    v_std_string_append_number(sstr, ar_num);

    str = v_std_string_get(sstr);

    v_ast_make_expr_identifier(arg0, str);

    v_ast_make_expr_char(arg1, ch);

    v_ast_make_stmt_call(stmt, 0, q_peg_make_character_argument, arg0, 2);

    v_list_append(voidc_ast_stmt_grammar_stmt_list, voidc_ast_stmt_grammar_stmt_list, stmt);

    voidc_ast_stmt_grammar_arguments_inc();


    v_std_any_set_value(ret, 1);


    v_terminate(sstr);
    v_terminate(stmt);
    v_terminate(arg0, 2);
}


//---------------------------------------------------------------------
//- Enable statement grammar
//---------------------------------------------------------------------
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    v_function_hack("voidc_enable_statement_grammar", ft);
}
{
    voidc_enable_statement_block_compiler();        //- Sic!


    v_return_if_not(voidc_has_grammar());
    v_return_if(voidc_grammar_has_parser("stmt_grammar"));


    pp0 = v_alloca(v_peg_parser_t, 14);
    v_initialize(pp0, 14);

    pp1 = v_getelementptr(pp0, 1);
    pp2 = v_getelementptr(pp0, 2);
    pp3 = v_getelementptr(pp0, 3);
    pp4 = v_getelementptr(pp0, 4);
    pp5 = v_getelementptr(pp0, 5);
    pp6 = v_getelementptr(pp0, 6);
    pp7 = v_getelementptr(pp0, 7);
    pp8 = v_getelementptr(pp0, 8);
    pp9 = v_getelementptr(pp0, 9);
    pp10 = v_getelementptr(pp0, 10);
    pp11 = v_getelementptr(pp0, 11);
    pp12 = v_getelementptr(pp0, 12);
    pp13 = v_getelementptr(pp0, 13);

    ar0 = v_alloca(v_peg_argument_t, 3);
    v_initialize(ar0, 3);

    ar1 = v_getelementptr(ar0, 1);
    ar2 = v_getelementptr(ar0, 2);

    act = v_alloca(v_peg_action_t);
    v_initialize(act);

    gr0 = v_alloca(v_peg_grammar_t);
    v_initialize(gr0);


    //-----------------------------------------------------------------
    v_peg_get_grammar(gr0);

    //-----------------------------------------------------------------
    v_peg_grammar_set_action(gr0, gr0, "mk_stmt_grammar_init",      mk_stmt_grammar_init_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_stmt_grammar",           mk_stmt_grammar_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_gr_stmt_parser",         mk_gr_stmt_parser_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_gr_stmt_parser_leftrec", mk_gr_stmt_parser_leftrec_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_gr_stmt_action",         mk_gr_stmt_action_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_gr_stmt_value",          mk_gr_stmt_value_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_special",             mk_pr_special_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_choice",              mk_pr_choice_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_sequence",            mk_pr_sequence_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_catch_var",           mk_pr_catch_var_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_and",                 mk_pr_and_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_not",                 mk_pr_not_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_star",                mk_pr_star_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_plus",                mk_pr_plus_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_question",            mk_pr_question_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_identifier",          mk_pr_identifier_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_backref",             mk_pr_backref_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_catch_str",           mk_pr_catch_str_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_action",              mk_pr_action_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_class",               mk_pr_class_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_literal",             mk_pr_literal_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_char",                mk_pr_char_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_dot",                 mk_pr_dot_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_range",               mk_pr_range_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_action_call",         mk_pr_action_call_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_action_return",       mk_pr_action_return_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_arg_identifier",      mk_pr_arg_identifier_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_arg_backref",         mk_pr_arg_backref_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_arg_integer",         mk_pr_arg_integer_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_arg_string",          mk_pr_arg_string_grammar_action, 0);
    v_peg_grammar_set_action(gr0, gr0, "mk_pr_arg_char",            mk_pr_arg_char_grammar_action, 0);


    //-----------------------------------------------------------------
    //- stmt_grammar <- "grammar" !ident_cont _ g:identifier _ '{' _   { mk_stmt_grammar_init(g) }
    //-                                    gr_section_list _ '}'       { mk_stmt_grammar() }

    v_peg_make_literal_parser(pp0, "grammar");
    v_peg_make_identifier_parser(pp1, "ident_cont");
    v_peg_make_not_parser(pp1, pp1);

    v_peg_make_identifier_parser(pp2, "_");

    v_peg_make_identifier_parser(pp3, "identifier");
    v_peg_make_catch_variable_parser(pp3, "g", pp3);

    v_peg_make_identifier_parser(pp4, "_");
    v_peg_make_character_parser(pp5, '{');
    v_peg_make_identifier_parser(pp6, "_");


    v_peg_make_identifier_argument(ar0, "g");

    v_peg_make_call_action(act, "mk_stmt_grammar_init", ar0, 1);

    v_peg_make_action_parser(pp7, act);


    v_peg_make_identifier_parser(pp8, "gr_section_list");

    v_peg_make_identifier_parser(pp9, "_");
    v_peg_make_character_parser(pp10, '}');


    v_peg_make_call_action(act, "mk_stmt_grammar", ar0, 0);

    v_peg_make_action_parser(pp11, act);


    v_peg_make_sequence_parser(pp0, pp0, 12);


    v_peg_grammar_set_parser(gr0, gr0, "stmt_grammar", pp0, 0);

    pp_ = v_peg_grammar_get_parser(gr0, "stmt", 0);

    v_peg_choice_parser_concat(pp0, pp0, pp_);

    v_peg_grammar_set_parser(gr0, gr0, "stmt", pp0, 0);


    //-----------------------------------------------------------------
    //- gr_section_list <- gr_section_list _ gr_section
    //-                  / gr_section

    v_peg_make_identifier_parser(pp0, "gr_section_list");

    v_peg_make_identifier_parser(pp1, "_");

    v_peg_make_identifier_parser(pp2, "gr_section");


    v_peg_make_sequence_parser(pp1, pp0, 3);


    v_peg_make_choice_parser(pp0, pp1, 2);

    v_peg_grammar_set_parser(gr0, gr0, "gr_section_list", pp0, 1);      //- Left-recursive!


    //-----------------------------------------------------------------
    //- gr_section <- "parsers" _ ':' (_ gr_parser_list)?
    //-             / "actions" _ ':' (_ gr_action_list)?
    //-             / "values"  _ ':' (_ gr_value_list)?

    v_peg_make_literal_parser(pp2, "parsers");
    v_peg_make_identifier_parser(pp3, "_");
    v_peg_make_character_parser(pp4, ':');

    v_peg_make_identifier_parser(pp6, "_");
    v_peg_make_identifier_parser(pp7, "gr_parser_list");

    v_peg_make_sequence_parser(pp5, pp6, 2);
    v_peg_make_question_parser(pp5, pp5);

    v_peg_make_sequence_parser(pp0, pp2, 4);


    v_peg_make_literal_parser(pp2, "actions");

    v_peg_make_identifier_parser(pp7, "gr_action_list");

    v_peg_make_sequence_parser(pp5, pp6, 2);
    v_peg_make_question_parser(pp5, pp5);

    v_peg_make_sequence_parser(pp1, pp2, 4);


    v_peg_make_literal_parser(pp2, "values");

    v_peg_make_identifier_parser(pp7, "gr_value_list");

    v_peg_make_sequence_parser(pp5, pp6, 2);
    v_peg_make_question_parser(pp5, pp5);

    v_peg_make_sequence_parser(pp2, pp2, 4);


    v_peg_make_choice_parser(pp0, pp0, 3);

    v_peg_grammar_set_parser(gr0, gr0, "gr_section", pp0, 0);


    //-----------------------------------------------------------------
    //- gr_parser_list <- gr_parser_list _ gr_parser
    //-                 / gr_parser

    v_peg_make_identifier_parser(pp0, "gr_parser_list");

    v_peg_make_identifier_parser(pp1, "_");

    v_peg_make_identifier_parser(pp2, "gr_parser");


    v_peg_make_sequence_parser(pp1, pp0, 3);


    v_peg_make_choice_parser(pp0, pp1, 2);

    v_peg_grammar_set_parser(gr0, gr0, "gr_parser_list", pp0, 1);       //- Left-recursive!


    //-----------------------------------------------------------------
    //- gr_action_list <- gr_action_list _ gr_action
    //-                 / gr_action

    v_peg_make_identifier_parser(pp0, "gr_action_list");

    v_peg_make_identifier_parser(pp1, "_");

    v_peg_make_identifier_parser(pp2, "gr_action");

    v_peg_make_sequence_parser(pp1, pp0, 3);


    v_peg_make_choice_parser(pp0, pp1, 2);

    v_peg_grammar_set_parser(gr0, gr0, "gr_action_list", pp0, 1);       //- Left-recursive!


    //-----------------------------------------------------------------
    //- gr_value_list <- gr_value_list _ gr_value
    //-                / gr_value

    v_peg_make_identifier_parser(pp0, "gr_value_list");

    v_peg_make_identifier_parser(pp1, "_");

    v_peg_make_identifier_parser(pp2, "gr_value");

    v_peg_make_sequence_parser(pp1, pp0, 3);


    v_peg_make_choice_parser(pp0, pp1, 2);

    v_peg_grammar_set_parser(gr0, gr0, "gr_value_list", pp0, 1);        //- Left-recursive!


    //-----------------------------------------------------------------
    //- gr_parser <- i:identifier _ s:pr_assign _ pr_choice _ ';'   { mk_gr_stmt_parser(i,   s) }
    //-            / i:identifier _ '=' _ pr_special _ ';'          { mk_gr_stmt_parser(i, "=") }
    //-
    //-            / i:identifier _ "is" _ "left" _ ('-' _)? "recursive" _ ';'
    //-                                                             { mk_gr_stmt_parser_leftrec(i) }

    v_peg_make_identifier_parser(pp2, "identifier");
    v_peg_make_catch_variable_parser(pp2, "i", pp2);
    v_peg_make_identifier_parser(pp3, "_");

    v_peg_make_identifier_parser(pp4, "pr_assign");
    v_peg_make_catch_variable_parser(pp4, "s", pp4);
    v_peg_make_identifier_parser(pp5, "_");

    v_peg_make_identifier_parser(pp6, "pr_choice");
    v_peg_make_identifier_parser(pp7, "_");
    v_peg_make_character_parser(pp8, ';');

    v_peg_make_identifier_argument(ar0, "i");
    v_peg_make_identifier_argument(ar1, "s");

    v_peg_make_call_action(act, "mk_gr_stmt_parser", ar0, 2);

    v_peg_make_action_parser(pp9, act);

    v_peg_make_sequence_parser(pp0, pp2, 8);


    v_peg_make_character_parser(pp4, '=');

    v_peg_make_identifier_parser(pp6, "pr_special");

    v_peg_make_literal_argument(ar1, "=");

    v_peg_make_call_action(act, "mk_gr_stmt_parser", ar0, 2);

    v_peg_make_action_parser(pp9, act);

    v_peg_make_sequence_parser(pp1, pp2, 8);


    v_peg_make_literal_parser(pp4, "is");

    v_peg_make_literal_parser(pp6, "left");

    v_peg_make_identifier_parser(pp7, "_");

    v_peg_make_character_parser(pp8, '-');

    v_peg_make_identifier_parser(pp9, "_");

    v_peg_make_sequence_parser(pp8, pp8, 2);

    v_peg_make_question_parser(pp8, pp8);

    v_peg_make_literal_parser(pp9, "recursive");

    v_peg_make_identifier_parser(pp10, "_");
    v_peg_make_character_parser(pp11, ';');

    v_peg_make_call_action(act, "mk_gr_stmt_parser_leftrec", ar0, 1);

    v_peg_make_action_parser(pp12, act);

    v_peg_make_sequence_parser(pp2, pp2, 11);


    v_peg_make_choice_parser(pp0, pp0, 3);

    v_peg_grammar_set_parser(gr0, gr0, "gr_parser", pp0, 0);


    //-----------------------------------------------------------------
    //- pr_special <- ("(/)" / "()" / "0")      { mk_pr_special($0) }

    v_peg_make_literal_parser(pp0, "(/)");
    v_peg_make_literal_parser(pp1, "()");
    v_peg_make_literal_parser(pp2, "0");

    v_peg_make_choice_parser(pp0, pp0, 3);

    v_peg_make_backref_argument(ar0, 0, v_peg_backref_argument_kind_string);

    v_peg_make_call_action(act, "mk_pr_special", ar0, 1);

    v_peg_make_action_parser(pp1, act);


    v_peg_make_sequence_parser(pp0, pp0, 2);

    v_peg_grammar_set_parser(gr0, gr0, "pr_special", pp0, 0);


    //-----------------------------------------------------------------
    //- pr_assign <- "+=" / "*=" / "=+" / "=*" / "="

    v_peg_make_literal_parser(pp0, "+=");
    v_peg_make_literal_parser(pp2, "*=");
    v_peg_make_literal_parser(pp1, "=+");
    v_peg_make_literal_parser(pp3, "=*");
    v_peg_make_literal_parser(pp4, "=");

    v_peg_make_choice_parser(pp0, pp0, 5);

    v_peg_grammar_set_parser(gr0, gr0, "pr_assign", pp0, 0);


    //-----------------------------------------------------------------
    //- pr_choice <- pr_choice _ '/' _ pr_sequence      { mk_pr_choice() }
    //-            / pr_sequence

    v_peg_make_identifier_parser(pp0, "pr_choice");

    v_peg_make_identifier_parser(pp1, "_");
    v_peg_make_character_parser(pp2, '/');
    v_peg_make_identifier_parser(pp3, "_");

    v_peg_make_identifier_parser(pp4, "pr_sequence");

    v_peg_make_call_action(act, "mk_pr_choice", ar0, 0);

    v_peg_make_action_parser(pp5, act);

    v_peg_make_sequence_parser(pp3, pp0, 6);


    v_peg_make_choice_parser(pp0, pp3, 2);

    v_peg_grammar_set_parser(gr0, gr0, "pr_choice", pp0, 1);        //- Left-recursive!


    //-----------------------------------------------------------------
    //- pr_sequence <- pr_sequence _ pr_prefix      { mk_pr_sequence() }
    //-              / pr_prefix

    v_peg_make_identifier_parser(pp0, "pr_sequence");

    v_peg_make_identifier_parser(pp1, "_");

    v_peg_make_identifier_parser(pp2, "pr_prefix");


    v_peg_make_call_action(act, "mk_pr_sequence", ar0, 0);

    v_peg_make_action_parser(pp3, act);


    v_peg_make_sequence_parser(pp1, pp0, 4);


    v_peg_make_choice_parser(pp0, pp1, 2);

    v_peg_grammar_set_parser(gr0, gr0, "pr_sequence", pp0, 1);      //- Left-recursive!


    //-----------------------------------------------------------------
    //- pr_prefix <- i:identifier _ ':' _ pr_suffix     { mk_pr_catch_var(i) }
    //-            / '&' _ pr_suffix                    { mk_pr_and() }
    //-            / '!' _ pr_suffix                    { mk_pr_not() }
    //-            / pr_suffix

    v_peg_make_identifier_parser(pp0, "identifier");
    v_peg_make_catch_variable_parser(pp0, "i", pp0);

    v_peg_make_identifier_parser(pp1, "_");
    v_peg_make_character_parser(pp2, ':');
    v_peg_make_identifier_parser(pp3, "_");

    v_peg_make_identifier_parser(pp4, "pr_suffix");

    v_peg_make_identifier_argument(ar0, "i");

    v_peg_make_call_action(act, "mk_pr_catch_var", ar0, 1);

    v_peg_make_action_parser(pp5, act);

    v_peg_make_sequence_parser(pp0, pp0, 6);


    v_peg_make_character_parser(pp2, '&');

    v_peg_make_call_action(act, "mk_pr_and", ar1, 1);

    v_peg_make_action_parser(pp5, act);

    v_peg_make_sequence_parser(pp1, pp2, 4);


    v_peg_make_character_parser(pp2, '!');

    v_peg_make_call_action(act, "mk_pr_not", ar0, 0);

    v_peg_make_action_parser(pp5, act);

    v_peg_make_sequence_parser(pp2, pp2, 4);


    v_peg_make_identifier_parser(pp3, "pr_suffix");


    v_peg_make_choice_parser(pp0, pp0, 4);

    v_peg_grammar_set_parser(gr0, gr0, "pr_prefix", pp0, 0);


    //-----------------------------------------------------------------
    //- pr_suffix <- pr_primary _ '*'           { mk_pr_star() }
    //-            / pr_primary _ '+'           { mk_pr_plus() }
    //-            / pr_primary _ '?'           { mk_pr_question() }
    //-            / pr_primary

    v_peg_make_identifier_parser(pp3, "pr_primary");

    v_peg_make_identifier_parser(pp4, "_");
    v_peg_make_character_parser(pp5, '*');

    v_peg_make_call_action(act, "mk_pr_star", ar0, 0);

    v_peg_make_action_parser(pp6, act);

    v_peg_make_sequence_parser(pp0, pp3, 4);


    v_peg_make_character_parser(pp5, '+');

    v_peg_make_call_action(act, "mk_pr_plus", ar0, 0);

    v_peg_make_action_parser(pp6, act);

    v_peg_make_sequence_parser(pp1, pp3, 4);


    v_peg_make_character_parser(pp5, '?');

    v_peg_make_call_action(act, "mk_pr_question", ar0, 0);

    v_peg_make_action_parser(pp6, act);

    v_peg_make_sequence_parser(pp2, pp3, 4);


    v_peg_make_choice_parser(pp0, pp0, 4);

    v_peg_grammar_set_parser(gr0, gr0, "pr_suffix", pp0, 0);


    //-----------------------------------------------------------------
    //- pr_primary <- i:identifier              { mk_pr_identifier(i) }
    //-             / '$' n:dec_natural         { mk_pr_backref(n) }
    //-             / '(' _ pr_choice _ ')'
    //-             / '<' _ pr_choice _ '>'     { mk_pr_catch_str() }
    //-             / '{' _ pr_action _ '}'     { mk_pr_action() }
    //-             / '[' pr_range_list ']'     { mk_pr_class() }
    //-             / s:string                  { mk_pr_literal(s) }
    //-             / c:char                    { mk_pr_char(c) }
    //-             / '.'                       { mk_pr_dot() }

    v_peg_make_identifier_parser(pp4, "identifier");
    v_peg_make_catch_variable_parser(pp4, "i", pp4);

    v_peg_make_identifier_argument(ar0, "i");

    v_peg_make_call_action(act, "mk_pr_identifier", ar0, 1);

    v_peg_make_action_parser(pp5, act);

    v_peg_make_sequence_parser(pp0, pp4, 2);


    v_peg_make_character_parser(pp2, '$');

    v_peg_make_identifier_parser(pp3, "dec_natural");
    v_peg_make_catch_variable_parser(pp3, "n", pp3);

    v_peg_make_identifier_argument(ar0, "n");

    v_peg_make_call_action(act, "mk_pr_backref", ar0, 1);

    v_peg_make_action_parser(pp4, act);

    v_peg_make_sequence_parser(pp1, pp2, 3);


    v_peg_make_character_parser(pp5, '(');
    v_peg_make_identifier_parser(pp6, "_");

    v_peg_make_identifier_parser(pp7, "pr_choice");

    v_peg_make_identifier_parser(pp8, "_");
    v_peg_make_character_parser(pp9, ')');

    v_peg_make_sequence_parser(pp2, pp5, 5);


    v_peg_make_character_parser(pp5, '<');
    v_peg_make_character_parser(pp9, '>');

    v_peg_make_call_action(act, "mk_pr_catch_str", ar0, 0);

    v_peg_make_action_parser(pp10, act);

    v_peg_make_sequence_parser(pp3, pp5, 6);


    v_peg_make_character_parser(pp5, '{');
    v_peg_make_character_parser(pp9, '}');

    v_peg_make_identifier_parser(pp7, "pr_action");

    v_peg_make_call_action(act, "mk_pr_action", ar0, 0);

    v_peg_make_action_parser(pp10, act);

    v_peg_make_sequence_parser(pp4, pp5, 6);


    v_peg_make_character_parser(pp5, '[');

    v_peg_make_identifier_parser(pp6, "pr_range_list");
    v_peg_make_catch_variable_parser(pp6, "l", pp6);

    v_peg_make_character_parser(pp7, ']');

    v_peg_make_identifier_argument(ar0, "l");

    v_peg_make_call_action(act, "mk_pr_class", ar0, 1);

    v_peg_make_action_parser(pp8, act);

    v_peg_make_sequence_parser(pp5, pp5, 4);


    v_peg_make_identifier_parser(pp6, "string");
    v_peg_make_catch_variable_parser(pp6, "s", pp6);

    v_peg_make_identifier_argument(ar0, "s");

    v_peg_make_call_action(act, "mk_pr_literal", ar0, 1);

    v_peg_make_action_parser(pp7, act);

    v_peg_make_sequence_parser(pp6, pp6, 2);


    v_peg_make_identifier_parser(pp7, "char");
    v_peg_make_catch_variable_parser(pp7, "c", pp7);

    v_peg_make_identifier_argument(ar0, "c");

    v_peg_make_call_action(act, "mk_pr_char", ar0, 1);

    v_peg_make_action_parser(pp8, act);

    v_peg_make_sequence_parser(pp7, pp7, 2);


    v_peg_make_character_parser(pp8, '.');

    v_peg_make_call_action(act, "mk_pr_dot", ar0, 0);

    v_peg_make_action_parser(pp9, act);

    v_peg_make_sequence_parser(pp8, pp8, 2);


    v_peg_make_choice_parser(pp0, pp0, 9);

    v_peg_grammar_set_parser(gr0, gr0, "pr_primary", pp0, 0);


    //-----------------------------------------------------------------
    //- pr_range_list <- pr_range_list pr_range_item
    //-                / pr_range_item

    v_peg_make_identifier_parser(pp0, "pr_range_list");
    v_peg_make_identifier_parser(pp1, "pr_range_item");

    v_peg_make_sequence_parser(pp0, pp0, 2);


    v_peg_make_choice_parser(pp0, pp0, 2);

    v_peg_grammar_set_parser(gr0, gr0, "pr_range_list", pp0, 1);        //- Left-recursive!


    //-----------------------------------------------------------------
    //- pr_range_item <- !']' pr_range

    v_peg_make_character_parser(pp0, ']');
    v_peg_make_not_parser(pp0, pp0);

    v_peg_make_identifier_parser(pp1, "pr_range");

    v_peg_make_sequence_parser(pp0, pp0, 2);

    v_peg_grammar_set_parser(gr0, gr0, "pr_range_item", pp0, 0);


    //---------------------------------------------------------------------
    //- pr_range <- f:str_char '-' t:str_char               { mk_pr_range(f, t) }
    //-           / c:str_char                              { mk_pr_range(c, c) }

    v_peg_make_identifier_parser(pp0, "str_char");
    v_peg_make_catch_variable_parser(pp0, "f", pp0);

    v_peg_make_character_parser(pp1, '-');

    v_peg_make_identifier_parser(pp2, "str_char");
    v_peg_make_catch_variable_parser(pp2, "t", pp2);

    v_peg_make_identifier_argument(ar0, "f");
    v_peg_make_identifier_argument(ar1, "t");

    v_peg_make_call_action(act, "mk_pr_range", ar0, 2);

    v_peg_make_action_parser(pp3, act);

    v_peg_make_sequence_parser(pp0, pp0, 4);


    v_peg_make_identifier_parser(pp1, "str_char");
    v_peg_make_catch_variable_parser(pp1, "c", pp1);

    v_peg_make_identifier_argument(ar0, "c");
    v_peg_make_identifier_argument(ar1, "c");

    v_peg_make_call_action(act, "mk_pr_range", ar0, 2);

    v_peg_make_action_parser(pp2, act);

    v_peg_make_sequence_parser(pp1, pp1, 2);


    v_peg_make_choice_parser(pp0, pp0, 2);

    v_peg_grammar_set_parser(gr0, gr0, "pr_range", pp0, 0);


    //-----------------------------------------------------------------
    //- pr_action <- f:identifier _ '(' _ pr_arg_list _ ')'     { mk_pr_action_call(f) }
    //-            / pr_argument                                { mk_pr_action_return() }

    v_peg_make_identifier_parser(pp0, "identifier");
    v_peg_make_catch_variable_parser(pp0, "f", pp0);

    v_peg_make_identifier_parser(pp1, "_");
    v_peg_make_character_parser(pp2, '(');
    v_peg_make_identifier_parser(pp3, "_");

    v_peg_make_identifier_parser(pp4, "pr_arg_list");

    v_peg_make_identifier_parser(pp5, "_");
    v_peg_make_character_parser(pp6, ')');

    v_peg_make_identifier_argument(ar0, "f");

    v_peg_make_call_action(act, "mk_pr_action_call", ar0, 1);

    v_peg_make_action_parser(pp7, act);

    v_peg_make_sequence_parser(pp0, pp0, 8);


    v_peg_make_identifier_parser(pp1, "pr_argument");

    v_peg_make_call_action(act, "mk_pr_action_return", ar0, 0);

    v_peg_make_action_parser(pp2, act);

    v_peg_make_sequence_parser(pp1, pp1, 2);


    v_peg_make_choice_parser(pp0, pp0, 2);

    v_peg_grammar_set_parser(gr0, gr0, "pr_action", pp0, 0);


    //-----------------------------------------------------------------
    //- pr_arg_list <- pr_arg_list_lr
    //-              /

    v_peg_make_identifier_parser(pp0, "pr_arg_list_lr");

    v_peg_make_sequence_parser(pp1, 0, 0);      //- nil!

    v_peg_make_choice_parser(pp0, pp0, 2);

    v_peg_grammar_set_parser(gr0, gr0, "pr_arg_list", pp0, 0);


    //-----------------------------------------------------------------
    //- pr_arg_list_lr <- pr_arg_list_lr _ ',' _ pr_argument
    //-                 / pr_argument

    v_peg_make_identifier_parser(pp0, "pr_arg_list_lr");

    v_peg_make_identifier_parser(pp1, "_");
    v_peg_make_character_parser(pp2, ',');
    v_peg_make_identifier_parser(pp3, "_");

    v_peg_make_identifier_parser(pp4, "pr_argument");

    v_peg_make_sequence_parser(pp0, pp0, 5);


    v_peg_make_sequence_parser(pp1, pp4, 1);


    v_peg_make_choice_parser(pp0, pp0, 2);

    v_peg_grammar_set_parser(gr0, gr0, "pr_arg_list_lr", pp0, 1);       //- Left-recursive!


    //-----------------------------------------------------------------
    //- pr_argument <- i:identifier                 { mk_pr_arg_identifier(i) }
    //-              / '$' n:dec_natural f:[se]?    { mk_pr_arg_backref(n, f) }
    //-              / n:integer                    { mk_pr_arg_integer(n) }
    //-              / s:string                     { mk_pr_arg_string(s) }
    //-              / c:char                       { mk_pr_arg_char(c) }

    v_peg_make_identifier_parser(pp0, "identifier");
    v_peg_make_catch_variable_parser(pp0, "i", pp0);

    v_peg_make_identifier_argument(ar0, "i");

    v_peg_make_call_action(act, "mk_pr_arg_identifier", ar0, 1);

    v_peg_make_action_parser(pp1, act);

    v_peg_make_sequence_parser(pp0, pp0, 2);


    v_peg_make_character_parser(pp1, '$');

    v_peg_make_identifier_parser(pp2, "dec_natural");
    v_peg_make_catch_variable_parser(pp2, "n", pp2);

    rn0 = v_alloca(v_peg_class_parser_range_t, 2);
    rn00 = v_getelementptr(rn0, 0, 0);
    rn01 = v_getelementptr(rn0, 0, 1);
    rn10 = v_getelementptr(rn0, 1, 0);
    rn11 = v_getelementptr(rn0, 1, 1);

    v_store('s', rn00);
    v_store('s', rn01);
    v_store('e', rn10);
    v_store('e', rn11);

    v_peg_make_class_parser(pp3, rn0, 2);

    v_peg_make_question_parser(pp3, pp3);
    v_peg_make_catch_variable_parser(pp3, "f", pp3);

    v_peg_make_identifier_argument(ar0, "n");
    v_peg_make_identifier_argument(ar1, "f");

    v_peg_make_call_action(act, "mk_pr_arg_backref", ar0, 2);

    v_peg_make_action_parser(pp4, act);

    v_peg_make_sequence_parser(pp1, pp1, 4);


    v_peg_make_identifier_parser(pp2, "integer");
    v_peg_make_catch_variable_parser(pp2, "n", pp2);

    v_peg_make_call_action(act, "mk_pr_arg_integer", ar0, 1);

    v_peg_make_action_parser(pp3, act);

    v_peg_make_sequence_parser(pp2, pp2, 2);


    v_peg_make_identifier_parser(pp3, "string");
    v_peg_make_catch_variable_parser(pp3, "s", pp3);

    v_peg_make_identifier_argument(ar0, "s");

    v_peg_make_call_action(act, "mk_pr_arg_string", ar0, 1);

    v_peg_make_action_parser(pp4, act);

    v_peg_make_sequence_parser(pp3, pp3, 2);


    v_peg_make_identifier_parser(pp4, "char");
    v_peg_make_catch_variable_parser(pp4, "c", pp4);

    v_peg_make_identifier_argument(ar0, "c");

    v_peg_make_call_action(act, "mk_pr_arg_char", ar0, 1);

    v_peg_make_action_parser(pp5, act);

    v_peg_make_sequence_parser(pp4, pp4, 2);


    v_peg_make_choice_parser(pp0, pp0, 5);

    v_peg_grammar_set_parser(gr0, gr0, "pr_argument", pp0, 0);


    //-----------------------------------------------------------------
    //- gr_action <- a:identifier _'='_ i:identifier _','_ x:identifier _';'    { mk_gr_stmt_action(a, i, x) }
    //-            / a:identifier _'='_ i:identifier _';'                       { mk_gr_stmt_action(a, i, 0) }
    //-            / a:identifier _'='_ '0' _';'                                { mk_gr_stmt_action(a, 0, 0) }


    v_peg_make_identifier_parser(pp2, "identifier");
    v_peg_make_catch_variable_parser(pp2, "a", pp2);

    v_peg_make_identifier_parser(pp3, "_");
    v_peg_make_character_parser(pp4, '=');
    v_peg_make_identifier_parser(pp5, "_");

    v_peg_make_identifier_parser(pp6, "identifier");
    v_peg_make_catch_variable_parser(pp6, "i", pp6);

    v_peg_make_identifier_parser(pp7, "_");
    v_peg_make_character_parser(pp8, ',');
    v_peg_make_identifier_parser(pp9, "_");

    v_peg_make_identifier_parser(pp10, "identifier");
    v_peg_make_catch_variable_parser(pp10, "x", pp10);

    v_peg_make_identifier_parser(pp11, "_");
    v_peg_make_character_parser(pp12, ';');

    v_peg_make_identifier_argument(ar0, "a");
    v_peg_make_identifier_argument(ar1, "i");
    v_peg_make_identifier_argument(ar2, "x");

    v_peg_make_call_action(act, "mk_gr_stmt_action", ar0, 3);

    v_peg_make_action_parser(pp13, act);

    v_peg_make_sequence_parser(pp0, pp2, 12);


    v_peg_make_character_parser(pp8, ';');

    v_peg_make_integer_argument(ar2, 0);

    v_peg_make_call_action(act, "mk_gr_stmt_action", ar0, 3);

    v_peg_make_action_parser(pp9, act);

    v_peg_make_sequence_parser(pp1, pp2, 8);


    v_peg_make_character_parser(pp6, '0');

    v_peg_make_integer_argument(ar1, 0);

    v_peg_make_call_action(act, "mk_gr_stmt_action", ar0, 3);

    v_peg_make_action_parser(pp9, act);

    v_peg_make_sequence_parser(pp2, pp2, 8);


    v_peg_make_choice_parser(pp0, pp0, 3);

    v_peg_grammar_set_parser(gr0, gr0, "gr_action", pp0, 0);


    //-----------------------------------------------------------------
    //- gr_value <- v:identifier _ '=' _ i:identifier _ ';'    { mk_gr_stmt_value(v, i) }
    //-           / v:identifier _ '=' _ '0' _ ';'             { mk_gr_stmt_value(v, 0) }

    v_peg_make_identifier_parser(pp1, "identifier");
    v_peg_make_catch_variable_parser(pp1, "v", pp1);

    v_peg_make_identifier_parser(pp2, "_");
    v_peg_make_character_parser(pp3, '=');
    v_peg_make_identifier_parser(pp4, "_");

    v_peg_make_identifier_parser(pp5, "identifier");
    v_peg_make_catch_variable_parser(pp5, "i", pp5);

    v_peg_make_identifier_parser(pp6, "_");
    v_peg_make_character_parser(pp7, ';');

    v_peg_make_identifier_argument(ar0, "v");
    v_peg_make_identifier_argument(ar1, "i");

    v_peg_make_call_action(act, "mk_gr_stmt_value", ar0, 2);

    v_peg_make_action_parser(pp8, act);

    v_peg_make_sequence_parser(pp0, pp1, 8);


    v_peg_make_character_parser(pp5, '0');

    v_peg_make_integer_argument(ar1, 0);

    v_peg_make_call_action(act, "mk_gr_stmt_value", ar0, 2);

    v_peg_make_action_parser(pp8, act);

    v_peg_make_sequence_parser(pp1, pp1, 8);


    v_peg_make_choice_parser(pp0, pp0, 2);

    v_peg_grammar_set_parser(gr0, gr0, "gr_value", pp0, 0);


    //-----------------------------------------------------------------
    v_peg_set_grammar(gr0);


    //- That's all, folks!

    v_terminate(gr0);
    v_terminate(act);
    v_terminate(ar0, 3);
    v_terminate(pp0, 14);
}


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
{
    v_make_export_symbol("v_ast_make_stmt_call");
    v_make_export_symbol("voidc_enable_statement_grammar");
}



