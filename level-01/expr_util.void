//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("expr_util.void  must be imported into the voidc target only!");

    v_import("level-00");

    v_import("llvm-c/Core.void");

    v_import("function_hack.void");
    v_import("if_then_else.void");
    v_import("arithmetic.void");
    v_import("block.void");
    v_import("loop.void");
    v_import("switch.void");
    v_import("memory.void");
    v_import("handlers.void");
}

//{ v_import("printf.void"); }

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_loop();
    voidc_enable_statement_switch();
}


//---------------------------------------------------------------------
{   void_ptr = v_pointer_type(void, 0);

    v_add_type("void_ptr", void_ptr);
    v_add_type("char_ptr", v_pointer_type(char, 0));

    v_add_type("int_ptr", v_pointer_type(int, 0));

    v_add_type("quark_ptr", v_pointer_type(v_quark_t, 0));

    v_add_type("type_ptr_ptr", v_pointer_type(v_type_ptr, 0));

    v_add_type("expr_ptr_ptr", v_pointer_type(v_ast_expr_ptr, 0));

    v_add_type("void_ptr_ptr", v_pointer_type(void_ptr, 0));

    v_add_type("type_ref",  v_reference_type(v_type_ptr, 0));
    v_add_type("value_ref", v_reference_type(LLVMValueRef, 0));


    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("q_op_infix_logical_and", q_ref, q("v.op_infix_logical_and"));
    v_add_symbol("q_op_infix_logical_or",  q_ref, q("v.op_infix_logical_or"));
    v_add_symbol("q_op_infix_lt",          q_ref, q("v.op_infix_lt"));
    v_add_symbol("q_op_infix_le",          q_ref, q("v.op_infix_le"));
    v_add_symbol("q_op_infix_gt",          q_ref, q("v.op_infix_gt"));
    v_add_symbol("q_op_infix_ge",          q_ref, q("v.op_infix_ge"));
    v_add_symbol("q_op_infix_eq",          q_ref, q("v.op_infix_eq"));
    v_add_symbol("q_op_infix_ne",          q_ref, q("v.op_infix_ne"));
    v_add_symbol("q_op_postfix_index",     q_ref, q("v.op_postfix_index"));

    v_add_symbol("voidc_incomplete_array_type_tag", q_ref, q("voidc.incomplete_array_type_tag"));
}


//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);


    //-----------------------------------------------------------------
    //- ast_operator_unary_t ...
    //-----------------------------------------------------------------
    ast_operator_unary_t = v_struct_type_named("struct.v_ast_operator_unary");

    v_store(v_quark_t,    typ0);        //- Quark
    v_store(int,          typ1);        //- Priority
    v_store(v_ast_base_t, typ2);        //- Payload

    v_type_struct_set_body(ast_operator_unary_t, typ0, 3, false);

    ast_operator_unary_ptr = v_pointer_type(ast_operator_unary_t, 0);

    v_export_type("v_ast_operator_unary_t",   ast_operator_unary_t);
    v_export_type("v_ast_operator_unary_ptr", ast_operator_unary_ptr);

    size_v = LLVMSizeOf(v_type_get_llvm_type(ast_operator_unary_t));

    v_add_constant("ast_operator_unary_t_size", size_t, size_v);


    //-----------------------------------------------------------------
    //- ast_operator_binary_t ...
    //-----------------------------------------------------------------
    ast_operator_binary_t = v_struct_type_named("struct.v_ast_operator_binary");

    v_store(v_quark_t,    typ0);        //- Quark
    v_store(int,          typ1);        //- Priority
    v_store(int,          typ2);        //- Associativity: 0/1 - right/left
    v_store(v_ast_base_t, typ3);        //- Payload

    v_type_struct_set_body(ast_operator_binary_t, typ0, 4, false);

    ast_operator_binary_ptr = v_pointer_type(ast_operator_binary_t, 0);

    v_export_type("v_ast_operator_binary_t",   ast_operator_binary_t);
    v_export_type("v_ast_operator_binary_ptr", ast_operator_binary_ptr);

    size_v = LLVMSizeOf(v_type_get_llvm_type(ast_operator_binary_t));

    v_add_constant("ast_operator_binary_t_size", size_t, size_v);
}


//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr);

    v_store(void_ptr, typ0);

    ft = v_function_type(void, typ0, 1, false);
    v_add_symbol("free", ft, 0);

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}


//=====================================================================
{   voidc_unit_begin_module("voidc_operator_list_module"); }


//---------------------------------------------------------------------
//- operator_unary init ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_operator_unary_init", v_ast_generic_init_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, v_ast_operator_unary_ptr);

    payload = v_getelementptr(obj, 0, 2);

    v_initialize(payload);
}

//---------------------------------------------------------------------
//- operator_unary term ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_operator_unary_term", v_ast_generic_term_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, v_ast_operator_unary_ptr);

    payload = v_getelementptr(obj, 0, 2);

    v_terminate(payload);
}

//-----------------------------------------------------------------------
//- operator_unary vtable ...
//-------------------------------------------------------------------
{
    module = v_get_module();

    val0 = v_alloca(LLVMValueRef, 3);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);

    init_f = v_obtain_function("voidc_ast_operator_unary_init", 0);
    term_f = v_obtain_function("voidc_ast_operator_unary_term", 0);

    v_quark_t_ = v_type_get_llvm_type(v_quark_t);

    quark_u  = LLVMGetUndef(v_quark_t_);

    v_store(init_f,  val0);
    v_store(term_f,  val1);
    v_store(quark_u, val2);         //- Undef!

    v_ast_generic_vtable_ = v_type_get_llvm_type(v_ast_generic_vtable);

    vtable_v = LLVMConstNamedStruct(v_ast_generic_vtable_, val0, 2);

    vtable_g = LLVMAddGlobal(module, v_ast_generic_vtable_, "voidc_ast_operator_unary_vtable");

    LLVMSetLinkage(vtable_g, LLVMPrivateLinkage);

    LLVMSetInitializer(vtable_g, vtable_v);

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}

{   v_add_symbol("voidc_ast_operator_unary_vtable", v_ast_generic_vtable, 0);
}

//---------------------------------------------------------------------
//- v_ast_make_operator_unary - ...
//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(v_ast_expr_ptr, typ0);      //- Result (out)
    v_store(v_quark_t,      typ1);      //- Quark
    v_store(int,            typ2);      //- Priority
    v_store(v_ast_base_ptr, typ3);      //- Payload

    ft = v_function_type(void, typ0, 4, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_ast_make_operator_unary", ft);

    v_add_parameter_name(f, 0, "ret",   v_ast_expr_ptr);
    v_add_parameter_name(f, 1, "quark", v_quark_t);
    v_add_parameter_name(f, 2, "prec",  int);
    v_add_parameter_name(f, 3, "pay",   v_ast_base_ptr);
}
{
    etmp = v_alloca(v_ast_expr_t);
    v_initialize(etmp);

    v_ast_make_generic(etmp, voidc_ast_operator_unary_vtable, ast_operator_unary_t_size);

    void_obj = v_ast_generic_get_object(etmp);

    obj = v_cast(void_obj, v_ast_operator_unary_ptr);

    obj_quark = v_getelementptr(obj, 0, 0);
    obj_prec  = v_getelementptr(obj, 0, 1);
    obj_pay   = v_getelementptr(obj, 0, 2);

    v_store(quark, obj_quark);
    v_store(prec,  obj_prec);

    if (pay)  v_copy(obj_pay, pay);

    v_copy(ret, etmp);

    v_terminate(etmp);
}


//---------------------------------------------------------------------
//- operator_binary init ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_operator_binary_init", v_ast_generic_init_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, v_ast_operator_binary_ptr);

    payload = v_getelementptr(obj, 0, 3);

    v_initialize(payload);
}

//---------------------------------------------------------------------
//- operator_binary term ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_operator_binary_term", v_ast_generic_term_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, v_ast_operator_binary_ptr);

    payload = v_getelementptr(obj, 0, 3);

    v_terminate(payload);
}

//-----------------------------------------------------------------------
//- operator_binary vtable ...
//-------------------------------------------------------------------
{
    module = v_get_module();

    val0 = v_alloca(LLVMValueRef, 3);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);

    init_f = v_obtain_function("voidc_ast_operator_binary_init", 0);
    term_f = v_obtain_function("voidc_ast_operator_binary_term", 0);

    v_quark_t_ = v_type_get_llvm_type(v_quark_t);

    quark_u  = LLVMGetUndef(v_quark_t_);

    v_store(init_f,  val0);
    v_store(term_f,  val1);
    v_store(quark_u, val2);         //- Undef!

    v_ast_generic_vtable_ = v_type_get_llvm_type(v_ast_generic_vtable);

    vtable_v = LLVMConstNamedStruct(v_ast_generic_vtable_, val0, 3);

    vtable_g = LLVMAddGlobal(module, v_ast_generic_vtable_, "voidc_ast_operator_binary_vtable");

    LLVMSetLinkage(vtable_g, LLVMPrivateLinkage);

    LLVMSetInitializer(vtable_g, vtable_v);

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}

{   v_add_symbol("voidc_ast_operator_binary_vtable", v_ast_generic_vtable, 0);
}

//---------------------------------------------------------------------
//- v_ast_make_operator_binary - ...
//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 5);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);
    typ4 = v_getelementptr(typ0, 4);

    v_store(v_ast_expr_ptr, typ0);      //- Result (out)
    v_store(v_quark_t,      typ1);      //- Quark
    v_store(int,            typ2);      //- Priority
    v_store(int,            typ3);      //- Associativity
    v_store(v_ast_base_ptr, typ4);      //- Payload

    ft = v_function_type(void, typ0, 5, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_ast_make_operator_binary", ft);

    v_add_parameter_name(f, 0, "ret",   v_ast_expr_ptr);
    v_add_parameter_name(f, 1, "quark", v_quark_t);
    v_add_parameter_name(f, 2, "prec",  int);
    v_add_parameter_name(f, 3, "left",  int);
    v_add_parameter_name(f, 4, "pay",   v_ast_base_ptr);
}
{
    etmp = v_alloca(v_ast_expr_t);
    v_initialize(etmp);

    v_ast_make_generic(etmp, voidc_ast_operator_binary_vtable, ast_operator_binary_t_size);

    void_obj = v_ast_generic_get_object(etmp);

    obj = v_cast(void_obj, v_ast_operator_binary_ptr);

    obj_quark = v_getelementptr(obj, 0, 0);
    obj_prec  = v_getelementptr(obj, 0, 1);
    obj_left  = v_getelementptr(obj, 0, 2);
    obj_pay   = v_getelementptr(obj, 0, 3);

    v_store(quark, obj_quark);
    v_store(prec,  obj_prec);
    v_store(left,  obj_left);

    if (pay)  v_copy(obj_pay, pay);

    v_copy(ret, etmp);

    v_terminate(etmp);
}


//---------------------------------------------------------------------
{   module = v_get_module();

    v_ast_expr_list_t_ = v_type_get_llvm_type(v_ast_expr_list_t);

    oplist_g = LLVMAddGlobal(module, v_ast_expr_list_t_, "voidc_ast_expression_operator_list");

    oplist_u = LLVMGetUndef(v_ast_expr_list_t_);

    LLVMSetInitializer(oplist_g, oplist_u);

    v_add_alias("expr_oplist", "voidc_ast_expression_operator_list");


    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}

{   v_export_symbol_type("voidc_ast_expression_operator_list", v_ast_expr_list_t);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 2);
    typ1 = v_getelementptr(typ0, 1);

    v_store(char_ptr, typ0);
    v_store(int,      typ1);

    ft = v_function_type(void, typ0, 2, false);

    //-----------------------------------------------------------------
    f = v_function_hack("add_op_unary", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "name", char_ptr);
    v_add_parameter_name(f, 1, "prec", int);
}
{
    op = v_alloca(v_ast_expr_t);
    v_initialize(op);

    v_ast_make_operator_unary(op, v_quark_from_string(name), prec, 0);

    v_list_append(expr_oplist, expr_oplist, op);

    v_terminate(op);
}

//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(char_ptr, typ0);
    v_store(int,      typ1);
    v_store(int,      typ2);

    ft = v_function_type(void, typ0, 3, false);

    //-----------------------------------------------------------------
    f = v_function_hack("add_op_binary", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "name", char_ptr);
    v_add_parameter_name(f, 1, "prec", int);
    v_add_parameter_name(f, 2, "left", int);
}
{
    op = v_alloca(v_ast_expr_t);
    v_initialize(op);

    v_ast_make_operator_binary(op, v_quark_from_string(name), prec, left, 0);

    v_list_append(expr_oplist, expr_oplist, op);

    v_terminate(op);
}


//=====================================================================
//- Constructor/destructor (kinda)
//=====================================================================
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    v_function_hack("expr_oplist_ctor", ft);
}
{
//  printf("expr_oplist_ctor()\n");

    v_initialize(expr_oplist);

    v_make_list_nil(expr_oplist);

    //-------------------------------------------------------------
    add_op_binary("v.op_infix_assign",      1000, 0);   //- right
    add_op_binary("v.op_infix_add_assign",  1000, 0);   //- right
    add_op_binary("v.op_infix_sub_assign",  1000, 0);   //- right
    add_op_binary("v.op_infix_mul_assign",  1000, 0);   //- right
    add_op_binary("v.op_infix_div_assign",  1000, 0);   //- right
    add_op_binary("v.op_infix_rem_assign",  1000, 0);   //- right
    add_op_binary("v.op_infix_shl_assign",  1000, 0);   //- right
    add_op_binary("v.op_infix_shr_assign",  1000, 0);   //- right
    add_op_binary("v.op_infix_and_assign",  1000, 0);   //- right
    add_op_binary("v.op_infix_xor_assign",  1000, 0);   //- right
    add_op_binary("v.op_infix_or_assign",   1000, 0);   //- right

    add_op_binary("v.op_infix_logical_or",  3000, 1);   //- left
    add_op_binary("v.op_infix_logical_and", 4000, 1);   //- left
    add_op_binary("v.op_infix_or",          5000, 1);   //- left
    add_op_binary("v.op_infix_xor",         6000, 1);   //- left
    add_op_binary("v.op_infix_and",         7000, 1);   //- left

    add_op_binary("v.op_infix_lt",          8000, 1);   //- left
    add_op_binary("v.op_infix_le",          8000, 1);   //- left
    add_op_binary("v.op_infix_gt",          8000, 1);   //- left
    add_op_binary("v.op_infix_ge",          8000, 1);   //- left
    add_op_binary("v.op_infix_eq",          8000, 1);   //- left
    add_op_binary("v.op_infix_ne",          8000, 1);   //- left

    add_op_binary("v.op_infix_shl",         9000, 1);   //- left
    add_op_binary("v.op_infix_shr",         9000, 1);   //- left

    add_op_binary("v.op_infix_add",        10000, 1);   //- left
    add_op_binary("v.op_infix_sub",        10000, 1);   //- left
    add_op_binary("v.op_infix_mul",        11000, 1);   //- left
    add_op_binary("v.op_infix_div",        11000, 1);   //- left
    add_op_binary("v.op_infix_rem",        11000, 1);   //- left

    //-------------------------------------------------------------
    add_op_unary("v.op_prefix_inc",        20000);
    add_op_unary("v.op_prefix_dec",        20000);
    add_op_unary("v.op_prefix_plus",       20000);
    add_op_unary("v.op_prefix_minus",      20000);
    add_op_unary("v.op_prefix_star",       20000);
    add_op_unary("v.op_prefix_amp",        20000);
    add_op_unary("v.op_prefix_bang",       20000);
    add_op_unary("v.op_prefix_tilde",      20000);

    //-------------------------------------------------------------
    add_op_unary("v.op_postfix_inc",       30000);
    add_op_unary("v.op_postfix_dec",       30000);
    add_op_unary("v.op_postfix_call",      30000);
    add_op_unary("v.op_postfix_index",     30000);

    //-------------------------------------------------------------
    add_op_unary("v.op_parentheses",           0);      //- Sic!


    //-------------------------------------------------------------
    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("expr_call_tag",       q_ref, q("expr_call"));
    v_add_symbol("expr_identifier_tag", q_ref, q("expr_identifier"));

    //-------------------------------------------------------------
    q = v_quark_from_string;

    v_store(q("operator_unary"),  v_getelementptr(voidc_ast_operator_unary_vtable,  0, 2));
    v_store(q("operator_binary"), v_getelementptr(voidc_ast_operator_binary_vtable, 0, 2));
}

//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr);

    v_store(void_ptr, typ);

    ft = v_function_type(void, typ, 1, false);

    //-----------------------------------------------------------------
    v_function_hack("expr_oplist_cleaner", ft);
}
{
    v_terminate(expr_oplist);

//  printf("expr_oplist_cleaner()\n");
}


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
{   expr_oplist_ctor();

    v_add_cleaner(expr_oplist_cleaner, 0);
}


//=====================================================================
{   voidc_unit_begin_module("voidc_operator_methods_module"); }


//---------------------------------------------------------------------
//- vectorize_scalar - utility...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(v_type_ptr,   typ0);
    v_store(LLVMValueRef, typ1);
    v_store(type_ref,     typ2);
    v_store(value_ref,    typ3);

    ft = v_function_type(void, typ0, 4, false);

    v_add_type("vectorize_scalar_ft", ft);

    //-----------------------------------------------------------------
    f = v_function_hack("vectorize_scalar", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "type",      v_type_ptr);
    v_add_parameter_name(f, 1, "value",     LLVMValueRef);
    v_add_parameter_name(f, 2, "ret_type",  type_ref);
    v_add_parameter_name(f, 3, "ret_value", value_ref);
}
{
    //- type     must be scalar!
    //- ret_type must be vector!

    sz = v_type_vector_get_size(ret_type);
    sf = v_type_vector_is_scalable(ret_type);

    tmp_type  = v_reference(v_alloca(v_type_ptr));
    mask_type = v_reference(v_alloca(v_type_ptr));

    i32 = v_int_type(32);

    //- Result type...

    if (sf)         //- Scalable
    {
        v_assign(ret_type,  v_svector_type(type, sz));
        v_assign(tmp_type,  v_svector_type(type,  1));
        v_assign(mask_type, v_svector_type(i32,  sz));
    }
    else            //- Fixed
    {
        v_assign(ret_type,  v_vector_type(type, sz));
        v_assign(tmp_type,  v_vector_type(type,  1));
        v_assign(mask_type, v_vector_type(i32,  sz));
    }

    //- Result value...

    tmp_type_  = v_type_get_llvm_type(tmp_type);
    mask_type_ = v_type_get_llvm_type(mask_type);

    v = v_reference(v_alloca(LLVMValueRef));

    v_assign(v, LLVMGetUndef(tmp_type_));

    builder = v_target_get_builder();

    int_ = v_type_get_llvm_type(int);

    v_assign(v, LLVMBuildInsertElement(builder, v, value, LLVMConstNull(int_), ""));

    r = LLVMBuildShuffleVector(builder, v, v, LLVMConstNull(mask_type_), "");

    v_assign(ret_value, r);
}


//---------------------------------------------------------------------
//- convert_to_type - utility...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(void_ptr,     typ0);
    v_store(v_type_ptr,   typ1);
    v_store(LLVMValueRef, typ2);
    v_store(v_type_ptr,   typ3);

    ft = v_function_type(LLVMValueRef, typ0, 4, false);

    //-----------------------------------------------------------------
    //- convert_to_type_ctx_t ...
    //-----------------------------------------------------------------
    ctx_t = v_handler_type(ft);

    v_add_type("convert_to_type_ft",      ft);
    v_add_type("convert_to_type_ctx_t",   ctx_t);
    v_add_type("convert_to_type_ctx_ptr", v_pointer_type(ctx_t, 0));
}

//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("convert_to_type", convert_to_type_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_ctx", void_ptr);
    v_add_parameter_name(f, 1, "type",     v_type_ptr);
    v_add_parameter_name(f, 2, "value",    LLVMValueRef);
    v_add_parameter_name(f, 3, "to_type",  v_type_ptr);
}
{
    if (v_icmp(LLVMIntEQ, type, to_type))   v_return(value);

    st0 = v_type_get_scalar_type(type);
    st1 = v_type_get_scalar_type(to_type);

    //- st1 must be "bigger or equal" than st0 ...

    opcode = v_reference(v_alloca(LLVMOpcode));

    v_assign(opcode, 0);

    if (v_icmp(LLVMIntEQ, st0, st1))    //- No conversion...
    {
        v_assign(opcode, LLVMBitCast);
    }
    else
    {
        if (v_type_is_floating_point(st1))
        {
            if (v_type_is_floating_point(st0))
            {
                v_assign(opcode, LLVMFPExt);
            }
            else if (v_type_is_integer(st0))
            {
                if (v_type_integer_is_signed(st0))  v_assign(opcode, LLVMSIToFP);
                else                                v_assign(opcode, LLVMUIToFP);
            }
        }
        else if (v_type_is_integer(st0))
        {
            if (v_type_integer_is_signed(st0))  v_assign(opcode, LLVMSExt);
            else                                v_assign(opcode, LLVMZExt);
        }
    }

    if (opcode) ;
    else
    {
        ctx = v_cast(void_ctx, convert_to_type_ctx_ptr);

        v_return( v_handle(ctx, type, value, to_type) );            //- Sic!!!
    }

    is_vec0 = v_type_is_vector(type);
    is_vec1 = v_type_is_vector(to_type);

    builder = v_target_get_builder();

    if (v_icmp(LLVMIntEQ, is_vec0, is_vec1))
    {
        to_type_ = v_type_get_llvm_type(to_type);

        v_return(LLVMBuildCast(builder, opcode, value, to_type_, ""));
    }

    //- So, we must have:  (is_vec1 && !is_vec0)

    v = v_reference(v_alloca(LLVMValueRef));

    if (v_icmp(LLVMIntEQ, st0, st1))
    {
        v_assign(v, value);
    }
    else
    {
        st1_ = v_type_get_llvm_type(st1);

        v_assign(v, LLVMBuildCast(builder, opcode, value, st1_, ""));
    }

    t = v_reference(v_alloca(v_type_ptr));

    v_assign(t, to_type);

    vectorize_scalar(st1, v, t, v);

    v_return(v);
}


//---------------------------------------------------------------------
//- convert_to_common_type - utility...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(type_ref,     typ0);
    v_store(value_ref,    typ1);
    v_store(type_ref,     typ2);
    v_store(value_ref,    typ3);

    ft = v_function_type(void, typ0, 4, false);

    v_add_type("convert_to_common_type_ft", ft);

    //-----------------------------------------------------------------
    f = v_function_hack("convert_to_common_type", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "typ0", type_ref);
    v_add_parameter_name(f, 1, "val0", value_ref);
    v_add_parameter_name(f, 2, "typ1", type_ref);
    v_add_parameter_name(f, 3, "val1", value_ref);
}
{
    if (v_icmp(LLVMIntEQ, typ0, typ1))  v_return();

    st0 = v_type_get_scalar_type(typ0);
    st1 = v_type_get_scalar_type(typ1);

    st_com = v_reference(v_alloca(v_type_ptr));

    v_assign(st_com, 0);

    block
    {
        if (v_icmp(LLVMIntEQ, st0, st1))    { v_assign(st_com, st0);   v_break(); }


        f128 = v_f128_type();

        if (v_icmp(LLVMIntEQ, st0, f128))   { v_assign(st_com, st0);   v_break(); }
        if (v_icmp(LLVMIntEQ, st1, f128))   { v_assign(st_com, st1);   v_break(); }

        f64 = v_f64_type();

        if (v_icmp(LLVMIntEQ, st0, f64))    { v_assign(st_com, st0);   v_break(); }
        if (v_icmp(LLVMIntEQ, st1, f64))    { v_assign(st_com, st1);   v_break(); }

        f32 = v_f32_type();

        if (v_icmp(LLVMIntEQ, st0, f32))    { v_assign(st_com, st0);   v_break(); }
        if (v_icmp(LLVMIntEQ, st1, f32))    { v_assign(st_com, st1);   v_break(); }

        f16 = v_f16_type();

        if (v_icmp(LLVMIntEQ, st0, f16))    { v_assign(st_com, st0);   v_break(); }
        if (v_icmp(LLVMIntEQ, st1, f16))    { v_assign(st_com, st1);   v_break(); }


        signed0 = v_type_integer_is_signed(st0);
        signed1 = v_type_integer_is_signed(st1);

        width0 = v_type_integer_get_width(st0);
        width1 = v_type_integer_get_width(st1);

        if (v_icmp(LLVMIntEQ, signed0, signed1))
        {
            if (v_icmp(LLVMIntUGT, width0, width1)) v_assign(st_com, st0);
            else                                    v_assign(st_com, st1);

            v_break();
        }

        if (signed0)
        {
            //- signed0 == true
            //- signed1 == false

            if (v_icmp(LLVMIntUGE, width1, width0)) v_assign(st_com, st1);
            else                                    v_assign(st_com, st0);
        }
        else
        {
            //- signed0 == false
            //- signed1 == true

            if (v_icmp(LLVMIntUGE, width0, width1)) v_assign(st_com, st0);
            else                                    v_assign(st_com, st1);
        }
    }

    is_vec0 = v_type_is_vector(typ0);
    is_vec1 = v_type_is_vector(typ1);

    if (v_icmp(LLVMIntEQ, is_vec0, is_vec1))
    {
        if (v_icmp(LLVMIntNE, st0, st_com))
        {
            //- Convert val0 to typ1

            v_assign(val0, v_convert_to_type(typ0, val0, typ1));

            v_assign(typ0, typ1);
        }
        else
        {
            //- Convert val1 to typ0

            v_assign(val1, v_convert_to_type(typ1, val1, typ0));

            v_assign(typ1, typ0);
        }

        v_return();
    }

    if (is_vec0)    //- val1 is scalar
    {
        if (v_icmp(LLVMIntNE, st1, st_com))
        {
            //- Convert val1 to st_com

            v_assign(val1, v_convert_to_type(typ1, val1, st_com));
        }

        v_assign(typ1, typ0);       //- Sic!

        vectorize_scalar(st_com, val1, typ1, val1);

        if (v_icmp(LLVMIntNE, st0, st_com))
        {
            //- Convert val0 to typ1

            v_assign(val0, v_convert_to_type(typ0, val0, typ1));
        }

        v_return();
    }

    if (is_vec1)    //- val0 is scalar
    {
        if (v_icmp(LLVMIntNE, st0, st_com))
        {
            //- Convert val0 to st_com

            v_assign(val0, v_convert_to_type(typ0, val0, st_com));
        }

        v_assign(typ0, typ1);       //- Sic!

        vectorize_scalar(st_com, val0, typ0, val0);

        if (v_icmp(LLVMIntNE, st1, st_com))
        {
            //- Convert val1 to typ0

            v_assign(val1, v_convert_to_type(typ1, val1, typ0));
        }

        v_return();
    }

    //- ...
}


//---------------------------------------------------------------------
//- prepare_arguments - utility...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 6);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);
    typ4 = v_getelementptr(typ0, 4);
    typ5 = v_getelementptr(typ0, 5);

    v_store(v_ast_expr_ptr,    typ0);
    v_store(v_ast_expr_ptr,    typ1);
    v_store(voidc_visitor_ptr, typ2);
    v_store(type_ref,          typ3);
    v_store(value_ref,         typ4);
    v_store(value_ref,         typ5);

    ft = v_function_type(void, typ0, 6, false);

    //-----------------------------------------------------------------
    f = v_function_hack("prepare_arguments", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ast0",    v_ast_expr_ptr);
    v_add_parameter_name(f, 1, "ast1",    v_ast_expr_ptr);
    v_add_parameter_name(f, 2, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 3, "typ0",    type_ref);
    v_add_parameter_name(f, 4, "val0",    value_ref);
    v_add_parameter_name(f, 5, "val1",    value_ref);
}
{
    typ1 = v_reference(v_alloca(v_type_ptr));


    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(ast0, v_ast_base_ptr), visitor);

    v_assign(typ0, v_get_result_type());
    v_assign(val0, v_get_result_value());


    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(ast1, v_ast_base_ptr), visitor);

    v_assign(typ1, v_get_result_type());
    v_assign(val1, v_get_result_value());


    convert_to_common_type(typ0, val0, typ1, val1);
}


//---------------------------------------------------------------------
//- prepare_assign_arguments - utility...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 8);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);
    typ4 = v_getelementptr(typ0, 4);
    typ5 = v_getelementptr(typ0, 5);
    typ6 = v_getelementptr(typ0, 6);
    typ7 = v_getelementptr(typ0, 7);

    v_store(v_ast_expr_ptr,      typ0);
    v_store(v_ast_expr_ptr,      typ1);
    v_store(voidc_visitor_ptr,   typ2);
    v_store(type_ref,            typ3);
    v_store(value_ref,           typ4);
    v_store(type_ref,            typ5);
    v_store(value_ref,           typ6);
    v_store(bool,                typ7);

    ft = v_function_type(void, typ0, 8, false);

    //-----------------------------------------------------------------
    f = v_function_hack("prepare_assign_arguments", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ast0",    v_ast_expr_ptr);
    v_add_parameter_name(f, 1, "ast1",    v_ast_expr_ptr);
    v_add_parameter_name(f, 2, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 3, "typ0",    type_ref);
    v_add_parameter_name(f, 4, "val0",    value_ref);
    v_add_parameter_name(f, 5, "typ1",    type_ref);
    v_add_parameter_name(f, 6, "val1",    value_ref);
    v_add_parameter_name(f, 7, "flag",    bool);
}
{
    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(ast0, v_ast_base_ptr), visitor);

    v_assign(typ0, v_get_result_type());
    v_assign(val0, v_get_result_value());


    e0 = v_type_refptr_get_element_type(typ0);

    if (flag)
    {
        if (v_type_is_pointer(e0))  v_set_result_type(v_find_type("intptr_t"));
        else                        v_set_result_type(e0);
    }
    else
    {
        v_set_result_type(e0);
    }

    v_set_result_value(0);


    v_ast_accept_visitor(v_cast(ast1, v_ast_base_ptr), visitor);

    v_assign(typ1, v_get_result_type());
    v_assign(val1, v_get_result_value());
}


//---------------------------------------------------------------------
//- compile_op_ft - utility...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(v_type_ptr,   typ0);
    v_store(LLVMValueRef, typ1);
    v_store(LLVMValueRef, typ2);

    ft = v_function_type(LLVMValueRef, typ0, 3, false);

    v_add_type("compile_op_ft", ft);

    v_add_type("compile_op_ft_ptr", v_pointer_type(ft, 0));
}


//---------------------------------------------------------------------
//- compile_add - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_add", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    st = v_type_get_scalar_type(t0);

    if (v_type_is_pointer(st))
    {
        //- Pointer arithmetics!

        val = v_alloca(LLVMValueRef);

        v_store(v1, val);

        et = v_type_refptr_get_element_type(st);

        v_return(LLVMBuildGEP2(builder, v_type_get_llvm_type(et), v0, val, 1, ""));
    }

    //- Just numeric arithmetics...

    if (v_type_is_floating_point(st))
    {
        v_return(LLVMBuildFAdd(builder, v0, v1, ""));
    }
    else
    {
        v_return(LLVMBuildAdd(builder, v0, v1, ""));
    }
}

//---------------------------------------------------------------------
//- compile_sub - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_sub", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    st = v_type_get_scalar_type(t0);

    if (v_type_is_pointer(st))
    {
        //- Pointer arithmetics!

        val = v_alloca(LLVMValueRef);

        v_store(LLVMBuildNeg(builder, v1, ""), val);

        et = v_type_refptr_get_element_type(st);

        v_return(LLVMBuildGEP2(builder, v_type_get_llvm_type(et), v0, val, 1, ""));
    }

    //- Just numeric arithmetics...

    if (v_type_is_floating_point(st))
    {
        v_return(LLVMBuildFSub(builder, v0, v1, ""));
    }
    else
    {
        v_return(LLVMBuildSub(builder, v0, v1, ""));
    }
}

//---------------------------------------------------------------------
//- compile_mul - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_mul", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    if (v_type_is_floating_point(v_type_get_scalar_type(t0)))
    {
        v_return(LLVMBuildFMul(builder, v0, v1, ""));
    }
    else
    {
        v_return(LLVMBuildMul(builder, v0, v1, ""));
    }
}

//---------------------------------------------------------------------
//- compile_div - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_div", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    st = v_type_get_scalar_type(t0);

    if (v_type_is_floating_point(st))
    {
        v_return(LLVMBuildFDiv(builder, v0, v1, ""));
    }

    if (v_type_integer_is_signed(st))
    {
        v_return(LLVMBuildSDiv(builder, v0, v1, ""));
    }
    else
    {
        v_return(LLVMBuildUDiv(builder, v0, v1, ""));
    }
}

//---------------------------------------------------------------------
//- compile_rem - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_rem", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    st = v_type_get_scalar_type(t0);

    if (v_type_is_floating_point(st))
    {
        v_return(LLVMBuildFRem(builder, v0, v1, ""));
    }

    if (v_type_integer_is_signed(st))
    {
        v_return(LLVMBuildSRem(builder, v0, v1, ""));
    }
    else
    {
        v_return(LLVMBuildURem(builder, v0, v1, ""));
    }
}

//---------------------------------------------------------------------
//- compile_shl - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_shl", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    v_return(LLVMBuildShl(builder, v0, v1, ""));
}

//---------------------------------------------------------------------
//- compile_shr - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_shr", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    if (v_type_integer_is_signed(v_type_get_scalar_type(t0)))
    {
        v_return(LLVMBuildAShr(builder, v0, v1, ""));
    }
    else
    {
        v_return(LLVMBuildLShr(builder, v0, v1, ""));
    }
}

//---------------------------------------------------------------------
//- compile_and - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_and", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    v_return(LLVMBuildAnd(builder, v0, v1, ""));
}

//---------------------------------------------------------------------
//- compile_xor - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_xor", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    v_return(LLVMBuildXor(builder, v0, v1, ""));
}

//---------------------------------------------------------------------
//- compile_or - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_or", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    v_return(LLVMBuildOr(builder, v0, v1, ""));
}


//---------------------------------------------------------------------
//- compile_op_assign_helper_ft - utility
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 5);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);
    typ4 = v_getelementptr(typ0, 4);

    v_store(voidc_visitor_ptr, typ0);
    v_store(v_ast_expr_ptr,    typ1);
    v_store(v_ast_expr_ptr,    typ2);
    v_store(compile_op_ft_ptr, typ3);
    v_store(bool,              typ4);

    ft = v_function_type(void, typ0, 5, false);

    v_add_type("compile_op_assign_helper_ft", ft);
}

//---------------------------------------------------------------------
//- compile_op_assign_helper - utility
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_op_assign_helper", compile_op_assign_helper_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "ast0",    v_ast_expr_ptr);
    v_add_parameter_name(f, 2, "ast1",    v_ast_expr_ptr);
    v_add_parameter_name(f, 3, "compile", compile_op_ft_ptr);
    v_add_parameter_name(f, 4, "flag",    bool);
}
{
    ttag = v_get_result_type();
    vtag = v_get_result_value();


    t0 = v_reference(v_alloca(v_type_ptr));
    v0 = v_reference(v_alloca(LLVMValueRef));
    t1 = v_reference(v_alloca(v_type_ptr));
    v1 = v_reference(v_alloca(LLVMValueRef));

    prepare_assign_arguments(ast0, ast1, visitor, t0, v0, t1, v1, flag);


    builder = v_target_get_builder();

    e0 = v_type_refptr_get_element_type(t0);

    if (compile)
    {
        v = LLVMBuildLoad2(builder, v_type_get_llvm_type(e0), v0, "");

        v_assign(v1, compile(e0, v, v1));
    }
    else if (v_type_is_pointer(v_type_get_scalar_type(e0)))
    {
        v_assign(v1, v_convert_to_type(t1, v1, e0));
    }

    LLVMBuildStore(builder, v1, v0);


    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t0, v0);
}

//---------------------------------------------------------------------
//- op_assign_helper - utility
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(voidc_visitor_ptr, typ0);
    v_store(v_ast_base_ptr,    typ1);
    v_store(compile_op_ft_ptr, typ2);
    v_store(bool,              typ3);

    ft = v_function_type(void, typ0, 4, false);

    //-----------------------------------------------------------------
    f = v_function_hack("op_assign_helper", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "self",    v_ast_base_ptr);
    v_add_parameter_name(f, 2, "compile", compile_op_ft_ptr);
    v_add_parameter_name(f, 3, "flag",    bool);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    args = v_ast_expr_call_get_arg_list(call);

    ast0 = v_list_get_item(args, 1);        //- Sic!
    ast1 = v_list_get_item(args, 2);        //- Sic!


    compile_op_assign_helper(visitor, ast0, ast1, compile, flag);
}

//---------------------------------------------------------------------
//- op_addsub_assign_intrinsic - compiler intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("op_addsub_assign_intrinsic", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    compile = v_cast(aux, compile_op_ft_ptr);

    op_assign_helper(visitor, self, compile, true);
}

//---------------------------------------------------------------------
//- op_infix_assign_intrinsic - compiler intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("op_infix_assign_intrinsic", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    compile = v_cast(aux, compile_op_ft_ptr);

    op_assign_helper(visitor, self, compile, false);
}


//---------------------------------------------------------------------
//- check_logical_and - utility
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(v_ast_expr_ptr, typ0);
    v_store(expr_ptr_ptr,   typ1);
    v_store(expr_ptr_ptr,   typ2);

    ft = v_function_type(bool, typ0, 3, false);

    //-----------------------------------------------------------------
    f = v_function_hack("check_logical_and", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "arg", v_ast_expr_ptr);
    v_add_parameter_name(f, 1, "lhs", expr_ptr_ptr);
    v_add_parameter_name(f, 2, "rhs", expr_ptr_ptr);
}
{
    tag = v_ast_base_get_visitor_method_tag(v_cast(arg, v_ast_base_ptr));

    if (v_icmp(LLVMIntNE, tag, expr_call_tag))  v_return(false);

    etmp = v_ast_expr_call_get_fun_expr(arg);

    tag = v_ast_base_get_visitor_method_tag(v_cast(etmp, v_ast_base_ptr));

    if (v_icmp(LLVMIntNE, tag, expr_identifier_tag))
    {
        v_return(false);
    }

    qname = v_ast_expr_identifier_get_name_q(etmp);

    if (v_icmp(LLVMIntNE, qname, q_op_infix_logical_and))
    {
        v_return(false);
    }

    if (lhs) ;
    else if (rhs) ;
    else
    {
        v_return(true);
    }

    lst = v_ast_expr_call_get_arg_list(arg);

    if (lhs)  v_store(v_list_get_item(lst, 1), lhs);
    if (rhs)  v_store(v_list_get_item(lst, 2), rhs);

    v_return(true);
}

//---------------------------------------------------------------------
//- op_infix_logical_and - compiler intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("op_infix_logical_and", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    N = v_reference(v_alloca(int));
    v_assign(N, 2);

    {   ast = v_reference(v_alloca(v_ast_expr_ptr));

        v_assign(ast, v_list_get_item(arg_list, 1));

        loop
        {
            if (check_logical_and(ast, v_pointer(ast), 0)) ;
            else  v_break();

            v_assign(N, v_binop(LLVMAdd, N, 1));
        }
    }

    ast = v_malloc(v_ast_expr_ptr, N);

    {   ast_i = v_reference(v_alloca(expr_ptr_ptr));

        v_assign(ast_i, v_getelementptr(ast, v_binop(LLVMSub, N, 2)));

        v_store(v_list_get_item(arg_list, 1), ast_i);
        v_store(v_list_get_item(arg_list, 2), v_getelementptr(ast_i, 1));

        loop
        {
            ast_i1 = v_getelementptr(ast_i, -1);

            if (check_logical_and(v_load(ast_i), ast_i1, ast_i)) ;
            else  v_break();

            v_assign(ast_i, ast_i1);
        }
    }


    ttag = v_get_result_type();
    vtag = v_get_result_value();

    builder = v_target_get_builder();

    _bool = v_find_type("bool");

    bool_ = v_type_get_llvm_type(_bool);

    cur_b = LLVMGetInsertBlock(builder);

    cur_f = LLVMGetBasicBlockParent(cur_b);

    llvm_ctx = v_target_get_llvm_ctx();


    and_result_v = v_reference(v_alloca(LLVMValueRef));
    v_assign(and_result_v, 0);

    branch_if_false_b = v_reference(v_alloca(LLVMBasicBlockRef));

    static_result = v_reference(v_alloca(bool));


    i = v_reference(v_alloca(int));
    v_assign(i, 0);

    loop
    {
        if (v_icmp(LLVMIntEQ, i, N))  v_break();

        v_set_result_type(UNREFERENCE_TAG);
        v_set_result_value(0);

        ast_i = v_load(v_getelementptr(ast, i));

        v_ast_accept_visitor(v_cast(ast_i, v_ast_base_ptr), visitor);

        v = v_get_result_value();

        v = LLVMBuildIsNotNull(builder, v, "");

        v_assign(i, v_binop(LLVMAdd, i, 1));

        if (and_result_v) ;
        else
        {
            if (LLVMIsAConstantInt(v))
            {
                f = LLVMConstIntGetZExtValue(v);

                v_assign(static_result, v_cast(f, bool));

                if (static_result)  v_continue();
                else                v_break();          //- Sic!!!
            }

            v_assign(and_result_v, LLVMBuildAlloca(builder, bool_, ""));

            LLVMBuildStore(builder, LLVMConstNull(bool_), and_result_v);

            v_assign(branch_if_false_b, LLVMAppendBasicBlockInContext(llvm_ctx, cur_f, "branch_if_false_b"));
        }

        if (v_icmp(LLVMIntNE, i, N))
        {
            branch_if_true_b = LLVMAppendBasicBlockInContext(llvm_ctx, cur_f, "branch_if_true_b");

            LLVMBuildCondBr(builder, v, branch_if_true_b, branch_if_false_b);

            LLVMPositionBuilderAtEnd(builder, branch_if_true_b);
        }
        else        //- Last ...
        {
            LLVMBuildStore(builder, v, and_result_v);

            LLVMBuildBr(builder, branch_if_false_b);

            cur_b = LLVMGetInsertBlock(builder);

            LLVMMoveBasicBlockAfter(branch_if_false_b, cur_b);

            LLVMPositionBuilderAtEnd(builder, branch_if_false_b);
        }
    }

    v_free(ast);


    v = v_reference(v_alloca(LLVMValueRef));

    if (and_result_v)
    {
        v_assign(v, LLVMBuildLoad2(builder, bool_, and_result_v, ""));
    }
    else
    {
        v_assign(v, LLVMConstInt(bool_, static_result, false));
    }

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(_bool, v);       //- ?!?!?
}


//---------------------------------------------------------------------
//- check_logical_or - utility
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(v_ast_expr_ptr, typ0);
    v_store(expr_ptr_ptr,   typ1);
    v_store(expr_ptr_ptr,   typ2);

    ft = v_function_type(bool, typ0, 3, false);

    //-----------------------------------------------------------------
    f = v_function_hack("check_logical_or", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "arg", v_ast_expr_ptr);
    v_add_parameter_name(f, 1, "lhs", expr_ptr_ptr);
    v_add_parameter_name(f, 2, "rhs", expr_ptr_ptr);
}
{
    tag = v_ast_base_get_visitor_method_tag(v_cast(arg, v_ast_base_ptr));

    if (v_icmp(LLVMIntNE, tag, expr_call_tag))  v_return(false);

    etmp = v_ast_expr_call_get_fun_expr(arg);

    tag = v_ast_base_get_visitor_method_tag(v_cast(etmp, v_ast_base_ptr));

    if (v_icmp(LLVMIntNE, tag, expr_identifier_tag))
    {
        v_return(false);
    }

    qname = v_ast_expr_identifier_get_name_q(etmp);

    if (v_icmp(LLVMIntNE, qname, q_op_infix_logical_or))
    {
        v_return(false);
    }

    if (lhs) ;
    else if (rhs) ;
    else
    {
        v_return(true);
    }

    lst = v_ast_expr_call_get_arg_list(arg);

    if (lhs)  v_store(v_list_get_item(lst, 1), lhs);
    if (rhs)  v_store(v_list_get_item(lst, 2), rhs);

    v_return(true);
}

//---------------------------------------------------------------------
//- op_infix_logical_or - compiler intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("op_infix_logical_or", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    N = v_reference(v_alloca(int));
    v_assign(N, 2);

    {   ast = v_reference(v_alloca(v_ast_expr_ptr));

        v_assign(ast, v_list_get_item(arg_list, 1));

        loop
        {
            if (check_logical_or(ast, v_pointer(ast), 0)) ;
            else  v_break();

            v_assign(N, v_binop(LLVMAdd, N, 1));
        }
    }

    ast = v_malloc(v_ast_expr_ptr, N);

    {   ast_i = v_reference(v_alloca(expr_ptr_ptr));

        v_assign(ast_i, v_getelementptr(ast, v_binop(LLVMSub, N, 2)));

        v_store(v_list_get_item(arg_list, 1), ast_i);
        v_store(v_list_get_item(arg_list, 2), v_getelementptr(ast_i, 1));

        loop
        {
            ast_i1 = v_getelementptr(ast_i, -1);

            if (check_logical_or(v_load(ast_i), ast_i1, ast_i)) ;
            else  v_break();

            v_assign(ast_i, ast_i1);
        }
    }


    ttag = v_get_result_type();
    vtag = v_get_result_value();

    builder = v_target_get_builder();

    _bool = v_find_type("bool");

    bool_ = v_type_get_llvm_type(_bool);

    cur_b = LLVMGetInsertBlock(builder);

    cur_f = LLVMGetBasicBlockParent(cur_b);

    llvm_ctx = v_target_get_llvm_ctx();


    or_result_v = v_reference(v_alloca(LLVMValueRef));
    v_assign(or_result_v, 0);

    branch_if_true_b = v_reference(v_alloca(LLVMBasicBlockRef));

    static_result = v_reference(v_alloca(bool));


    i = v_reference(v_alloca(int));
    v_assign(i, 0);

    loop
    {
        if (v_icmp(LLVMIntEQ, i, N))  v_break();

        v_set_result_type(UNREFERENCE_TAG);
        v_set_result_value(0);

        ast_i = v_load(v_getelementptr(ast, i));

        v_ast_accept_visitor(v_cast(ast_i, v_ast_base_ptr), visitor);

        v = v_get_result_value();

        v = LLVMBuildIsNotNull(builder, v, "");

        v_assign(i, v_binop(LLVMAdd, i, 1));

        if (or_result_v) ;
        else
        {
            if (LLVMIsAConstantInt(v))
            {
                f = LLVMConstIntGetZExtValue(v);

                v_assign(static_result, v_cast(f, bool));

                if (static_result)  v_break();          //- Sic!!!
                else                v_continue();
            }

            v_assign(or_result_v, LLVMBuildAlloca(builder, bool_, ""));

            LLVMBuildStore(builder, LLVMConstAllOnes(bool_), or_result_v);

            v_assign(branch_if_true_b, LLVMAppendBasicBlockInContext(llvm_ctx, cur_f, "branch_if_true_b"));
        }

        if (v_icmp(LLVMIntNE, i, N))
        {
            branch_if_false_b = LLVMAppendBasicBlockInContext(llvm_ctx, cur_f, "branch_if_false_b");

            LLVMBuildCondBr(builder, v, branch_if_true_b, branch_if_false_b);

            LLVMPositionBuilderAtEnd(builder, branch_if_false_b);
        }
        else        //- Last ...
        {
            LLVMBuildStore(builder, v, or_result_v);

            LLVMBuildBr(builder, branch_if_true_b);

            cur_b = LLVMGetInsertBlock(builder);

            LLVMMoveBasicBlockAfter(branch_if_true_b, cur_b);

            LLVMPositionBuilderAtEnd(builder, branch_if_true_b);
        }
    }

    v_free(ast);


    v = v_reference(v_alloca(LLVMValueRef));

    if (or_result_v)
    {
        v_assign(v, LLVMBuildLoad2(builder, bool_, or_result_v, ""));
    }
    else
    {
        v_assign(v, LLVMConstInt(bool_, static_result, false));
    }

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(_bool, v);       //- ?!?!?
}


//---------------------------------------------------------------------
//- compile_op_binary_helper_ft - utility
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(voidc_visitor_ptr, typ0);
    v_store(v_ast_expr_ptr,    typ1);
    v_store(v_ast_expr_ptr,    typ2);
    v_store(void_ptr,          typ3);               //- Sic!

    ft = v_function_type(void, typ0, 4, false);

    v_add_type("compile_op_binary_helper_ft", ft);
}

//---------------------------------------------------------------------
//- compile_op_binary_helper - utility
//---------------------------------------------------------------------
{
    fun_ptr = v_pointer_type(compile_op_ft, 0);

    //-----------------------------------------------------------------
    f = v_function_hack("compile_op_binary_helper", compile_op_binary_helper_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "ast0",    v_ast_expr_ptr);
    v_add_parameter_name(f, 2, "ast1",    v_ast_expr_ptr);
    v_add_parameter_name(f, 3, "compile", void_ptr);
}
{
    ttag = v_get_result_type();
    vtag = v_get_result_value();


    t0 = v_reference(v_alloca(v_type_ptr));
    v0 = v_reference(v_alloca(LLVMValueRef));
    v1 = v_reference(v_alloca(LLVMValueRef));

    prepare_arguments(ast0, ast1, visitor, t0, v0, v1);

    compile = v_cast(compile, compile_op_ft_ptr);

    v = compile(t0, v0, v1);


    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t0, v);
}

//---------------------------------------------------------------------
//- op_binary_intrinsic - compiler intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("op_binary_intrinsic", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    args = v_ast_expr_call_get_arg_list(call);

    ast0 = v_list_get_item(args, 1);        //- Sic!
    ast1 = v_list_get_item(args, 2);        //- Sic!


    compile_op_binary_helper(visitor, ast0, ast1, aux);
}


//---------------------------------------------------------------------
//- compile_eq - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_eq", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    st = v_type_get_scalar_type(t0);

    if (v_type_is_floating_point(st))
    {
        v_return(LLVMBuildFCmp(builder, LLVMRealOEQ, v0, v1, ""));      //- 'O' ?
    }

    v_return(LLVMBuildICmp(builder, LLVMIntEQ, v0, v1, ""));
}

//---------------------------------------------------------------------
//- compile_ne - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_ne", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    st = v_type_get_scalar_type(t0);

    if (v_type_is_floating_point(st))
    {
        v_return(LLVMBuildFCmp(builder, LLVMRealUNE, v0, v1, ""));      //- 'U' ?
    }

    v_return(LLVMBuildICmp(builder, LLVMIntNE, v0, v1, ""));
}

//---------------------------------------------------------------------
//- compile_lt - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_lt", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    st = v_type_get_scalar_type(t0);

    if (v_type_is_floating_point(st))
    {
        v_return(LLVMBuildFCmp(builder, LLVMRealOLT, v0, v1, ""));      //- 'O' ?
    }

    s = v_type_integer_is_signed(st);

    if (s)  v_return(LLVMBuildICmp(builder, LLVMIntSLT, v0, v1, ""));
    else    v_return(LLVMBuildICmp(builder, LLVMIntULT, v0, v1, ""));
}

//---------------------------------------------------------------------
//- compile_le - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_le", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    st = v_type_get_scalar_type(t0);

    if (v_type_is_floating_point(st))
    {
        v_return(LLVMBuildFCmp(builder, LLVMRealOLE, v0, v1, ""));      //- 'O' ?
    }

    s = v_type_integer_is_signed(st);

    if (s)  v_return(LLVMBuildICmp(builder, LLVMIntSLE, v0, v1, ""));
    else    v_return(LLVMBuildICmp(builder, LLVMIntULE, v0, v1, ""));
}

//---------------------------------------------------------------------
//- compile_gt - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_gt", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    st = v_type_get_scalar_type(t0);

    if (v_type_is_floating_point(st))
    {
        v_return(LLVMBuildFCmp(builder, LLVMRealOGT, v0, v1, ""));      //- 'O' ?
    }

    s = v_type_integer_is_signed(st);

    if (s)  v_return(LLVMBuildICmp(builder, LLVMIntSGT, v0, v1, ""));
    else    v_return(LLVMBuildICmp(builder, LLVMIntUGT, v0, v1, ""));
}

//---------------------------------------------------------------------
//- compile_ge - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_ge", compile_op_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "v1", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    st = v_type_get_scalar_type(t0);

    if (v_type_is_floating_point(st))
    {
        v_return(LLVMBuildFCmp(builder, LLVMRealOGE, v0, v1, ""));      //- 'O' ?
    }

    s = v_type_integer_is_signed(st);

    if (s)  v_return(LLVMBuildICmp(builder, LLVMIntSGE, v0, v1, ""));
    else    v_return(LLVMBuildICmp(builder, LLVMIntUGE, v0, v1, ""));
}

//---------------------------------------------------------------------
//- compile_op_relation_helper - utility
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 7);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);
    typ4 = v_getelementptr(typ0, 4);
    typ5 = v_getelementptr(typ0, 5);
    typ6 = v_getelementptr(typ0, 6);

    v_store(voidc_visitor_ptr, typ0);
    v_store(void_ptr,          typ1);
    v_store(v_type_ptr,        typ2);
    v_store(LLVMValueRef,      typ3);
    v_store(v_ast_expr_ptr,    typ4);
    v_store(type_ref,          typ5);
    v_store(value_ref,         typ6);

    ft = v_function_type(LLVMValueRef, typ0, 7, false);

    v_add_type("compile_op_relation_helper_ft", ft);

    //-----------------------------------------------------------------
    f = v_function_hack("compile_op_relation_helper", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "compile", void_ptr);
    v_add_parameter_name(f, 2, "t0",      v_type_ptr);
    v_add_parameter_name(f, 3, "v0",      LLVMValueRef);
    v_add_parameter_name(f, 4, "rhs",     v_ast_expr_ptr);
    v_add_parameter_name(f, 5, "t1",      type_ref);
    v_add_parameter_name(f, 6, "v1",      value_ref);
}
{
    l_t0 = v_reference(v_alloca(v_type_ptr));
    l_v0 = v_reference(v_alloca(LLVMValueRef));
    l_t1 = v_reference(v_alloca(v_type_ptr));
    l_v1 = v_reference(v_alloca(LLVMValueRef));

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_adopt_result(t0, v0);

    v_assign(l_t0, v_get_result_type());
    v_assign(l_v0, v_get_result_value());

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(rhs, v_ast_base_ptr), visitor);

    v_assign(t1, v_get_result_type());
    v_assign(v1, v_get_result_value());

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_adopt_result(t1, v1);

    v_assign(l_t1, v_get_result_type());
    v_assign(l_v1, v_get_result_value());

    convert_to_common_type(l_t0, l_v0, l_t1, l_v1);

    compile = v_cast(compile, compile_op_ft_ptr);

    v_return(compile(l_t0, l_v0, l_v1));
}

//---------------------------------------------------------------------
//- check_relation - utility
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(v_ast_expr_ptr, typ0);
    v_store(expr_ptr_ptr,   typ1);
    v_store(expr_ptr_ptr,   typ2);

    ft = v_function_type(void_ptr, typ0, 3, false);

    v_add_type("check_relation_ft", ft);

    //-----------------------------------------------------------------
    f = v_function_hack("check_relation", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "arg", v_ast_expr_ptr);
    v_add_parameter_name(f, 1, "lhs", expr_ptr_ptr);
    v_add_parameter_name(f, 2, "rhs", expr_ptr_ptr);
}
{
    tag = v_ast_base_get_visitor_method_tag(v_cast(arg, v_ast_base_ptr));

    if (v_icmp(LLVMIntNE, tag, expr_call_tag))  v_return(0);

    etmp = v_ast_expr_call_get_fun_expr(arg);

    tag = v_ast_base_get_visitor_method_tag(v_cast(etmp, v_ast_base_ptr));

    if (v_icmp(LLVMIntNE, tag, expr_identifier_tag))
    {
        v_return(0);
    }

    qname = v_ast_expr_identifier_get_name_q(etmp);

    cr = v_reference(v_alloca(void_ptr));

    block
    {
        if (v_icmp(LLVMIntEQ, qname, q_op_infix_lt))  { v_assign(cr, compile_lt); v_break(); }
        if (v_icmp(LLVMIntEQ, qname, q_op_infix_le))  { v_assign(cr, compile_le); v_break(); }
        if (v_icmp(LLVMIntEQ, qname, q_op_infix_gt))  { v_assign(cr, compile_gt); v_break(); }
        if (v_icmp(LLVMIntEQ, qname, q_op_infix_ge))  { v_assign(cr, compile_ge); v_break(); }
        if (v_icmp(LLVMIntEQ, qname, q_op_infix_eq))  { v_assign(cr, compile_eq); v_break(); }
        if (v_icmp(LLVMIntEQ, qname, q_op_infix_ne))  { v_assign(cr, compile_ne); v_break(); }

        v_return(0);
    }

    if (lhs) ;
    else if (rhs) ;
    else
    {
        v_return(cr);
    }

    lst = v_ast_expr_call_get_arg_list(arg);

    if (lhs)  v_store(v_list_get_item(lst, 1), lhs);
    if (rhs)  v_store(v_list_get_item(lst, 2), rhs);

    v_return(cr);
}

//---------------------------------------------------------------------
//- relation_intrinsic - compiler intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("relation_intrinsic", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    N = v_reference(v_alloca(int));
    v_assign(N, 2);

    {   ast = v_reference(v_alloca(v_ast_expr_ptr));

        v_assign(ast, v_list_get_item(arg_list, 1));

        loop
        {
            if (check_relation(ast, v_pointer(ast), 0)) ;
            else  v_break();

            v_assign(N, v_binop(LLVMAdd, N, 1));
        }
    }

    ast = v_malloc(v_ast_expr_ptr, N);

    Nm1 = v_binop(LLVMSub, N, 1);

    rel = v_malloc(void_ptr, Nm1);

    {   ast_i = v_reference(v_alloca(expr_ptr_ptr));
        rel_i = v_reference(v_alloca(void_ptr_ptr));

        i = v_binop(LLVMSub, N, 2);

        v_assign(ast_i, v_getelementptr(ast, i));
        v_assign(rel_i, v_getelementptr(rel, i));

        v_store(v_list_get_item(arg_list, 1), ast_i);
        v_store(v_list_get_item(arg_list, 2), v_getelementptr(ast_i, 1));

        v_store(aux, rel_i);

        loop
        {
            ast_i1 = v_getelementptr(ast_i, -1);

            cr = check_relation(v_load(ast_i), ast_i1, ast_i);

            if (cr) ;
            else    v_break();

            v_assign(ast_i, ast_i1);
            v_assign(rel_i, v_getelementptr(rel_i, -1));

            v_store(cr, rel_i);
        }
    }


    ttag = v_get_result_type();
    vtag = v_get_result_value();

    builder = v_target_get_builder();

    cur_b = LLVMGetInsertBlock(builder);

    cur_f = LLVMGetBasicBlockParent(cur_b);

    cmp_result_v = v_reference(v_alloca(LLVMValueRef));
    v_assign(cmp_result_v, 0);

    branch_if_false_b = v_reference(v_alloca(LLVMBasicBlockRef));

    _bool = v_find_type("bool");

    bool_ = v_type_get_llvm_type(_bool);

    llvm_ctx = v_target_get_llvm_ctx();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(v_load(ast), v_ast_base_ptr), visitor);

    typ = v_reference(v_alloca(v_type_ptr));
    val = v_reference(v_alloca(LLVMValueRef));

    v_assign(typ, v_get_result_type());
    v_assign(val, v_get_result_value());

    r = v_reference(v_alloca(LLVMValueRef));

    i = v_reference(v_alloca(int));

    v_assign(i, 0);

    loop
    {
        if (v_icmp(LLVMIntEQ, i, Nm1))  v_break();

        rel_i = v_load(v_getelementptr(rel, i));

        v_assign(i, v_binop(LLVMAdd, i, 1));        //- Sic!

        ast_i = v_load(v_getelementptr(ast, i));

        v_assign(r, compile_op_relation_helper(visitor, rel_i, typ, val, ast_i, typ, val));

        if (cmp_result_v) ;
        else
        {
            if (LLVMIsAConstantInt(r))
            {
                f = LLVMConstIntGetZExtValue(r);

                if (f)  v_continue();
                else    v_break();          //- Sic!!!
            }

            if (v_icmp(LLVMIntNE, N, 2))
            {
                v_assign(cmp_result_v, LLVMBuildAlloca(builder, bool_, ""));

                LLVMBuildStore(builder, LLVMConstNull(bool_), cmp_result_v);

                v_assign(branch_if_false_b, LLVMAppendBasicBlockInContext(llvm_ctx, cur_f, "branch_if_false_b"));
            }
        }


        if (cmp_result_v)
        {
            if (v_icmp(LLVMIntNE, i, Nm1))
            {
                branch_if_true_b = LLVMAppendBasicBlockInContext(llvm_ctx, cur_f, "branch_if_true_b");

                LLVMBuildCondBr(builder, r, branch_if_true_b, branch_if_false_b);

                LLVMPositionBuilderAtEnd(builder, branch_if_true_b);
            }
            else        //- Last ...
            {
                LLVMBuildStore(builder, r, cmp_result_v);

                LLVMBuildBr(builder, branch_if_false_b);

                cur_b = LLVMGetInsertBlock(builder);

                LLVMMoveBasicBlockAfter(branch_if_false_b, cur_b);

                LLVMPositionBuilderAtEnd(builder, branch_if_false_b);

                v_assign(r, LLVMBuildLoad2(builder, bool_, cmp_result_v, ""));
            }
        }
    }

    v_free(ast);
    v_free(rel);


    if (v_type_is_vector(typ))
    {
        sz = v_type_vector_get_size(typ);

        if (v_type_vector_is_scalable(typ))
        {
            v_assign(typ, v_svector_type(_bool, sz));
        }
        else
        {
            v_assign(typ, v_vector_type(_bool, sz));
        }
    }
    else
    {
        v_assign(typ, _bool);
    }


    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(typ, r);
}


//---------------------------------------------------------------------
//- compile_infix_ft - utility
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 5);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);
    typ4 = v_getelementptr(typ0, 4);

    v_store(v_type_ptr,   typ0);
    v_store(LLVMValueRef, typ1);
    v_store(v_type_ptr,   typ2);
    v_store(LLVMValueRef, typ3);
    v_store(type_ref,     typ4);

    ft = v_function_type(LLVMValueRef, typ0, 5, false);

    v_add_type("compile_infix_ft", ft);

    v_add_type("compile_infix_ft_ptr", v_pointer_type(ft, 0));
}

//---------------------------------------------------------------------
//- compile_op_binary_addsub_helper - utility
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_op_binary_addsub_helper", compile_op_binary_helper_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "ast0",    v_ast_expr_ptr);
    v_add_parameter_name(f, 2, "ast1",    v_ast_expr_ptr);
    v_add_parameter_name(f, 3, "compile", void_ptr);
}
{
    ttag = v_get_result_type();
    vtag = v_get_result_value();


    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(ast0, v_ast_base_ptr), visitor);

    t0 = v_get_result_type();
    v0 = v_get_result_value();


    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(ast1, v_ast_base_ptr), visitor);

    t1 = v_get_result_type();
    v1 = v_get_result_value();


    compile = v_cast(compile, compile_infix_ft_ptr);

    t = v_reference(v_alloca(v_type_ptr));

    v = compile(t0, v0, t1, v1, t);


    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
//- op_binary_addsub_intrinsic - compiler intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("op_binary_addsub_intrinsic", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    args = v_ast_expr_call_get_arg_list(call);

    ast0 = v_list_get_item(args, 1);        //- Sic!
    ast1 = v_list_get_item(args, 2);        //- Sic!


    compile_op_binary_addsub_helper(visitor, ast0, ast1, aux);
}


//---------------------------------------------------------------------
//- compile_infix_add - utility
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_infix_add", compile_infix_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "t1", v_type_ptr);
    v_add_parameter_name(f, 3, "v1", LLVMValueRef);
    v_add_parameter_name(f, 4, "t",  type_ref);
}
{
    builder = v_target_get_builder();

    {   ptr_t  = v_reference(v_alloca(v_type_ptr));
        ptr_v  = v_reference(v_alloca(LLVMValueRef));
        step_t = v_reference(v_alloca(v_type_ptr));
        step_v = v_reference(v_alloca(LLVMValueRef));

        v_assign(ptr_t, 0);

        if (v_type_is_pointer(v_type_get_scalar_type(t0)))
        {
            v_assign(ptr_t,  t0);
            v_assign(ptr_v,  v0);
            v_assign(step_t, t1);
            v_assign(step_v, v1);
        }

        if (v_type_is_pointer(v_type_get_scalar_type(t1)))
        {
            v_assign(ptr_t,  t1);
            v_assign(ptr_v,  v1);
            v_assign(step_t, t0);
            v_assign(step_v, v0);
        }

        if (ptr_t)      //- Pointer arithmetics!
        {
            var_v = v_reference(v_alloca(LLVMValueRef));

            is_vec_p = v_type_is_vector(ptr_t);
            is_vec_s = v_type_is_vector(step_t);

            if (v_icmp(LLVMIntEQ, is_vec_p, is_vec_s))
            {
                v_assign(var_v, step_v);
            }
            else if (is_vec_p)
            {
                var_t = v_reference(v_alloca(v_type_ptr));

                v_assign(var_t, ptr_t);

                vectorize_scalar(step_t, step_v, var_t, var_v);
            }
            else    //- assert(is_vec_s);
            {
                pt = v_load(v_pointer(ptr_t));

                v_assign(ptr_t, step_t);

                vectorize_scalar(pt, ptr_v, ptr_t, ptr_v);

                v_assign(var_v, step_v);
            }

            st = v_type_get_scalar_type(ptr_t);
            et = v_type_refptr_get_element_type(st);

            v = LLVMBuildGEP2(builder, v_type_get_llvm_type(et), ptr_v, v_pointer(var_v), 1, "");

            v_assign(t, ptr_t);

            v_return(v);
        }
    }

    //- Just numeric arithmetics...

    t0 = v_assign(v_reference(v_alloca(v_type_ptr)),   t0);
    v0 = v_assign(v_reference(v_alloca(LLVMValueRef)), v0);
    t1 = v_assign(v_reference(v_alloca(v_type_ptr)),   t1);
    v1 = v_assign(v_reference(v_alloca(LLVMValueRef)), v1);

    convert_to_common_type(t0, v0, t1, v1);

    v_assign(t, t0);

    if (v_type_is_floating_point(v_type_get_scalar_type(t0)))
    {
        v_return(LLVMBuildFAdd(builder, v0, v1, ""));
    }
    else
    {
        v_return(LLVMBuildAdd(builder, v0, v1, ""));
    }
}


//---------------------------------------------------------------------
//- compile_infix_sub - utility
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_infix_sub", compile_infix_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "t0", v_type_ptr);
    v_add_parameter_name(f, 1, "v0", LLVMValueRef);
    v_add_parameter_name(f, 2, "t1", v_type_ptr);
    v_add_parameter_name(f, 3, "v1", LLVMValueRef);
    v_add_parameter_name(f, 4, "t",  type_ref);
}
{
    builder = v_target_get_builder();

    t0 = v_assign(v_reference(v_alloca(v_type_ptr)),   t0);
    v0 = v_assign(v_reference(v_alloca(LLVMValueRef)), v0);
    t1 = v_assign(v_reference(v_alloca(v_type_ptr)),   t1);
    v1 = v_assign(v_reference(v_alloca(LLVMValueRef)), v1);

    v = v_reference(v_alloca(LLVMValueRef));

    if (v_type_is_pointer(v_type_get_scalar_type(t0)))
    {
        //- Pointer arithmetics!

        is_vec0 = v_type_is_vector(t0);
        is_vec1 = v_type_is_vector(t1);

        if (v_icmp(LLVMIntEQ, is_vec0, is_vec1))
        {
            //- OK, NOP...
        }
        else if (is_vec0)
        {
            tt1 = v_load(v_pointer(t1));

            v_assign(t1, t0);

            vectorize_scalar(tt1, v1, t1, v1);
        }
        else    //- assert(is_vec1);
        {
            tt0 = v_load(v_pointer(t0));

            v_assign(t0, t1);

            vectorize_scalar(tt0, v0, t0, v0);
        }

        if (v_type_is_pointer(v_type_get_scalar_type(t1)))
        {
            //- Difference between two pointers

            st0 = v_type_get_scalar_type(t0);
            et0 = v_type_refptr_get_element_type(st0);

            v_assign(v, LLVMBuildPtrDiff2(builder, v_type_get_llvm_type(et0), v0, v1, ""));

            //- Compute result type...

            tv_ = LLVMTypeOf(v);

            if (v_type_is_vector(t0))
            {
                et_ = LLVMGetElementType(tv_);

                w = LLVMGetIntTypeWidth(et_);

                et = v_int_type(w);

                sz = v_type_vector_get_size(t0);
                sf = v_type_vector_is_scalable(t0);

                if (sf) v_assign(t0, v_svector_type(et, sz));
                else    v_assign(t0, v_vector_type(et, sz));
            }
            else
            {
                w = LLVMGetIntTypeWidth(tv_);

                v_assign(t0, v_int_type(w));
            }
        }
        else    //- Pointer minus "offset"...
        {
            v_assign(v1, LLVMBuildNeg(builder, v1, ""));

            st = v_type_get_scalar_type(t0);
            et = v_type_refptr_get_element_type(st);

            v_assign(v, LLVMBuildGEP2(builder, v_type_get_llvm_type(et), v0, v_pointer(v1), 1, ""));
        }
    }
    else    //- Just numeric arithmetics...
    {
        convert_to_common_type(t0, v0, t1, v1);

        if (v_type_is_floating_point(v_type_get_scalar_type(t0)))
        {
            v_assign(v, LLVMBuildFSub(builder, v0, v1, ""));
        }
        else
        {
            v_assign(v, LLVMBuildSub(builder, v0, v1, ""));
        }
    }

    v_assign(t, t0);

    v_return(v);
}


//---------------------------------------------------------------------
//- compile_inc_dec_helper - utility...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 5);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);
    typ4 = v_getelementptr(typ0, 4);

    v_store(voidc_visitor_ptr, typ0);
    v_store(type_ref,          typ1);
    v_store(LLVMValueRef,      typ2);
    v_store(int,               typ3);
    v_store(bool,              typ4);

    ft = v_function_type(LLVMValueRef, typ0, 5, false);

    //-----------------------------------------------------------------
    f = v_function_hack("compile_inc_dec_helper", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "t",       type_ref);
    v_add_parameter_name(f, 2, "v",       LLVMValueRef);
    v_add_parameter_name(f, 3, "delta",   int);
    v_add_parameter_name(f, 4, "is_pref", bool);
}
{
    et = v_type_refptr_get_element_type(t);

    st = v_type_get_scalar_type(et);


    step = v_alloca(v_ast_expr_t);
    v_initialize(step);

    v_ast_make_expr_integer(step, delta);

    step_base = v_cast(step, v_ast_base_ptr);


    pf = v_type_is_pointer(st);

    if (pf) v_set_result_type(v_find_type("int"));      //- ...
    else    v_set_result_type(st);

    v_set_result_value(0);

    v_ast_accept_visitor(step_base, visitor);

    step_t = v_get_result_type();
    step_v = v_get_result_value();

    v_terminate(step);


    var_v = v_reference(v_alloca(LLVMValueRef));

    if (v_type_is_vector(et))
    {
        var_t = v_reference(v_alloca(v_type_ptr));

        v_assign(var_t, et);

        vectorize_scalar(step_t, step_v, var_t, var_v);
    }
    else
    {
        v_assign(var_v, step_v);
    }


    builder = v_target_get_builder();

    ev = LLVMBuildLoad2(builder, v_type_get_llvm_type(et), v, "");

    if (pf)
    {
        est = v_type_refptr_get_element_type(st);

        v_assign(var_v, LLVMBuildGEP2(builder, v_type_get_llvm_type(est), ev, v_pointer(var_v), 1, ""));
    }
    else if (v_type_is_floating_point(st))
    {
        v_assign(var_v, LLVMBuildFAdd(builder, ev, var_v, ""));
    }
    else
    {
        v_assign(var_v, LLVMBuildAdd(builder, ev, var_v, ""));
    }

    LLVMBuildStore(builder, var_v, v);


    if (is_pref)
    {
        v_return(v);
    }
    else
    {
        v_assign(t, et);

        v_return(ev);
    }
}

//---------------------------------------------------------------------
//- compile_prefix_inc - utility...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(voidc_visitor_ptr, typ0);
    v_store(type_ref,          typ1);
    v_store(LLVMValueRef,      typ2);

    ft = v_function_type(LLVMValueRef, typ0, 3, false);

    v_add_type("compile_op_unary_ft", ft);
    v_add_type("compile_op_unary_ptr", v_pointer_type(ft, 0));

    //-----------------------------------------------------------------
    f = v_function_hack("compile_prefix_inc", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "vis", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "t",   type_ref);
    v_add_parameter_name(f, 2, "v",   LLVMValueRef);
}
{
    v_return(compile_inc_dec_helper(vis, t, v, 1, true));
}

//---------------------------------------------------------------------
//- compile_prefix_dec - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_prefix_dec", compile_op_unary_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "vis", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "t",   type_ref);
    v_add_parameter_name(f, 2, "v",   LLVMValueRef);
}
{
    v_return(compile_inc_dec_helper(vis, t, v, -1, true));
}

//---------------------------------------------------------------------
//- compile_prefix_plus - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_prefix_plus", compile_op_unary_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "vis", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "t",   type_ref);
    v_add_parameter_name(f, 2, "v",   LLVMValueRef);
}
{
    v_return(v);        //- Sic!
}

//---------------------------------------------------------------------
//- compile_prefix_minus - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_prefix_minus", compile_op_unary_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "vis", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "t",   type_ref);
    v_add_parameter_name(f, 2, "v",   LLVMValueRef);
}
{
    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_adopt_result(t, v);

    v_assign(t, v_get_result_type());

    v = v_get_result_value();

    builder = v_target_get_builder();

    if (v_type_is_floating_point(v_type_get_scalar_type(t)))
    {
        v_return(LLVMBuildFNeg(builder, v, ""));
    }
    else
    {
        v_return(LLVMBuildNeg(builder, v, ""));
    }
}

//---------------------------------------------------------------------
//- compile_prefix_star - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_prefix_star", compile_op_unary_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "vis", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "t",   type_ref);
    v_add_parameter_name(f, 2, "v",   LLVMValueRef);
}
{
    vr = v_reference(v_alloca(LLVMValueRef));

    v_assign(vr, v);

    if (v_type_is_reference(t))
    {
        v_assign(t, v_type_refptr_get_element_type(t));

        builder = v_target_get_builder();

        v_assign(vr, LLVMBuildLoad2(builder, v_type_get_llvm_type(t), v, ""));
    }

    e = v_type_refptr_get_element_type(t);
    a = v_type_refptr_get_address_space(t);

    v_assign(t, v_reference_type(e, a));

    v_return(vr);
}

//---------------------------------------------------------------------
//- compile_prefix_amp - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_prefix_amp", compile_op_unary_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "vis", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "t",   type_ref);
    v_add_parameter_name(f, 2, "v",   LLVMValueRef);
}
{
    v = v_assign(v_reference(v_alloca(LLVMValueRef)), v);

    if (v_type_is_reference(t))
    {
        e = v_type_refptr_get_element_type(t);
        a = v_type_refptr_get_address_space(t);

        v_assign(t, v_pointer_type(e, a));
    }
    else
    {
        if (LLVMIsConstant(v))
        {
            v1 = LLVMAddGlobal(v_get_module(), v_type_get_llvm_type(t), "tmp");

            LLVMSetInitializer(v1, v);

            LLVMSetLinkage(v1, LLVMPrivateLinkage);

            LLVMSetUnnamedAddress(v1, LLVMGlobalUnnamedAddr);

            LLVMSetGlobalConstant(v1, true);

            v_assign(v, v1);
        }
        else
        {
            v_assign(v, v_make_temporary(t, v));
        }

        v_assign(t, v_pointer_type(t, 0));
    }

    v_return(v);
}

//---------------------------------------------------------------------
//- compile_prefix_bang - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_prefix_bang", compile_op_unary_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "vis", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "t",   type_ref);
    v_add_parameter_name(f, 2, "v",   LLVMValueRef);
}
{
    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_adopt_result(t, v);

    v_assign(t, v_get_result_type());

    v = v_get_result_value();

    builder = v_target_get_builder();

    vr = LLVMBuildIsNull(builder, v, "");

    bool_ = v_find_type("bool");

    if (v_type_is_vector(t))
    {
        sz = v_type_vector_get_size(t);

        s = v_type_vector_is_scalable(t);

        if (s)  v_assign(t, v_svector_type(bool_, sz));
        else    v_assign(t, v_vector_type(bool_, sz));
    }
    else
    {
        v_assign(t, bool_);
    }

    v_return(vr);
}

//---------------------------------------------------------------------
//- compile_prefix_tilde - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_prefix_tilde", compile_op_unary_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "vis", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "t",   type_ref);
    v_add_parameter_name(f, 2, "v",   LLVMValueRef);
}
{
    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_adopt_result(t, v);

    v_assign(t, v_get_result_type());

    v = v_get_result_value();

    builder = v_target_get_builder();

    v_return(LLVMBuildNot(builder, v, ""));
}

//---------------------------------------------------------------------
//- compile_postfix_inc - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_postfix_inc", compile_op_unary_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "vis", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "t",   type_ref);
    v_add_parameter_name(f, 2, "v",   LLVMValueRef);
}
{
    v_return(compile_inc_dec_helper(vis, t, v, 1, false));
}

//---------------------------------------------------------------------
//- compile_postfix_dec - utility...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_postfix_dec", compile_op_unary_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "vis", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "t",   type_ref);
    v_add_parameter_name(f, 2, "v",   LLVMValueRef);
}
{
    v_return(compile_inc_dec_helper(vis, t, v, -1, false));
}

//---------------------------------------------------------------------
//- compile_op_unary_helper_ft - utility
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(voidc_visitor_ptr, typ0);
    v_store(v_ast_expr_ptr,    typ1);
    v_store(void_ptr,          typ2);               //- Sic!

    ft = v_function_type(void, typ0, 3, false);

    v_add_type("compile_op_unary_helper_ft", ft);
}

//---------------------------------------------------------------------
//- compile_op_unary_helper - utility
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_op_unary_helper", compile_op_unary_helper_ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "arg",     v_ast_expr_ptr);
    v_add_parameter_name(f, 2, "compile", void_ptr);
}
{
    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(arg, v_ast_base_ptr), visitor);

    t = v_get_result_type();
    v = v_get_result_value();

    t = v_assign(v_reference(v_alloca(v_type_ptr)), t);

    compile = v_cast(compile, compile_op_unary_ptr);

    v = compile(visitor, t, v);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
//- op_unary_intrinsic - utility
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("op_unary_intrinsic", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    args = v_ast_expr_call_get_arg_list(call);

    arg = v_list_get_item(args, 1);

    compile_op_unary_helper(visitor, arg, aux);
}


//---------------------------------------------------------------------
//- op_prefix_star - compiler intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("op_prefix_star", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    ast = v_list_get_item(arg_list, 1);


    ttag = v_get_result_type();
    vtag = v_get_result_value();


    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(ast, v_ast_base_ptr), visitor);

    t = v_get_result_type();
    v = v_get_result_value();

    if (v_icmp(LLVMIntEQ, t, v_static_type_t))          //- Type
    {
        typ = v_cast(v, v_type_ptr);

        typ = v_pointer_type(typ, 0);       //- ...

        v_set_result_value(v_cast(typ, LLVMValueRef));
    }
    else                                                //- Value
    {
        t = v_assign(v_reference(v_alloca(v_type_ptr)), t);

        v = compile_prefix_star(visitor, t, v);

        v_set_result_type(ttag);
        v_set_result_value(vtag);

        v_adopt_result(t, v);
    }
}

//---------------------------------------------------------------------
//- op_prefix_amp - compiler intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("op_prefix_amp", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    ast = v_list_get_item(arg_list, 1);


    ttag = v_get_result_type();
    vtag = v_get_result_value();


    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(ast, v_ast_base_ptr), visitor);

    t = v_get_result_type();
    v = v_get_result_value();

    if (v_icmp(LLVMIntEQ, t, v_static_type_t))          //- Type
    {
        typ = v_cast(v, v_type_ptr);

        typ = v_reference_type(typ, 0);     //- ...

        v_set_result_value(v_cast(typ, LLVMValueRef));
    }
    else                                                //- Value
    {
        t = v_assign(v_reference(v_alloca(v_type_ptr)), t);

        v = compile_prefix_amp(visitor, t, v);

        v_set_result_type(ttag);
        v_set_result_value(vtag);

        v_adopt_result(t, v);
    }
}


//---------------------------------------------------------------------
//- op_postfix_index_helper - utility
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(voidc_visitor_ptr, typ0);
    v_store(v_ast_expr_ptr,    typ1);
    v_store(v_type_ptr,        typ2);
    v_store(LLVMValueRef,      typ3);

    ft = v_function_type(void, typ0, 4, false);

    v_add_type("op_postfix_index_helper_ft", ft);

    //-----------------------------------------------------------------
    f = v_function_hack("op_postfix_index_helper", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "vis",  voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "eidx", v_ast_expr_ptr);
    v_add_parameter_name(f, 2, "t0",   v_type_ptr);
    v_add_parameter_name(f, 3, "v0",   LLVMValueRef);
}
{
    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(eidx, v_ast_base_ptr), vis);

    idx_t = v_reference(v_alloca(v_type_ptr));
    idx_v = v_reference(v_alloca(LLVMValueRef));

    v_assign(idx_t, v_get_result_type());
    v_assign(idx_v, v_get_result_value());

    block
    {
        st = v_type_get_scalar_type(idx_t);

        if (v_type_is_integer(st))         ;   else  v_break();
        if (v_type_integer_is_signed(st))  v_break();

        w = v_type_integer_get_width(st);

        if (v_icmp(LLVMIntUGE, w, 32))  v_break();

        t1 = v_reference(v_alloca(v_type_ptr));

        v_assign(t1, v_uint_type(32));

        if (v_type_is_vector(idx_t))
        {
            count = v_type_vector_get_size(idx_t);

            if (v_type_vector_is_scalable(idx_t))  v_assign(t1, v_svector_type(t1, count));
            else                                   v_assign(t1, v_vector_type(t1, count));
        }

        v_set_result_type(t1);
        v_set_result_value(0);

        v_adopt_result(idx_t, idx_v);

        v_assign(idx_t, v_get_result_type());
        v_assign(idx_v, v_get_result_value());
    }

    agg_t = v_reference(v_alloca(v_type_ptr));
    agg_v = v_reference(v_alloca(LLVMValueRef));

    v_assign(agg_t, t0);
    v_assign(agg_v, v0);

    builder = v_target_get_builder();

    if (v_type_is_reference(agg_t))
    {
        e = v_type_refptr_get_element_type(agg_t);

        if (v_type_is_pointer(e))
        {
            v_assign(agg_t, e);

            v_assign(agg_v, LLVMBuildLoad2(builder, v_type_get_llvm_type(agg_t), agg_v, "agg"));
        }
    }

    t = v_reference(v_alloca(v_type_ptr));
    v = v_reference(v_alloca(LLVMValueRef));

    if (v_type_is_pointer(agg_t))
    {
        v_assign(v, idx_v);     //- Sic...

        e = v_type_refptr_get_element_type(agg_t);

        v_assign(v, LLVMBuildGEP2(builder, v_type_get_llvm_type(e), agg_v, v_pointer(v), 1, ""));

        a = v_type_refptr_get_address_space(agg_t);

        v_assign(t, v_reference_type(e, a));
    }
    else if (v_type_is_reference(agg_t))
    {
        idxx = v_alloca(LLVMValueRef, 2);

        n0 = LLVMConstInt(v_type_get_llvm_type(int), 0, 0);

        v_store(n0,    idxx);
        v_store(idx_v, v_getelementptr(idxx, 1));

        e = v_type_refptr_get_element_type(agg_t);

        v_assign(v, LLVMBuildGEP2(builder, v_type_get_llvm_type(e), agg_v, idxx, 2, ""));

        a = v_type_refptr_get_address_space(agg_t);

        if (v_type_is_struct(e))
        {
            i = v_cast(LLVMConstIntGetZExtValue(idx_v), unsigned);

            e = v_load(v_getelementptr(v_type_struct_get_element_types(e), i));

            v_assign(t, v_reference_type(e, a));
        }
        else if (v_type_is_array(e))
        {
            e = v_type_array_get_element_type(e);

            v_assign(t, v_reference_type(e, a));
        }
        else    //- assert(v_type_is_vector(e)); ...
        {
            e = v_type_vector_get_element_type(e);

            v_assign(t, v_reference_type(e, a));
        }
    }
    else    //- Just aggregate value
    {
        if (v_type_is_vector(agg_t))
        {
            v_assign(v, LLVMBuildExtractElement(builder, agg_v, idx_v, ""));

            v_assign(t, v_type_vector_get_element_type(agg_t));
        }
        else
        {
            i = v_cast(LLVMConstIntGetZExtValue(idx_v), unsigned);

            v_assign(v, LLVMBuildExtractValue(builder, agg_v, i, ""));

            if (v_type_is_struct(agg_t))
            {
                v_assign(t, v_load(v_getelementptr(v_type_struct_get_element_types(agg_t), i)));
            }
            else    //- assert(v_type_is_array(agg_t));
            {
                v_assign(t, v_type_array_get_element_type(agg_t));
            }
        }
    }

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t, v);
}

//---------------------------------------------------------------------
//- check_index - utility
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(v_ast_expr_ptr, typ0);
    v_store(expr_ptr_ptr,   typ1);
    v_store(expr_ptr_ptr,   typ2);

    ft = v_function_type(bool, typ0, 3, false);

    //-----------------------------------------------------------------
    f = v_function_hack("check_index", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "arg", v_ast_expr_ptr);
    v_add_parameter_name(f, 1, "agg", expr_ptr_ptr);
    v_add_parameter_name(f, 2, "idx", expr_ptr_ptr);
}
{
    tag = v_ast_base_get_visitor_method_tag(v_cast(arg, v_ast_base_ptr));

    if (v_icmp(LLVMIntNE, tag, expr_call_tag))  v_return(false);

    etmp = v_ast_expr_call_get_fun_expr(arg);

    tag = v_ast_base_get_visitor_method_tag(v_cast(etmp, v_ast_base_ptr));

    if (v_icmp(LLVMIntNE, tag, expr_identifier_tag))
    {
        v_return(false);
    }

    qname = v_ast_expr_identifier_get_name_q(etmp);

    if (v_icmp(LLVMIntNE, qname, q_op_postfix_index))
    {
        v_return(false);
    }

    if (agg) ;
    else if (idx) ;
    else
    {
        v_return(true);
    }

    lst = v_ast_expr_call_get_arg_list(arg);

    if (agg)  v_store(v_list_get_item(lst, 1), agg);

    if (idx)
    {
        op = v_list_get_item(lst, 0);

        void_obj = v_ast_generic_get_object(op);

        obj = v_cast(void_obj, v_ast_operator_unary_ptr);

        pay = v_getelementptr(obj, 0, 2);

        idx_list = v_cast(pay, v_ast_expr_list_ptr);

        idx_count = v_list_get_size(idx_list);

        if (idx_count)  v_store(v_list_get_item(idx_list, 0), idx);         //- Just one!
        else            v_store(0, idx);                                    //- Sic!
    }

    v_return(true);
}

//---------------------------------------------------------------------
//- op_postfix_index - compiler intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("op_postfix_index", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    N = v_reference(v_alloca(int));
    v_assign(N, 1);

    {   ast = v_reference(v_alloca(v_ast_expr_ptr));

        v_assign(ast, v_list_get_item(arg_list, 1));

        loop
        {
            if (check_index(ast, v_pointer(ast), 0)) ;
            else  v_break();

            v_assign(N, v_binop(LLVMAdd, N, 1));
        }
    }

    agg = v_reference(v_alloca(v_ast_expr_ptr));

    v_assign(agg, v_list_get_item(arg_list, 1));

    idx = v_malloc(v_ast_expr_ptr, N);

    {   idx_i = v_reference(v_alloca(expr_ptr_ptr));

        i = v_binop(LLVMSub, N, 1);

        v_assign(idx_i, v_getelementptr(idx, i));

        op = v_list_get_item(arg_list, 0);

        void_obj = v_ast_generic_get_object(op);

        obj = v_cast(void_obj, v_ast_operator_unary_ptr);

        pay = v_getelementptr(obj, 0, 2);

        idx_list = v_cast(pay, v_ast_expr_list_ptr);

        idx_count = v_list_get_size(idx_list);

        if (idx_count)  v_store(v_list_get_item(idx_list, 0), idx_i);       //- Just one!
        else            v_store(0, idx_i);                                  //- Sic!

        loop
        {
            idx_i1 = v_getelementptr(idx_i, -1);

            if (check_index(agg, v_pointer(agg), idx_i1)) ;
            else  v_break();

            v_assign(idx_i, idx_i1);
        }
    }


    ttag = v_get_result_type();
    vtag = v_get_result_value();


    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(agg, v_ast_base_ptr), visitor);

    agg_t = v_reference(v_alloca(v_type_ptr));
    agg_v = v_reference(v_alloca(LLVMValueRef));

    v_assign(agg_t, v_get_result_type());
    v_assign(agg_v, v_get_result_value());


    if (v_icmp(LLVMIntEQ, agg_t, v_static_type_t))          //- Type
    {
        i = v_reference(v_alloca(int));

        v_assign(i, v_binop(LLVMSub, N, 1));

        loop
        {
            if (v_icmp(LLVMIntSLT, i, 0))  v_break();

            idx_i = v_load(v_getelementptr(idx, i));

            if (idx_i)
            {
                v_set_result_type(UNREFERENCE_TAG);
                v_set_result_value(0);

                v_ast_accept_visitor(v_cast(idx_i, v_ast_base_ptr), visitor);

                idx_v = v_get_result_value();

                n = v_cast(LLVMConstIntGetZExtValue(idx_v), uint64_t);

                typ = v_cast(agg_v, v_type_ptr);

                typ = v_array_type(typ, n);

                v_assign(agg_v, v_cast(typ, LLVMValueRef));
            }
            else    //- No indices!
            {
                typ0 = v_alloca(v_type_ptr, 2);
                typ1 = v_getelementptr(typ0, 1);

                incomplete_array_type_tag = v_struct_type_named_q(voidc_incomplete_array_type_tag);     //- Sic!

                v_store(incomplete_array_type_tag, typ0);
                v_store(v_cast(agg_v, v_type_ptr), typ1);

                typ = v_struct_type(typ0, 2, false);

                v_assign(agg_v, v_cast(typ, LLVMValueRef));
            }

            v_assign(i, v_binop(LLVMSub, i, 1));
        }

        v_set_result_type(v_static_type_t);
        v_set_result_value(agg_v);

        v_free(idx);

        v_return();
    }


    //- Value

    builder = v_target_get_builder();

    i = v_reference(v_alloca(int));

    v_assign(i, 0);

    loop
    {
        if (v_icmp(LLVMIntEQ, i, N))  v_break();

        idx_i = v_load(v_getelementptr(idx, i));

        v_set_result_type(INVIOLABLE_TAG);
        v_set_result_value(0);

        op_postfix_index_helper(visitor, idx_i, agg_t, agg_v);

        v_assign(agg_t, v_get_result_type());
        v_assign(agg_v, v_get_result_value());

        v_assign(i, v_binop(LLVMAdd, i, 1));
    }

    v_free(idx);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(agg_t, agg_v);
}


//---------------------------------------------------------------------
//- op_parentheses - compiler intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("op_parentheses", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    ast = v_list_get_item(arg_list, 1);         //- Sic!

    v_ast_accept_visitor(v_cast(ast, v_ast_base_ptr), visitor);
}


//---------------------------------------------------------------------
//- int - type intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_int_type_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    arg = v_list_get_item(arg_list, 0);

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(arg, v_ast_base_ptr), visitor);

    width_v = v_get_result_value();

    width = v_cast(LLVMConstIntGetZExtValue(width_v), unsigned);

    typ = v_int_type(width);

    v_set_result_type(v_static_type_t);
    v_set_result_value(v_cast(typ, LLVMValueRef));
}

//---------------------------------------------------------------------
//- uint - type intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_uint_type_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    arg = v_list_get_item(arg_list, 0);

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(arg, v_ast_base_ptr), visitor);

    width_v = v_get_result_value();

    width = v_cast(LLVMConstIntGetZExtValue(width_v), unsigned);

    typ = v_uint_type(width);

    v_set_result_type(v_static_type_t);
    v_set_result_value(v_cast(typ, LLVMValueRef));
}

//---------------------------------------------------------------------
//- float - type intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_float_type_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    arg = v_list_get_item(arg_list, 0);

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(arg, v_ast_base_ptr), visitor);

    width_v = v_get_result_value();

    width = v_cast(LLVMConstIntGetZExtValue(width_v), int);

    typ = v_reference(v_alloca(v_type_ptr));

    switch(width)
    {
    case  16:   v_assign(typ, v_f16_type());    v_break();
    case  32:   v_assign(typ, v_f32_type());    v_break();
    case  64:   v_assign(typ, v_f64_type());    v_break();
    case 128:   v_assign(typ, v_f128_type());   v_break();
    }

    v_set_result_type(v_static_type_t);
    v_set_result_value(v_cast(typ, LLVMValueRef));
}

//---------------------------------------------------------------------
//- v_ptr - type intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ptr_type_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "aux",  void_ptr);
    v_add_parameter_name(f, 1, "vis",  voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self", v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    args = v_ast_expr_call_get_arg_list(call);

    ast0 = v_list_get_item(args, 0);
    ast1 = v_list_get_item(args, 1);


    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(ast0, v_ast_base_ptr), vis);

    et = v_cast(v_get_result_value(), v_type_ptr);


    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(ast1, v_ast_base_ptr), vis);

    as_v = v_get_result_value();

    as = v_cast(LLVMConstIntGetZExtValue(as_v), unsigned);

    typ = v_pointer_type(et, as);

    v_set_result_type(v_static_type_t);
    v_set_result_value(v_cast(typ, LLVMValueRef));
}

//---------------------------------------------------------------------
//- v_ref - type intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ref_type_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "aux",  void_ptr);
    v_add_parameter_name(f, 1, "vis",  voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self", v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    args = v_ast_expr_call_get_arg_list(call);

    ast0 = v_list_get_item(args, 0);
    ast1 = v_list_get_item(args, 1);


    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(ast0, v_ast_base_ptr), vis);

    et = v_cast(v_get_result_value(), v_type_ptr);


    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(ast1, v_ast_base_ptr), vis);

    as_v = v_get_result_value();

    as = v_cast(LLVMConstIntGetZExtValue(as_v), unsigned);

    typ = v_reference_type(et, as);

    v_set_result_type(v_static_type_t);
    v_set_result_value(v_cast(typ, LLVMValueRef));
}

//---------------------------------------------------------------------
//- vec - type intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_vec_type_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    arg0 = v_list_get_item(arg_list, 0);
    arg1 = v_list_get_item(arg_list, 1);


    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(arg0, v_ast_base_ptr), visitor);

    elt = v_cast(v_get_result_value(), v_type_ptr);


    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(arg1, v_ast_base_ptr), visitor);

    size_v = v_get_result_value();

    size = v_cast(LLVMConstIntGetZExtValue(size_v), unsigned);

    typ = v_vector_type(elt, size);

    v_set_result_type(v_static_type_t);
    v_set_result_value(v_cast(typ, LLVMValueRef));
}

//---------------------------------------------------------------------
//- svec - type intrinsic
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_svec_type_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    arg0 = v_list_get_item(arg_list, 0);
    arg1 = v_list_get_item(arg_list, 1);


    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(arg0, v_ast_base_ptr), visitor);

    elt = v_cast(v_get_result_value(), v_type_ptr);


    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(v_cast(arg1, v_ast_base_ptr), visitor);

    size_v = v_get_result_value();

    size = v_cast(LLVMConstIntGetZExtValue(size_v), unsigned);

    typ = v_svector_type(elt, size);

    v_set_result_type(v_static_type_t);
    v_set_result_value(v_cast(typ, LLVMValueRef));
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    v_function_hack("voidc_ast_add_operator_methods", ft);
}
{
    {   sstr = v_alloca(v_std_string_t);
        v_initialize(sstr);

        count = v_list_get_size(expr_oplist);
        count = v_cast(count, int);

        i = v_reference(v_alloca(int));

        v_assign(i, 0);

        loop
        {
            if (v_icmp(LLVMIntEQ, i, count))  v_break();


            op = v_list_get_item(expr_oplist, i);

            void_obj = v_ast_generic_get_object(op);

            quark = v_load(v_cast(void_obj, quark_ptr));        //- Sic!!!

            name = v_getelementptr(v_quark_to_string(quark), 2);    //- Skip "v."

            v_std_string_set(sstr, "v_");

            v_std_string_append(sstr, name);

            v_add_symbol(v_std_string_get(sstr), v_ast_expr_t, op);


            v_assign(i, v_binop(LLVMAdd, i, 1));
        }

        v_terminate(sstr);
    }

    //-----------------------------------------------------------------
    v_add_intrinsic("v.op_infix_assign",     op_infix_assign_intrinsic,  0);
    v_add_intrinsic("v.op_infix_add_assign", op_addsub_assign_intrinsic, compile_add);
    v_add_intrinsic("v.op_infix_sub_assign", op_addsub_assign_intrinsic, compile_sub);
    v_add_intrinsic("v.op_infix_mul_assign", op_infix_assign_intrinsic,  compile_mul);
    v_add_intrinsic("v.op_infix_div_assign", op_infix_assign_intrinsic,  compile_div);
    v_add_intrinsic("v.op_infix_rem_assign", op_infix_assign_intrinsic,  compile_rem);
    v_add_intrinsic("v.op_infix_shl_assign", op_infix_assign_intrinsic,  compile_shl);
    v_add_intrinsic("v.op_infix_shr_assign", op_infix_assign_intrinsic,  compile_shr);
    v_add_intrinsic("v.op_infix_and_assign", op_infix_assign_intrinsic,  compile_and);
    v_add_intrinsic("v.op_infix_xor_assign", op_infix_assign_intrinsic,  compile_xor);
    v_add_intrinsic("v.op_infix_or_assign",  op_infix_assign_intrinsic,  compile_or);

    v_add_intrinsic("v.op_infix_logical_or",  op_infix_logical_or,  0);
    v_add_intrinsic("v.op_infix_logical_and", op_infix_logical_and, 0);

    v_add_intrinsic("v.op_infix_or",  op_binary_intrinsic, compile_or);
    v_add_intrinsic("v.op_infix_xor", op_binary_intrinsic, compile_xor);
    v_add_intrinsic("v.op_infix_and", op_binary_intrinsic, compile_and);

    v_add_intrinsic("v.op_infix_lt",  relation_intrinsic, compile_lt);
    v_add_intrinsic("v.op_infix_le",  relation_intrinsic, compile_le);
    v_add_intrinsic("v.op_infix_gt",  relation_intrinsic, compile_gt);
    v_add_intrinsic("v.op_infix_ge",  relation_intrinsic, compile_ge);
    v_add_intrinsic("v.op_infix_eq",  relation_intrinsic, compile_eq);
    v_add_intrinsic("v.op_infix_ne",  relation_intrinsic, compile_ne);

    v_add_intrinsic("v.op_infix_shl", op_binary_intrinsic, compile_shl);
    v_add_intrinsic("v.op_infix_shr", op_binary_intrinsic, compile_shr);

    v_add_intrinsic("v.op_infix_add", op_binary_addsub_intrinsic, compile_infix_add);
    v_add_intrinsic("v.op_infix_sub", op_binary_addsub_intrinsic, compile_infix_sub);

    v_add_intrinsic("v.op_infix_mul", op_binary_intrinsic, compile_mul);
    v_add_intrinsic("v.op_infix_div", op_binary_intrinsic, compile_div);
    v_add_intrinsic("v.op_infix_rem", op_binary_intrinsic, compile_rem);

    v_add_intrinsic("v.op_prefix_inc",    op_unary_intrinsic, compile_prefix_inc);
    v_add_intrinsic("v.op_prefix_dec",    op_unary_intrinsic, compile_prefix_dec);
    v_add_intrinsic("v.op_prefix_plus",   op_unary_intrinsic, compile_prefix_plus);
    v_add_intrinsic("v.op_prefix_minus",  op_unary_intrinsic, compile_prefix_minus);
    v_add_intrinsic("v.op_prefix_star",   op_prefix_star,     0);
    v_add_intrinsic("v.op_prefix_amp",    op_prefix_amp,      0);
    v_add_intrinsic("v.op_prefix_bang",   op_unary_intrinsic, compile_prefix_bang);
    v_add_intrinsic("v.op_prefix_tilde",  op_unary_intrinsic, compile_prefix_tilde);
    v_add_intrinsic("v.op_postfix_inc",   op_unary_intrinsic, compile_postfix_inc);
    v_add_intrinsic("v.op_postfix_dec",   op_unary_intrinsic, compile_postfix_dec);

    v_add_intrinsic("v.op_postfix_index", op_postfix_index,   0);

    v_add_intrinsic("v.op_parentheses",   op_parentheses,     0);


    //-------------------------------------------------------------
    saved_ctx = v_malloc(convert_to_type_ctx_t);

    saved_ctx_fun = v_getelementptr(saved_ctx, 0, 0);
    saved_ctx_ctx = v_getelementptr(saved_ctx, 0, 1);

    v_store(v_get_convert_to_type_hook(saved_ctx_ctx), saved_ctx_fun);

    v_set_convert_to_type_hook(convert_to_type, saved_ctx);

    v_add_local_cleaner(free, saved_ctx);


    //-------------------------------------------------------------
    q = v_quark_from_string;

    v_add_intrinsic_q(q("int"),   voidc_int_type_intrinsic, 0);
    v_add_intrinsic_q(q("uint"),  voidc_uint_type_intrinsic, 0);

    v_add_intrinsic_q(q("float"), voidc_float_type_intrinsic, 0);

    v_add_intrinsic_q(q("v_ptr"), voidc_ptr_type_intrinsic, 0);
    v_add_intrinsic_q(q("v_ref"), voidc_ref_type_intrinsic, 0);

    v_add_intrinsic_q(q("vec"),   voidc_vec_type_intrinsic, 0);
    v_add_intrinsic_q(q("svec"),  voidc_svec_type_intrinsic, 0);

    //-------------------------------------------------------------
    v_add_symbol("voidc_internal_vectorize_scalar", vectorize_scalar_ft, vectorize_scalar);

    v_add_symbol("voidc_internal_compile_add_helper", compile_op_ft, compile_add);
    v_add_symbol("voidc_internal_compile_sub_helper", compile_op_ft, compile_sub);
    v_add_symbol("voidc_internal_compile_mul_helper", compile_op_ft, compile_mul);
    v_add_symbol("voidc_internal_compile_div_helper", compile_op_ft, compile_div);
    v_add_symbol("voidc_internal_compile_rem_helper", compile_op_ft, compile_rem);
    v_add_symbol("voidc_internal_compile_shl_helper", compile_op_ft, compile_shl);
    v_add_symbol("voidc_internal_compile_shr_helper", compile_op_ft, compile_shr);
    v_add_symbol("voidc_internal_compile_and_helper", compile_op_ft, compile_and);
    v_add_symbol("voidc_internal_compile_xor_helper", compile_op_ft, compile_xor);
    v_add_symbol("voidc_internal_compile_or_helper",  compile_op_ft, compile_or);

    v_add_symbol("voidc_internal_compile_infix_add_helper", compile_infix_ft, compile_infix_add);
    v_add_symbol("voidc_internal_compile_infix_sub_helper", compile_infix_ft, compile_infix_sub);

    v_add_symbol("voidc_internal_convert_to_common_type_helper", convert_to_common_type_ft, convert_to_common_type);

    v_add_symbol("voidc_internal_compile_op_assign_helper",
                 compile_op_assign_helper_ft,
                 compile_op_assign_helper);

    v_add_symbol("voidc_internal_compile_op_binary_addsub_helper",
                 compile_op_binary_helper_ft,
                 compile_op_binary_addsub_helper);

    v_add_symbol("voidc_internal_compile_op_binary_helper",
                 compile_op_binary_helper_ft,
                 compile_op_binary_helper);

    v_add_symbol("voidc_internal_compile_eq_helper", compile_op_ft, compile_eq);
    v_add_symbol("voidc_internal_compile_ne_helper", compile_op_ft, compile_ne);
    v_add_symbol("voidc_internal_compile_lt_helper", compile_op_ft, compile_lt);
    v_add_symbol("voidc_internal_compile_le_helper", compile_op_ft, compile_le);
    v_add_symbol("voidc_internal_compile_gt_helper", compile_op_ft, compile_gt);
    v_add_symbol("voidc_internal_compile_ge_helper", compile_op_ft, compile_ge);

    v_add_symbol("voidc_internal_compile_op_relation_helper",
                 compile_op_relation_helper_ft,
                 compile_op_relation_helper);

    v_add_symbol("voidc_internal_compile_prefix_inc",   compile_op_unary_ft, compile_prefix_inc);
    v_add_symbol("voidc_internal_compile_prefix_dec",   compile_op_unary_ft, compile_prefix_dec);
    v_add_symbol("voidc_internal_compile_prefix_plus",  compile_op_unary_ft, compile_prefix_plus);
    v_add_symbol("voidc_internal_compile_prefix_minus", compile_op_unary_ft, compile_prefix_minus);
    v_add_symbol("voidc_internal_compile_prefix_star",  compile_op_unary_ft, compile_prefix_star);
    v_add_symbol("voidc_internal_compile_prefix_amp",   compile_op_unary_ft, compile_prefix_amp);
    v_add_symbol("voidc_internal_compile_prefix_bang",  compile_op_unary_ft, compile_prefix_bang);
    v_add_symbol("voidc_internal_compile_prefix_tilde", compile_op_unary_ft, compile_prefix_tilde);
    v_add_symbol("voidc_internal_compile_postfix_inc",  compile_op_unary_ft, compile_postfix_inc);
    v_add_symbol("voidc_internal_compile_postfix_dec",  compile_op_unary_ft, compile_postfix_dec);

    v_add_symbol("voidc_internal_compile_op_unary_helper",
                 compile_op_unary_helper_ft,
                 compile_op_unary_helper);

    v_add_symbol("voidc_internal_op_postfix_index_helper",
                 op_postfix_index_helper_ft,
                 op_postfix_index_helper);
}


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    v_make_export_symbol("v_ast_make_operator_unary");
    v_make_export_symbol("v_ast_make_operator_binary");

    v_make_export_symbol("voidc_ast_add_operator_methods");
}


