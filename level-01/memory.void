//---------------------------------------------------------------------
//- Copyright (C) 2020-2023 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("memory.void  must be imported into the voidc target only!");

    v_import("level-00");

    v_import("llvm-c/Core.void");

    v_import("function_hack.void");
    v_import("if_then_else.void");
    v_import("arithmetic.void");
    v_import("block.void");
}

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   llvm_opaque_type = v_type_refptr_get_element_type(LLVMTypeRef);

    v_add_symbol("int_", llvm_opaque_type, v_type_get_llvm_type(int));

    v_add_type("void_ptr", v_pointer_type(void, 0));
}


//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("voidc_memory_intrinsics_module");

    v_set_module(module);       //- Sic!

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}


//---------------------------------------------------------------------
//- v_malloc
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    malloc_f = v_function_hack("voidc_memory_malloc_intrinsic", voidc_intrinsic_t);

    aux     = v_add_parameter_name(malloc_f, 0, "aux",     void_ptr);
    visitor = v_add_parameter_name(malloc_f, 1, "visitor", voidc_visitor_ptr);
    self    = v_add_parameter_name(malloc_f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    args_count = v_list_get_size(arg_list);

    num_var = v_alloca(LLVMValueRef);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    if (v_icmp(LLVMIntEQ, args_count, v_cast(1, size_t)))
    {
        n1_v = LLVMConstInt(int_, 1, 0);

        v_store(n1_v, num_var);
    }
    else
    {
        v_set_result_type(UNREFERENCE_TAG);
        v_set_result_value(0);

        arg1 = v_list_get_item(arg_list, 1);

        base_arg1 = v_cast(arg1, v_ast_base_ptr);

        v_ast_accept_visitor(base_arg1, visitor);

        num = v_get_result_value();

        v_store(num, num_var);
    }

    number = v_load(num_var);

    builder = v_target_get_builder();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    arg0 = v_list_get_item(arg_list, 0);

    arg0_base = v_cast(arg0, v_ast_base_ptr);

    v_ast_accept_visitor(arg0_base, visitor);

    type  = v_cast(v_get_result_value(), v_type_ptr);
    type_ = v_type_get_llvm_type(type);

    ret = LLVMBuildArrayMalloc(builder, type_, number, "");

    pt = v_pointer_type(type, 0);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(pt, ret);
}


//---------------------------------------------------------------------
//- v_free
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_memory_free_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    call = v_cast(self, v_ast_expr_ptr);

    arg_list = v_ast_expr_call_get_arg_list(call);

    builder = v_target_get_builder();

    v_set_result_type(UNREFERENCE_TAG);
    v_set_result_value(0);

    arg = v_list_get_item(arg_list, 0);

    arg_base = v_cast(arg, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor);

    arg = v_get_result_value();

    LLVMBuildFree(builder, arg);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_unit_load_module_to_jit(module, true);

    LLVMDisposeModule(module);
    v_set_module(0);
}

{   v_export_intrinsic("v_malloc", voidc_memory_malloc_intrinsic, 0);
    v_export_intrinsic("v_free",   voidc_memory_free_intrinsic,   0);
}


