//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("block.void  must be imported into the voidc target only!");

    v_import("level-00");

    v_import("llvm-c/Core.void");

    v_import("function_hack.void");
    v_import("if_then_else.void");
    v_import("arithmetic.void");
}

//{ v_import("printf.void"); }

{   voidc_enable_statement_if_then_else();
}


//---------------------------------------------------------------------
{   v_add_type("void_ptr", v_pointer_type(void, 0));

    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("voidc_internal_branch_target_break_variable_q", q_ref, q("voidc.internal_branch_target_break_variable"));
    v_add_symbol("voidc_internal_branch_target_break_q",          q_ref, q("voidc.internal_branch_target_break"));
    v_add_symbol("voidc_internal_branch_target_leave_q",          q_ref, q("voidc.internal_branch_target_leave"));
}

//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 2);
    typ1 = v_getelementptr(typ0, 1);


    //-----------------------------------------------------------------
    //- ast_stmt_block_t ...
    //-----------------------------------------------------------------
    ast_stmt_block_t = v_struct_type_named("struct.v_ast_stmt_block");

    v_store(v_ast_stmt_list_t, typ0);
    v_store(bool,              typ1);

    v_type_struct_set_body(ast_stmt_block_t, typ0, 2, false);

    ast_stmt_block_ptr = v_pointer_type(ast_stmt_block_t, 0);

    v_export_type("v_ast_stmt_block_t", ast_stmt_block_t);

    v_add_type("ast_stmt_block_t",   ast_stmt_block_t);
    v_add_type("ast_stmt_block_ptr", ast_stmt_block_ptr);

    size_v = LLVMSizeOf(v_type_get_llvm_type(ast_stmt_block_t));

    v_add_constant("ast_stmt_block_t_size", size_t, size_v);
}


//=====================================================================
{   voidc_unit_begin_module("voidc_stmt_block_module"); }


//---------------------------------------------------------------------
//- quark ...
//---------------------------------------------------------------------
{
    quark_name = "stmt_block";

    quark_p = v_quark_ptr_from_string(quark_name);

    v_add_symbol("quark", v_reference_type(v_quark_t, 0), quark_p);
}


//---------------------------------------------------------------------
//- init ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_block_init", v_ast_generic_init_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, ast_stmt_block_ptr);

    stmt_list = v_getelementptr(obj, 0, 0);

    v_initialize(stmt_list);
}


//---------------------------------------------------------------------
//- term ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_block_term", v_ast_generic_term_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, ast_stmt_block_ptr);

    stmt_list = v_getelementptr(obj, 0, 0);

    v_terminate(stmt_list);
}


//-----------------------------------------------------------------------
//- vtable ...
//-------------------------------------------------------------------
{
    module = v_get_module();

    val0 = v_alloca(LLVMValueRef, 3);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);

    init_f   = v_obtain_function("voidc_ast_stmt_block_init", 0);
    term_f   = v_obtain_function("voidc_ast_stmt_block_term", 0);
    quark_u  = LLVMGetUndef(v_type_get_llvm_type(v_quark_t));

    v_store(init_f,  val0);
    v_store(term_f,  val1);
    v_store(quark_u, val2);

    v_ast_generic_vtable_ = v_type_get_llvm_type(v_ast_generic_vtable);

    vtable_v = LLVMConstNamedStruct(v_ast_generic_vtable_, val0, 3);

    vtable_g = LLVMAddGlobal(module, v_ast_generic_vtable_, "voidc_ast_stmt_block_vtable");

    LLVMSetLinkage(vtable_g, LLVMPrivateLinkage);

    LLVMSetInitializer(vtable_g, vtable_v);

    //-----------------------------------------------------------------
    voidc_clear_unit_buffer();
}

{   v_add_symbol("voidc_ast_stmt_block_vtable", v_ast_generic_vtable, 0);
}


//---------------------------------------------------------------------
//- v_ast_make_stmt_block - ...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(v_ast_stmt_ptr,      typ0);
    v_store(v_ast_stmt_list_ptr, typ1);
    v_store(bool,                typ2);

    ft = v_function_type(void, typ0, 3, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_ast_make_stmt_block", ft);

    v_add_parameter_name(f, 0, "ret",       v_ast_stmt_ptr);
    v_add_parameter_name(f, 1, "stmt_list", v_ast_stmt_list_ptr);
    v_add_parameter_name(f, 2, "flag",      bool);
}
{
    stmp = v_alloca(v_ast_stmt_t);
    v_initialize(stmp);

    v_ast_make_generic(stmp, voidc_ast_stmt_block_vtable, ast_stmt_block_t_size);

    void_obj = v_ast_generic_get_object(stmp);

    obj = v_cast(void_obj, ast_stmt_block_ptr);

    obj_stmt_list = v_getelementptr(obj, 0, 0);
    obj_flag_ptr  = v_getelementptr(obj, 0, 1);

    v_copy(obj_stmt_list, stmt_list);

    v_store(flag, obj_flag_ptr);

    v_copy(ret, stmp);

    v_terminate(stmp);
}


//---------------------------------------------------------------------
//- mk_stmt_block - grammar action
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_stmt_block_grammar_action", v_peg_grammar_action_fun_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "ret",       v_std_any_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "any0",      v_std_any_ptr);
    v_add_parameter_name(f, 3, "any_count", size_t);
}
{
    stmt_list = v_std_any_get_pointer(v_ast_stmt_list_t, any0);

    flag_par = v_getelementptr(any0, 1);

    flag = v_std_any_get_value(intptr_t, flag_par);

    flag = v_cast(flag, bool);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);

    v_ast_make_stmt_block(stmt, stmt_list, flag);

    v_std_any_set_pointer(ret, stmt);

    v_terminate(stmt);
}


//---------------------------------------------------------------------
//- compile_ast_stmt_block_t_helper_simple
//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 2);
    typ1 = v_getelementptr(typ0, 1);

    v_store(voidc_visitor_ptr,   typ0);
    v_store(v_ast_stmt_list_ptr, typ1);

    ft = v_function_type(void, typ0, 2, false);

    //-----------------------------------------------------------------
    f = v_function_hack("compile_ast_stmt_block_t_helper_simple", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "visitor",   voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "stmt_list", v_ast_stmt_list_ptr);
}
{
    base_ast = v_cast(stmt_list, v_ast_base_ptr);

    v_ast_accept_visitor(base_ast, visitor);
}


//---------------------------------------------------------------------
//- compile_ast_stmt_block_t_helper_complex
//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(voidc_visitor_ptr,   typ0);
    v_store(v_ast_stmt_list_ptr, typ1);
    v_store(LLVMValueRef,        typ2);
    v_store(LLVMValueRef,        typ3);

    ft = v_function_type(void, typ0, 4, false);

    //-----------------------------------------------------------------
    f = v_function_hack("compile_ast_stmt_block_t_helper_complex", ft);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "visitor",    voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "stmt_list",  v_ast_stmt_list_ptr);
    v_add_parameter_name(f, 2, "break_var",  LLVMValueRef);
    v_add_parameter_name(f, 3, "break_addr", LLVMValueRef);
}
{
    v_add_variable_q(voidc_internal_branch_target_break_variable_q, 0, break_var);
    v_add_variable_q(voidc_internal_branch_target_break_q,          0, break_addr);

    base_ast = v_cast(stmt_list, v_ast_base_ptr);

    v_ast_accept_visitor(base_ast, visitor);
}


//---------------------------------------------------------------------
//- voidc_intrinsic_break_helper
//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 2);
    typ1 = v_getelementptr(typ0, 1);

    v_store(LLVMValueRef, typ0);
    v_store(LLVMValueRef, typ1);

    ft = v_function_type(void, typ0, 2, false);

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_intrinsic_break_helper", ft);

    v_add_parameter_name(f, 0, "block_var",  LLVMValueRef);
    v_add_parameter_name(f, 1, "break_addr", LLVMValueRef);
}
{
    builder = v_target_get_builder();

    LLVMBuildStore(builder, break_addr, block_var);

    leave_bv = v_get_variable_value_q(voidc_internal_branch_target_leave_q);
    leave_b  = LLVMValueAsBasicBlock(leave_bv);

    LLVMBuildBr(builder, leave_b);
}


//---------------------------------------------------------------------
//- compile_ast_stmt_block_t - visitor method
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_ast_stmt_block_t", voidc_visitor_method_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);

    v_add_parameter_name(f, 0, "aux",     void_ptr);
    v_add_parameter_name(f, 1, "visitor", voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "self",    v_ast_base_ptr);
}
{
    void_obj = v_ast_generic_get_object(v_cast(self, v_ast_stmt_ptr));

    obj = v_cast(void_obj, ast_stmt_block_ptr);

    stmt_list = v_getelementptr(obj, 0, 0);
    flag_ptr  = v_getelementptr(obj, 0, 1);

    flag = v_load(flag_ptr);


    if (v_list_get_size(stmt_list)) ;
    else                            v_return();


    v_save_variables();

    lltyp = v_alloca(LLVMTypeRef);

    builder = v_target_get_builder();

    llvm_stacksave_f   = v_obtain_function(voidc_llvm_stacksave_name, lltyp);
    llvm_stacksave_ft_ = v_load(lltyp);

    blk = LLVMBuildCall2(builder, llvm_stacksave_ft_, llvm_stacksave_f, 0, 0, "blk");


    i8_ptr  = v_pointer_type(v_int_type(8), 0);
    i8_ptr_ = v_type_get_llvm_type(i8_ptr);

    blk_leave_var_v = LLVMBuildAlloca(builder, i8_ptr_, "blk_leave_var_v");

    leave_bv = v_get_variable_value_q(voidc_internal_branch_target_leave_q);
    leave_b  = LLVMValueAsBasicBlock(leave_bv);

    cur_f = LLVMGetBasicBlockParent(leave_b);

    leave_b_addr = LLVMBlockAddress(cur_f, leave_b);

    LLVMBuildStore(builder, leave_b_addr, blk_leave_var_v);


    llvm_ctx = v_target_get_llvm_ctx();

    blk_leave_b  = LLVMAppendBasicBlockInContext(llvm_ctx, cur_f, "blk_leave_b");
    blk_leave_bv = LLVMBasicBlockAsValue(blk_leave_b);

    v_add_variable_q(voidc_internal_branch_target_leave_q, 0, blk_leave_bv);        //- Sic!


    blk_exit_b = LLVMAppendBasicBlockInContext(llvm_ctx, cur_f, "blk_exit_b");

    blk_exit_b_addr = LLVMBlockAddress(cur_f, blk_exit_b);


    if (flag)   compile_ast_stmt_block_t_helper_complex(visitor, stmt_list, blk_leave_var_v, blk_exit_b_addr);
    else        compile_ast_stmt_block_t_helper_simple(visitor, stmt_list);


    cur_b = LLVMGetInsertBlock(builder);

    trm_v = LLVMGetBasicBlockTerminator(cur_b);

    null_v = v_cast(0, LLVMValueRef);

    ok = v_icmp(LLVMIntEQ, trm_v, null_v);

    if (ok) voidc_intrinsic_break_helper(blk_leave_var_v, blk_exit_b_addr);


    LLVMMoveBasicBlockAfter(blk_leave_b, cur_b);


    LLVMPositionBuilderAtEnd(builder, blk_leave_b);


    leave_addr = LLVMBuildLoad2(builder, i8_ptr_, blk_leave_var_v, "leave_addr");


    val0 = v_alloca(LLVMValueRef);

    v_store(blk, val0);

    llvm_stackrestore_f   = v_obtain_function(voidc_llvm_stackrestore_name, lltyp);
    llvm_stackrestore_ft_ = v_load(lltyp);

    LLVMBuildCall2(builder, llvm_stackrestore_ft_, llvm_stackrestore_f, val0, 1, "");


    ibr_insn = LLVMBuildIndirectBr(builder, leave_addr, 2);

    LLVMAddDestination(ibr_insn, leave_b);
    LLVMAddDestination(ibr_insn, blk_exit_b);


    LLVMMoveBasicBlockAfter(blk_exit_b, blk_leave_b);


    LLVMPositionBuilderAtEnd(builder, blk_exit_b);


    v_restore_variables();
}


//---------------------------------------------------------------------
//- v_break ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_intrinsic_break", voidc_intrinsic_t);

    LLVMSetLinkage(f, LLVMPrivateLinkage);
}
{
    break_var  = v_get_variable_value_q(voidc_internal_branch_target_break_variable_q);
    break_addr = v_get_variable_value_q(voidc_internal_branch_target_break_q);

    voidc_intrinsic_break_helper(break_var, break_addr);
}


//---------------------------------------------------------------------
//- Enable statement block compilation
//---------------------------------------------------------------------
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    v_function_hack("voidc_enable_statement_block_compiler", ft);
}
{
    vis = v_get_compiler();

    v_return_if(voidc_visitor_get_method(vis, quark, 0));


    v_store(quark, v_getelementptr(voidc_ast_stmt_block_vtable, 0, 2));

    voidc_visitor_set_method(vis, vis, quark, compile_ast_stmt_block_t, 0);

    break_q = v_quark_from_string("v_break");

    v_add_intrinsic_q(break_q, voidc_intrinsic_break, 0);
}


//---------------------------------------------------------------------
//- Enable statement block
//---------------------------------------------------------------------
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    v_function_hack("voidc_enable_statement_block", ft);
}
{
    voidc_enable_statement_block_compiler();


    v_return_if_not(voidc_has_grammar());
    v_return_if(voidc_grammar_has_parser("stmt_block"));


    pp0 = v_alloca(v_peg_parser_t, 8);
    v_initialize(pp0, 8);

    pp1 = v_getelementptr(pp0, 1);
    pp2 = v_getelementptr(pp0, 2);
    pp3 = v_getelementptr(pp0, 3);
    pp4 = v_getelementptr(pp0, 4);
    pp5 = v_getelementptr(pp0, 5);
    pp6 = v_getelementptr(pp0, 6);
    pp7 = v_getelementptr(pp0, 7);


    //-----------------------------------------------------------------
    //- stmt_block <- "block" _ '{' _ l:stmt_list _ '}'     { mk_stmt_block(l, 1) }
    //-             /           '{' _ l:stmt_list _ '}'     { mk_stmt_block(l, 0) }

    v_peg_make_literal_parser(pp0, "block");
    v_peg_make_identifier_parser(pp1, "_");


    v_peg_make_character_parser(pp2, '{');
    v_peg_make_identifier_parser(pp3, "_");

    v_peg_make_identifier_parser(pp4, "stmt_list");
    v_peg_make_catch_variable_parser(pp4, "l", pp4);

    v_peg_make_identifier_parser(pp5, "_");

    v_peg_make_character_parser(pp6, '}');


    ar0 = v_alloca(v_peg_argument_t, 2);
    v_initialize(ar0, 2);

    ar1 = v_getelementptr(ar0, 1);


    v_peg_make_identifier_argument(ar0, "l");

    v_peg_make_integer_argument(ar1, 1);


    act = v_alloca(v_peg_action_t);
    v_initialize(act);

    v_peg_make_call_action(act, "mk_stmt_block", ar0, 2);

    v_peg_make_action_parser(pp7, act);


    v_peg_make_sequence_parser(pp0, pp0, 8);


    v_peg_make_integer_argument(ar1, 0);

    v_peg_make_call_action(act, "mk_stmt_block", ar0, 2);

    v_peg_make_action_parser(pp7, act);


    v_peg_make_sequence_parser(pp1, pp2, 6);


    v_peg_make_choice_parser(pp0, pp0, 2);


    gr0 = v_alloca(v_peg_grammar_t);
    v_initialize(gr0);

    v_peg_get_grammar(gr0);


    v_peg_grammar_set_action(gr0, gr0, "mk_stmt_block", mk_stmt_block_grammar_action, 0);


    v_peg_grammar_set_parser(gr0, gr0, "stmt_block", pp0, 0);


    v_peg_make_identifier_parser(pp0, "stmt_block");


    pp_ = v_peg_grammar_get_parser(gr0, "stmt", 0);

    v_peg_choice_parser_concat(pp0, pp0, pp_);

    v_peg_grammar_set_parser(gr0, gr0, "stmt", pp0, 0);


    v_peg_set_grammar(gr0);


    v_terminate(gr0);
    v_terminate(act);
    v_terminate(ar0, 2);
    v_terminate(pp0, 8);
}


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
{
    v_make_export_symbol("v_ast_make_stmt_block");
    v_make_export_symbol("voidc_intrinsic_break_helper");

    v_make_export_symbol("voidc_enable_statement_block_compiler");
    v_make_export_symbol("voidc_enable_statement_block");
}


