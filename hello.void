{   v_import("voidc_target.void");
    v_import("voidc_types.void");

    v_import("llvm-c/Core.void");
    v_import("llvm-c/TargetMachine.void");
    v_import("llvm-c/Transform/PassManagerBuilder.void");

    v_import("printf.void");
}

{   triple = LLVMGetDefaultTargetTriple();

    tr_v = v_alloca(LLVMTargetRef);

    LLVMGetTargetFromTriple(triple, tr_v, 0);

    tr = v_load(tr_v);

    cpu_name     = LLVMGetHostCPUName();
    cpu_features = LLVMGetHostCPUFeatures();

    target_machine =
        LLVMCreateTargetMachine
        (
            tr,
            triple,
            cpu_name,
            cpu_features,
            LLVMCodeGenLevelAggressive,
            LLVMRelocDefault,
            LLVMCodeModelDefault
        );

    LLVMDisposeMessage(cpu_features);
    LLVMDisposeMessage(cpu_name);
    LLVMDisposeMessage(triple);

    //-----------------------------------------------------------------
    module = LLVMModuleCreateWithName("hello_mod");

    main_ft  = v_function_type(void, 0, 0, false);
    main_ft_ = v_type_get_llvm_type(main_ft);
    main_f   = LLVMAddFunction(module, "main", main_ft_);

    entry = LLVMAppendBasicBlock(main_f, "entry");

    builder = LLVMCreateBuilder();

    LLVMPositionBuilderAtEnd(builder, entry);


    printf_ft  = v_find_symbol_type("printf");
    printf_ft_ = v_type_get_llvm_type(printf_ft);
    printf_f   = LLVMAddFunction(module, "printf", printf_ft_);

    str = LLVMBuildGlobalStringPtr(builder, "Hello world!\n", "str");

    val = v_alloca(LLVMValueRef);

    v_store(str, val);

    LLVMBuildCall(builder, printf_f, val, 1, "");


    LLVMBuildRetVoid(builder);

    LLVMClearInsertionPosition(builder);

    LLVMDisposeBuilder(builder);

    //-----------------------------------------------------------------
    pass_manager = LLVMCreatePassManager();

    pm_builder = LLVMPassManagerBuilderCreate();

    LLVMPassManagerBuilderSetOptLevel(pm_builder, 3);       //- -O3
    LLVMPassManagerBuilderSetSizeLevel(pm_builder, 2);      //- -Oz

    LLVMPassManagerBuilderPopulateModulePassManager(pm_builder, pass_manager);

    LLVMPassManagerBuilderDispose(pm_builder);

    //-----------------------------------------------------------------
    dl = LLVMCreateTargetDataLayout(target_machine);
    tr = LLVMGetTargetMachineTriple(target_machine);

    LLVMSetModuleDataLayout(module, dl);
    LLVMSetTarget(module, tr);

    LLVMDisposeMessage(tr);
    LLVMDisposeTargetData(dl);

    LLVMRunPassManager(pass_manager, module);

    LLVMDisposePassManager(pass_manager);

    //-----------------------------------------------------------------
    msg = LLVMPrintModuleToString(module);

    printf("\n%s\n", msg);

    LLVMDisposeMessage(msg);

    //-----------------------------------------------------------------
    LLVMTargetMachineEmitToFile(target_machine,
                                module,
                                "hello.o",
                                LLVMObjectFile,
                                0);

    //-----------------------------------------------------------------
    LLVMDisposeModule(module);

    LLVMDisposeTargetMachine(target_machine);
}

{   typ = v_alloca(v_type_ptr);

    char_ptr = v_pointer_type(char, 0);

    v_store(char_ptr, typ);

    system_ft = v_function_type(int, typ, 1, false);

    v_export_symbol_type("system", system_ft);
}

{   system("clang hello.o -o hello");

    system("hello");
}


