//---------------------------------------------------------------------
//- Copyright (C) 2020-2021 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("memory.void  must be imported into the voidc target only!");

    v_import("voidc_target.void");
    v_import("voidc_types.void");
    v_import("voidc_util.void");
    v_import("voidc_ast.void");
    v_import("voidc_visitor.void");

    v_import("llvm-c/Core.void");

    v_import("function_hack.void");
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   llvm_opaque_type = v_type_refptr_get_element_type(LLVMTypeRef);

    v_add_symbol("int_", llvm_opaque_type, v_type_get_llvm_type(int));

    v_add_type("void_ptr", v_pointer_type(void, 0));
}

//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("voidc_memory_intrinsics_module");

    v_set_module(module);       //- Sic!

    //-----------------------------------------------------------------
    LLVMDisposeMemoryBuffer(voidc_get_unit_buffer());
    voidc_set_unit_buffer(0);
}


//---------------------------------------------------------------------
//- v_malloc
//---------------------------------------------------------------------
//- fun voidc_memory_malloc_intrinsic(visitor: voidc_visitor_t, aux: void_ptr, arg_list: v_ast_expr_list_ptr)
//- {
//-     args_count = v_list_get_size(arg_list);
//-
//-     args = v_alloca(v_ast_opaque_expr_sptr, args_count);
//-     v_initialize(args, args_count);
//-
//-     v_list_get_items(arg_list, 0, arg0, args_count);
//-
//-     num_var = v_alloca(LLVMValueRef);
//-
//-     tt = v_get_result_type();
//-
//-     ok = v_icmp(LLVMIntEQ, args_count, 1);
//-
//-     if (ok)
//-     {
//-         n1_v = LLVMConstInt(int_, 1, 0);
//-
//-         v_store(n1_v, num_var);
//-     }
//-     else
//-     {
//-         v_set_result_type(UNREFERENCE_TAG);
//-
//-         arg1 = v_getelementptr(args, 1);
//-
//-         base_arg1 = v_cast(arg1, v_ast_base_ptr);
//-
//-         v_ast_accept_visitor(base_arg1, visitor, aux);
//-
//-         num = v_get_result_value();
//-
//-         v_store(num, num_var);
//-     }
//-
//-     ...
//-
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    malloc_f = v_function_hack("voidc_memory_malloc_intrinsic", voidc_intrinsic_t);

    visitor  = v_add_parameter_name(malloc_f, 0, "visitor",  voidc_visitor_ptr);
    aux      = v_add_parameter_name(malloc_f, 1, "aux",      void_ptr);
    arg_list = v_add_parameter_name(malloc_f, 2, "arg_list", v_ast_expr_list_ptr);


    val0 = v_alloca(LLVMValueRef, 4);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);
    val3 = v_getelementptr(val0, 3);

    n0 = LLVMConstInt(int_,  0, 0);
    n1 = LLVMConstInt(int_,  1, 0);
    m1 = LLVMConstInt(int_, -1, 0);

    //-----------------------------------------------------------------
    builder = v_target_get_voidc_builder();


    v_store(arg_list, val0);

    list_get_size_f = v_obtain_dict_function(v_util_list_get_size_dict, v_ast_opaque_expr_list_sptr);

    args_count_v = LLVMBuildCall(builder, list_get_size_f, val0, 1, "args_count_v");


    v_ast_opaque_expr_sptr_ = v_type_get_llvm_type(v_ast_opaque_expr_sptr);

    args_v = LLVMBuildArrayAlloca(builder, v_ast_opaque_expr_sptr_, args_count_v, "args_v");


    v_store(args_v,       val0);
    v_store(args_count_v, val1);

    arg_init_f = v_obtain_dict_function(v_util_initialize_dict, v_ast_opaque_expr_sptr);

    LLVMBuildCall(builder, arg_init_f, val0, 2, "");


    v_store(arg_list,     val0);
    v_store(n0,           val1);
    v_store(args_v,       val2);
    v_store(args_count_v, val3);

    list_get_items_f = v_obtain_dict_function(v_util_list_get_items_dict, v_ast_opaque_expr_list_sptr);

    LLVMBuildCall(builder, list_get_items_f, val0, 4, "");


    then_b = LLVMAppendBasicBlock(malloc_f, "then_b");
    else_b = LLVMAppendBasicBlock(malloc_f, "else_b");
    cont_b = LLVMAppendBasicBlock(malloc_f, "cont_b");


    LLVMValueRef_ = v_type_get_llvm_type(LLVMValueRef);

    num_v = LLVMBuildAlloca(builder, LLVMValueRef_, "num_v");


    get_res_type_f = v_obtain_function("v_get_result_type");

    tt_v = LLVMBuildCall(builder, get_res_type_f, 0, 0, "tt_v");


    ok_v = LLVMBuildICmp(builder, LLVMIntEQ, args_count_v, n1, "ok_v");

    LLVMBuildCondBr(builder, ok_v, then_b, else_b);


    LLVMPositionBuilderAtEnd(builder, then_b);


    int__v = v_obtain_global("int_");

    long_long_ = v_type_get_llvm_type(long_long);

    n1ll = LLVMBuildZExtOrBitCast(builder, n1, long_long_, "n1ll");

    v_store(int__v, val0);
    v_store(n1ll,   val1);
    v_store(n0,     val2);

    llvm_const_int_f = v_obtain_function("LLVMConstInt");

    n1_v = LLVMBuildCall(builder, llvm_const_int_f, val0, 3, "n1_v");


    LLVMBuildStore(builder, n1_v, num_v);


    LLVMBuildBr(builder, cont_b);


    LLVMPositionBuilderAtEnd(builder, else_b);


    UNREFERENCE_TAG_v = v_find_constant_value("UNREFERENCE_TAG");

    v_store(UNREFERENCE_TAG_v, val0);

    set_res_type_f = v_obtain_function("v_set_result_type");

    LLVMBuildCall(builder, set_res_type_f, val0, 1, "");


    v_store(n1, val0);

    args_v_1 = LLVMBuildGEP(builder, args_v, val0, 1, "args_v_1");


    v_ast_base_ptr_ = v_type_get_llvm_type(v_ast_base_ptr);

    base_arg1 = LLVMBuildBitCast(builder, args_v_1, v_ast_base_ptr_, "base_arg1");


    accept_visitor_f = v_obtain_function("v_ast_accept_visitor");

    v_store(base_arg1, val0);
    v_store(visitor,   val1);
    v_store(aux,       val2);

    LLVMBuildCall(builder, accept_visitor_f, val0, 3, "");


    get_res_val_f = v_obtain_function("v_get_result_value");

    num = LLVMBuildCall(builder, get_res_val_f, 0, 0, "num");


    LLVMBuildStore(builder, num, num_v);


    LLVMBuildBr(builder, cont_b);


    LLVMPositionBuilderAtEnd(builder, cont_b);


    num_var_t = v_pointer_type(LLVMValueRef, 0);

    v_add_variable("args",       v_ast_expr_ptr, args_v);
    v_add_variable("args_count", int,            args_count_v);
    v_add_variable("num_var",    num_var_t,      num_v);
    v_add_variable("tt",         v_type_ptr,     tt_v);
}
{
    number = v_load(num_var);

    builder = v_target_get_builder();

    type  = v_obtain_type(args);
    type_ = v_type_get_llvm_type(type);

    ret = LLVMBuildArrayMalloc(builder, type_, number, "ret");

    pt = v_pointer_type(type, 0);

    v_set_result_type(tt);

    v_adopt_result(pt, ret);

    v_terminate(args, args_count);
}


//---------------------------------------------------------------------
//- v_mfree
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_memory_mfree_intrinsic", voidc_intrinsic_t);

    v_add_parameter_name(f, 0, "visitor",  voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "aux",      void_ptr);
    v_add_parameter_name(f, 2, "arg_list", v_ast_expr_list_ptr);
}
{
    builder = v_target_get_builder();

    v_set_result_type(UNREFERENCE_TAG);

    arg0 = v_alloca(v_ast_opaque_expr_sptr);
    v_initialize(arg0);

    v_list_get_items(arg_list, 0, arg0, 1);

    arg_base = v_cast(arg0, v_ast_base_ptr);

    v_ast_accept_visitor(arg_base, visitor, aux);

    arg = v_get_result_value();

    LLVMBuildFree(builder, arg);

    v_terminate(arg0);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_unit_load_module_to_jit(module);

    LLVMDisposeModule(module);
    v_set_module(0);
}

{   v_export_intrinsic("v_malloc", voidc_memory_malloc_intrinsic);
    v_export_intrinsic("v_mfree",  voidc_memory_mfree_intrinsic);
}


