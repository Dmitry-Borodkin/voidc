{   v_import("vpeg_grammar.void");
    v_import("voidc_ast.void");

    v_import("printf.void");
}

{
    pp0 = v_alloca(v_peg_opaque_parser_ptr, 2);
    v_initialize(pp0, 2);

    pp1 = v_getelementptr(pp0, 1);

    v_peg_make_dot_parser(pp0);

    v_peg_make_not_parser(pp0, pp0);

    v_copy(pp1, pp0);
    v_move(pp0, pp1);

    v_reset(pp0);
}

{   a = v_alloca(v_util_opaque_std_any);
    v_initialize(a);

    v_std_any_set_value(a, 13);

    p = v_std_any_get_pointer(int, a);

    v = v_load(p);

    printf("v: %d\n", v);

    p = v_alloca(intptr_t);
    v_store(17, p);

    v_std_any_set_pointer(a, p);

    p = v_std_any_get_pointer(intptr_t, a);

    v = v_load(p);

    printf("v: %ld\n", v);

    v_reset(a);
}

{   a = v_alloca(v_util_opaque_std_any);
    v_initialize(a);

    p = v_alloca(char32_t);
    v_store('Ы', p);

    v_std_any_set_pointer(a, p);

    v_reset(a);
}

{   str = v_alloca(v_util_opaque_std_string);
    v_initialize(str);

    v_std_string_set(str, "Превед ");

    v_std_string_append(str, "медвед!");

    s = v_std_string_get(str);

    printf("s: %s\n", s);

    v_reset(str);
}

{   ft = LLVMFunctionType(size_t, 0, 0, 0);
    v_add_symbol_type("llvm.readcyclecounter", ft);

    v_add_alias("llvm_readcyclecounter", "llvm.readcyclecounter");
}

{   v0 = llvm_readcyclecounter();
    v1 = llvm_readcyclecounter();

    printf("\n%lu\n%lu\n", v0, v1);
}


{   dict = v_alloca(v_util_opaque_function_dict_t);
    v_initialize(dict);


    v_util_function_dict_set(dict, int, "XYZZY");


    v_reset(dict);
}


//---------------------------------------------------------------------
//- AST ...
//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("ast_tests_mod");

    dl = LLVMCreateTargetDataLayout(voidc_target_machine);
    tr = LLVMGetTargetMachineTriple(voidc_target_machine);

    LLVMSetModuleDataLayout(module, dl);
    LLVMSetTarget(module, tr);

    LLVMDisposeMessage(tr);
    LLVMDisposeTargetData(dl);

    typ0 = v_alloca(LLVMTypeRef, 2);
    typ1 = v_getelementptr(typ0, 1);

    void_ptr = LLVMPointerType(void, 0);

    v_store(void_ptr, typ0);
    v_store(void_ptr, typ1);


    destroy_ft = LLVMFunctionType(void, typ0, 1, 0);
    destroy_f  = LLVMAddFunction(module, "destroy_f", destroy_ft);
    LLVMSetLinkage(destroy_f, LLVMPrivateLinkage);

    entry = LLVMAppendBasicBlock(destroy_f, "entry");
    LLVMPositionBuilderAtEnd(voidc_builder, entry);

    printf_ft = v_find_symbol_type("printf");
    printf_f  = LLVMAddFunction(module, "printf", printf_ft);

    str = LLVMBuildGlobalStringPtr(voidc_builder, "destroy!\n", "str");

    val0 = v_alloca(LLVMValueRef, 4);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);
    val3 = v_getelementptr(val0, 3);

    v_store(str, val0);

    LLVMBuildCall(voidc_builder, printf_f, val0, 1, "");

    LLVMBuildRetVoid(voidc_builder);


    compile_ft = LLVMFunctionType(void, typ0, 2, 0);
    compile_f  = LLVMAddFunction(module, "compile_f", compile_ft);
    LLVMSetLinkage(compile_f, LLVMPrivateLinkage);

    entry = LLVMAppendBasicBlock(compile_f, "entry");
    LLVMPositionBuilderAtEnd(voidc_builder, entry);

    str = LLVMBuildGlobalStringPtr(voidc_builder, "compile!\n", "str");

    v_store(str, val0);

    LLVMBuildCall(voidc_builder, printf_f, val0, 1, "");

    LLVMBuildRetVoid(voidc_builder);


    accept_f = LLVMAddFunction(module, "accept_f", compile_ft);
    LLVMSetLinkage(accept_f, LLVMPrivateLinkage);

    entry = LLVMAppendBasicBlock(accept_f, "entry");
    LLVMPositionBuilderAtEnd(voidc_builder, entry);

    str = LLVMBuildGlobalStringPtr(voidc_builder, "accept!\n", "str");

    v_store(str, val0);

    LLVMBuildCall(voidc_builder, printf_f, val0, 1, "");

    LLVMBuildRetVoid(voidc_builder);


    //-------------------------------------------------------------
    LLVMClearInsertionPosition(voidc_builder);


    //-------------------------------------------------------------
    quark_v = v_quark_from_string("Just test");

    quark_ll = v_cast(LLVMZExt, quark_v, long_long);

    quark = LLVMConstInt(v_quark_t, quark_ll, 0);

    v_store(destroy_f, val0);
    v_store(compile_f, val1);
    v_store(accept_f,  val2);
    v_store(quark,     val3);

    vtable_v = LLVMConstNamedStruct(v_ast_generic_vtable, val0, 4);

    vtable_g = LLVMAddGlobal(module, v_ast_generic_vtable, "vtable_g");

    LLVMSetInitializer(vtable_g, vtable_v);


    //-------------------------------------------------------------
    LLVMRunPassManager(voidc_pass_manager, module);

    //-------------------------------------------------------------
//    msg = LLVMPrintModuleToString(module);
//
//    printf("\n%s\n", msg);
//
//    LLVMDisposeMessage(msg);

    //-------------------------------------------------------------
    PH = v_alloca(LLVMOrcModuleHandle);

    LLVMOrcAddEagerlyCompiledIR(voidc_jit, PH, module,
                                voidc_resolver,
                                0
                               );

    //-----------------------------------------------------------------
    v_add_symbol_type("vtable_g", v_ast_generic_vtable);
}

{   printf("\n");

    gen = v_alloca(v_ast_opaque_generic_ptr);
    v_initialize(gen);

    v_ast_make_generic(gen, vtable_g, 0);


    vis = v_alloca(voidc_opaque_visitor_ptr);
    v_initialize(vis);


    obj = v_alloca(v_ast_opaque_base_ptr);
    v_initialize(obj);

    v_ast_upcast_generic_impl(obj, gen);

    v_ast_accept_visitor(obj, vis);



    //- ...

    v_reset(obj);
    v_reset(vis);
    v_reset(gen);
}


//---------------------------------------------------------------------
//- Quarks
//---------------------------------------------------------------------
{   v_import("voidc_quark.void"); }

{   printf("\n");

    q = v_quark_from_string("");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s]\n", q, s);

    q = v_quark_from_string("Some string");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s]\n", q, s);

    q = v_quark_from_string("Another string");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s]\n", q, s);

}

{   printf("\n");

    q = v_quark_from_string("Another string");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s]\n", q, s);

    q = v_quark_from_string("Some string");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s]\n", q, s);

    q = v_quark_from_string("");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s]\n", q, s);

}


