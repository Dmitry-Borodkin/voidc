{   v_import("vpeg_grammar.void");
    v_import("voidc_ast.void");
    v_import("llvm-c/Analysis.void");

    v_import("printf.void");
}

{
    pp0 = v_alloca(v_peg_opaque_parser_ptr, 2);
    v_initialize(pp0, 2);

    pp1 = v_getelementptr(pp0, 1);

    v_peg_make_dot_parser(pp0);

    v_peg_make_not_parser(pp0, pp0);

    v_copy(pp1, pp0);
    v_move(pp0, pp1);

    v_terminate(pp0);
}

{   a = v_alloca(v_util_opaque_std_any);
    v_initialize(a);

    v_std_any_set_value(a, 13);

    p = v_std_any_get_pointer(int, a);

    v = v_load(p);

    printf("v: %d\n", v);

    p = v_alloca(intptr_t);
    v_store(17, p);

    v_std_any_set_pointer(a, p);

    p = v_std_any_get_pointer(intptr_t, a);

    v = v_load(p);

    printf("v: %ld\n", v);

    v_terminate(a);
}

{   a = v_alloca(v_util_opaque_std_any);
    v_initialize(a);

    p = v_alloca(char32_t);
    v_store('Ы', p);

    v_std_any_set_pointer(a, p);

    v_terminate(a);
}

{   str0 = v_alloca(v_util_opaque_std_string, 2);
    v_initialize(str0, 2);

    str1 = v_getelementptr(str0, 1);

    v_std_string_set(str0, "Превед ");

    v_std_string_append(str0, "медвед!");

    s = v_std_string_get(str0);

    printf("s: %s\n", s);

    v_copy(str1, str0);

    s = v_std_string_get(str1);

    printf("s: %s\n", s);

    v_terminate(str0, 2);
}

{   ft = v_function_type(uint64_t, 0, 0, false);
    v_add_symbol_type("llvm.readcyclecounter", ft);

    v_add_alias("llvm_readcyclecounter", "llvm.readcyclecounter");
}

{   v0 = llvm_readcyclecounter();
    v1 = llvm_readcyclecounter();

    printf("\n%llu\n%llu\n", v0, v1);
}


{   dict = v_alloca(v_util_opaque_function_dict_t);
    v_initialize(dict);


    v_util_function_dict_set(dict, int, "XYZZY");


    v_terminate(dict);
}


//---------------------------------------------------------------------
//- AST ...
//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("ast_tests_mod");

    v_set_module(module);

    builder = v_target_get_voidc_builder();

    typ0 = v_alloca(v_type_ref, 2);
    typ1 = v_getelementptr(typ0, 1);

    void_ptr = v_pointer_type(void, 0);

    v_store(void_ptr, typ0);

    destroy_ft  = v_function_type(void, typ0, 1, 0);
    destroy_ft_ = v_type_get_llvm_type(destroy_ft);
    destroy_f   = LLVMAddFunction(module, "destroy_f", destroy_ft_);
    LLVMSetLinkage(destroy_f, LLVMPrivateLinkage);

    entry = LLVMAppendBasicBlock(destroy_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);

    printf_f = v_obtain_function("printf");

    str = LLVMBuildGlobalStringPtr(builder, "destroy!\n", "str");

    val0 = v_alloca(LLVMValueRef, 3);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);

    v_store(str, val0);

    LLVMBuildCall(builder, printf_f, val0, 1, "");

    LLVMBuildRetVoid(builder);


    v_store(voidc_visitor_ref, typ1);

    accept_ft  = v_function_type(void, typ0, 2, 0);
    accept_ft_ = v_type_get_llvm_type(accept_ft);
    accept_f   = LLVMAddFunction(module, "accept_f", accept_ft_);
    LLVMSetLinkage(accept_f, LLVMPrivateLinkage);

    entry = LLVMAppendBasicBlock(accept_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);

    str = LLVMBuildGlobalStringPtr(builder, "accept!\n", "str");

    v_store(str, val0);

    LLVMBuildCall(builder, printf_f, val0, 1, "");

    LLVMBuildRetVoid(builder);


    //-------------------------------------------------------------
    LLVMClearInsertionPosition(builder);


    //-------------------------------------------------------------
    quark_v = v_quark_from_string("Just test");

    quark_ll = v_cast(quark_v, long_long);      //- unsigned long long !

    v_quark_t_ = v_type_get_llvm_type(v_quark_t);

    quark = LLVMConstInt(v_quark_t_, quark_ll, 0);

    v_store(destroy_f, val0);
    v_store(accept_f,  val1);
    v_store(quark,     val2);

    v_ast_generic_vtable_ = v_type_get_llvm_type(v_ast_generic_vtable);

    vtable_v = LLVMConstNamedStruct(v_ast_generic_vtable_, val0, 3);

    vtable_g = LLVMAddGlobal(module, v_ast_generic_vtable_, "vtable_g");

    LLVMSetInitializer(vtable_g, vtable_v);


    //-------------------------------------------------------------
    msg = LLVMPrintModuleToString(module);

    printf("\n%s\n", msg);

    LLVMDisposeMessage(msg);

    voidc_prepare_module_for_jit(module);

    //-------------------------------------------------------------
    PH = v_alloca(LLVMOrcModuleHandle);

    LLVMOrcAddEagerlyCompiledIR(voidc_jit, PH, module,
                                voidc_resolver,
                                0
                               );

    //-----------------------------------------------------------------
    v_add_symbol_type("vtable_g", v_ast_generic_vtable);
}

{   printf("\n");

    gen = v_alloca(v_ast_opaque_generic_ptr);
    v_initialize(gen);

    v_ast_make_generic(gen, vtable_g, 0);


    vis = v_alloca(voidc_opaque_visitor_ptr);
    v_initialize(vis);


    obj = v_cast(gen, v_ast_base_ref);     //- ?..

    v_ast_accept_visitor(obj, vis);



    //- ...

    v_terminate(vis);
    v_terminate(gen);
}


//---------------------------------------------------------------------
//- Quarks
//---------------------------------------------------------------------
{   printf("\n");

    q = v_quark_from_string("");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);

    q = v_quark_from_string("Some string");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);

    q = v_quark_from_string("Another string");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);

}

{   printf("\n");

    q = v_quark_from_string("Another string");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);

    q = v_quark_from_string("Some string");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);

    q = v_quark_from_string("");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);

}

{   printf("\n");

    q = v_load(v_ast_arg_identifier_t_visitor_method_tag);

    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);
}


