{   v_import("vpeg_grammar.void"); }

{   v_import("printf.void"); }

{
    pp0 = v_alloca(v_peg_opaque_parser_ptr, 2);
    v_initialize(pp0, 2);

    pp1 = v_getelementptr(pp0, 1);

    v_peg_make_dot_parser(pp0);

    v_peg_make_not_parser(pp0, pp0);

    v_copy(pp1, pp0);
    v_move(pp0, pp1);

    v_reset(pp0);
}

{   a = v_alloca(v_util_opaque_std_any);
    v_initialize(a);

    v_std_any_set_value(a, 13);

    p = v_std_any_get_pointer(int, a);

    v = v_load(p);

    printf("v: %d\n", v);

    p = v_alloca(intptr_t);
    v_store(17, p);

    v_std_any_set_pointer(a, p);

    p = v_std_any_get_pointer(intptr_t, a);

    v = v_load(p);

    printf("v: %ld\n", v);

    v_reset(a);
}

{   a = v_alloca(v_util_opaque_std_any);
    v_initialize(a);

    p = v_alloca(char32_t);
    v_store('Ы', p);

    v_std_any_set_pointer(a, p);

    v_reset(a);
}

{   str = v_alloca(v_util_opaque_std_string);
    v_initialize(str);

    v_std_string_set(str, "Превед ");

    v_std_string_append(str, "медвед!");

    s = v_std_string_get(str);

    printf("s: %s\n", s);

    v_reset(str);
}

{   ft = LLVMFunctionType(size_t, 0, 0, 0);
    v_add_symbol_type("llvm.readcyclecounter", ft);

    v_add_alias("llvm_readcyclecounter", "llvm.readcyclecounter");
}

{   v0 = llvm_readcyclecounter();
    v1 = llvm_readcyclecounter();

    printf("\n%lu\n%lu\n", v0, v1);
}


{   dict = v_alloca(v_util_opaque_function_dict_t);
    v_initialize(dict);


    v_util_function_dict_set(dict, int, "XYZZY");


    v_reset(dict);
}








