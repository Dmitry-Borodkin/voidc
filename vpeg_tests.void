{   v_import("vpeg_context.void");
    v_import("llvm-c/Analysis.void");
}

{   v_import("printf.void"); }

{   module = LLVMModuleCreateWithName("my_echo_mod");

    saved_module = v_get_module();
    v_set_module(module);

    arg0 = v_alloca(LLVMTypeRef, 3);
    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    v_store(v_util_std_any_ref, arg0);
    v_store(v_util_std_any_ref, arg1);
    v_store(size_t,             arg2);

    my_echo_ft = LLVMFunctionType(void, arg0, 3, 0);
    my_echo_f  = LLVMAddFunction(module, "my_echo_grammar_action", my_echo_ft);

    entry = LLVMAppendBasicBlock(my_echo_f, "entry");

    LLVMPositionBuilderAtEnd(voidc_builder, entry);


    get_string_f = v_obtain_dict_function(v_util_std_any_get_pointer_dict, v_util_opaque_std_string);

    par1 = LLVMGetParam(my_echo_f, 1);

    val0 = v_alloca(LLVMValueRef, 2);
    val1 = v_getelementptr(val0, 1);

    v_store(par1, val0);

    pstr = LLVMBuildCall(voidc_builder, get_string_f, val0, 1, "pstr");


    get_c_str_f = v_obtain_function("v_std_string_get");

    v_store(pstr, val0);

    str = LLVMBuildCall(voidc_builder, get_c_str_f, val0, 1, "str");


    printf_f = v_obtain_function("printf");

    str0 = LLVMBuildGlobalStringPtr(voidc_builder, "my_echo: %s", "str0");

    v_store(str0, val0);
    v_store(str,  val1);

    LLVMBuildCall(voidc_builder, printf_f, val0, 2, "");


    set_value_f = v_obtain_dict_function(v_util_std_any_set_value_dict, bool);

    par0 = LLVMGetParam(my_echo_f, 0);

    v_store(par0, val0);

    true = LLVMConstInt(bool, 1, 0);

    v_store(true, val1);

    LLVMBuildCall(voidc_builder, set_value_f, val0, 2, "");


    LLVMBuildRetVoid(voidc_builder);

    LLVMClearInsertionPosition(voidc_builder);

    //-----------------------------------------------------------------
//    msg = LLVMPrintModuleToString(module);
//
//    printf("\n%s\n", msg);
//
//    LLVMDisposeMessage(msg);

    voidc_prepare_module_for_jit(module);

    //-----------------------------------------------------------------
    PH = v_alloca(LLVMOrcModuleHandle);

    LLVMOrcAddEagerlyCompiledIR(voidc_jit, PH, module,
                                voidc_resolver,
                                0
                               );

    //-----------------------------------------------------------------
    v_set_module(saved_module);

    //-----------------------------------------------------------------
    v_add_symbol_type("my_echo_grammar_action", my_echo_ft);
}

{   gr0 = v_alloca(v_peg_opaque_grammar_ptr);
    v_initialize(gr0);

    v_peg_get_grammar(gr0);


    v_peg_grammar_set_action(gr0, gr0, "my_echo", my_echo_grammar_action);


    pp0 = v_alloca(v_peg_opaque_parser_ptr, 2);
    v_initialize(pp0, 2);

    pp1 = v_getelementptr(pp0, 1);

    v_peg_grammar_get_parser(gr0, "comment", pp0, 0);


    arg = v_alloca(v_peg_opaque_argument_ptr);
    v_initialize(arg);

    v_peg_make_backref_argument(arg, 0, v_peg_backref_argument_kind_string);


    act = v_alloca(v_peg_opaque_action_ptr);
    v_initialize(act);

    v_peg_make_call_action(act, "my_echo", arg, 1);

    v_peg_make_action_parser(pp1, act);


    v_peg_make_sequence_parser(pp0, pp0, 2);


    v_peg_grammar_set_parser(gr0, gr0, "comment", pp0, 0);


    v_peg_set_grammar(gr0);


    v_destroy(act);
    v_destroy(arg);
    v_destroy(pp0, 2);
    v_destroy(gr0);
}


//---------------------------------------------------------------------
//- It works !!!
//---------------------------------------------------------------------

{   printf("\nHello world!\n\n"); }

//═════════════════════════════════════════════════════════════════════
//- And now for something completely different!
//═════════════════════════════════════════════════════════════════════






