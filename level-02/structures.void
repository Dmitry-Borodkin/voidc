//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("structures.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");

    v_import("llvm-c/Core.void");

    v_import("literals.void");
    v_import("loops_etc.void");
    v_import("aggregates.void");
    v_import("overloading.void");
    v_import("projections.void");

//  v_import("printf.void");
}

{   v_enable_level_01();

    voidc_enable_literals();
    voidc_enable_loops_etc();
    voidc_enable_aggregates();
    voidc_enable_overloading();
    voidc_enable_projections();
}


//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("expr_struct_q",       q_ref, q("expr_struct"));
    v_add_symbol("unit_struct_defn_q",  q_ref, q("unit_struct_defn"));

    v_add_symbol("type_q",     q_ref, q("type"));
    v_add_symbol("tref_q",     q_ref, q("tref"));
    v_add_symbol("void_q",     q_ref, q("void"));
    v_add_symbol("void_ptr_q", q_ref, q("void_ptr"));
    v_add_symbol("quark_q",    q_ref, q("quark"));
    v_add_symbol("qname_q",    q_ref, q("qname"));

    v_add_symbol("voidc_compile_type_q",  q_ref, q("voidc.compile_type"));
    v_add_symbol("voidc_compile_quark_q", q_ref, q("voidc.compile_quark"));

    v_add_symbol("q_export_type",        q_ref, q("v_export_type"));
    v_add_symbol("q_add_type",           q_ref, q("v_add_type"));
    v_add_symbol("q_ptr",                q_ref, q("v_ptr"));
    v_add_symbol("q_export_overload_q",  q_ref, q("v_export_overload_q"));
    v_add_symbol("q_add_overload_q",     q_ref, q("v_add_overload_q"));
    v_add_symbol("q_export_intrinsic_q", q_ref, q("v_export_intrinsic_q"));
    v_add_symbol("q_add_intrinsic_q",    q_ref, q("v_add_intrinsic_q"));
    v_add_symbol("q_cast",               q_ref, q("v_cast"));

    v_add_symbol("voidc_internal_index_intrinsic_q", q_ref, q("voidc_internal_index_intrinsic"));

    v_add_symbol("q_static_type_t", q_ref, q("v_static_type_t"));
}


//=====================================================================
{   voidc_unit_begin_module("structures_module"); }


//---------------------------------------------------------------------
//- ast_expr_struct ...
//---------------------------------------------------------------------
export
v_ast_expr_struct_t = v_struct("struct.v_ast_expr_struct",
{
    v_ast_expr_t,           //- 0 - Name (identifier or string or empty)
    v_ast_stmt_list_t,      //- 1 - Fields list (or empty)
    bool,                   //- 2 - Is packed
    bool,                   //- 3 - Is export
});

//---------------------------------------------------------------------
private
ast_expr_struct_init: (void_obj: *void) ~> void
{
    obj = *(void_obj: *v_ast_expr_struct_t);

    v_initialize(&obj[0]);
    v_initialize(&obj[1]);
}

//---------------------------------------------------------------------
private
ast_expr_struct_term: (void_obj: *void) ~> void
{
    obj = *(void_obj: *v_ast_expr_struct_t);

    v_terminate(&obj[0]);
    v_terminate(&obj[1]);
}

//---------------------------------------------------------------------
ast_expr_struct_vtable: &v_ast_generic_vtable :=
{
    ast_expr_struct_init,
    ast_expr_struct_term,
};

//---------------------------------------------------------------------
export
v_ast_make_expr_struct: (ret: *v_ast_expr_t,
                         name: *v_ast_expr_t,
                         body: *v_ast_stmt_list_t,
                         packed: bool,
                         export: bool
                        ) ~> void
{
    etmp = v_alloca(v_ast_expr_t);
    v_initialize(etmp);
    defer v_terminate(etmp);

    v_ast_make_generic(etmp, &ast_expr_struct_vtable, v_ast_expr_struct_t.sizeof);

    void_obj = v_ast_generic_get_object(etmp);

    obj = *(void_obj: *v_ast_expr_struct_t);

    if (name)  v_copy(&obj[0], name);
    if (body)  v_copy(&obj[1], body);

    obj[2] := packed;
    obj[3] := export;

    v_copy(ret, etmp);
}


//---------------------------------------------------------------------
//- Grammar actions ...
//---------------------------------------------------------------------
private
mk_expr_struct_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    packed = v_std_any_get_value(intptr_t, any+0);
    name   = v_std_any_get_pointer(v_ast_expr_t, any+1);
    body   = v_std_any_get_pointer(v_ast_stmt_list_t, any+2);

    expr = v_alloca(v_ast_expr_t);
    v_initialize(expr);
    defer v_terminate(expr);

    v_ast_make_expr_struct(expr, name, body, (packed: bool), false);        //- NOT export!

    v_std_any_set_pointer(ret, expr);
}

//---------------------------------------------------------------------
private
mk_unit_struct_defn_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    qualif = v_std_any_get_value(intptr_t, any+0);
    expr   = v_std_any_get_pointer(v_ast_expr_t, any+1);

    qf_export  = voidc_definitions_internal_qf_export;      //- 1 << 0
    qf_private = voidc_definitions_internal_qf_private;     //- 1 << 1

    private = qualif & qf_private;
    export  = (v_get_export_flag()  ||  qualif & qf_export)  &&  !private  &&  !v_get_hidden_flag();

    if (export)
    {
        void_obj = v_ast_generic_get_object(expr);

        obj = *(void_obj: *v_ast_expr_struct_t);

        obj[3] := true;
    }

    lst = v_alloca(v_ast_generic_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_make_list(lst, unit_struct_defn_q, (expr: *v_ast_base_t), 1);

    v_std_any_set_pointer(ret, (lst: *v_ast_base_t));
}


//---------------------------------------------------------------------
//- Compilation ...
//---------------------------------------------------------------------
export
voidc_internal_index_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                 args: **v_ast_expr_t, count: unsigned
                                ) ~> void
{
//printf("voidc_internal_index_intrinsic start %d\n", (aux: int));
//defer printf("voidc_internal_index_intrinsic stop\n");

    idx = (aux: int);

    expr = v_alloca(v_ast_expr_t);
    v_initialize(expr);
    defer v_terminate(expr);

    v_ast_make_expr_integer(expr, idx);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);


    agg_t = v_ast_expr_compiled_get_type(args[0]);
    agg_v = v_ast_expr_compiled_get_value(args[0]);

    agg_t: &*v_type_t := agg_t;

    if (v_get_overload("v_initialize", agg_t)  &&  v_kind(agg_t) != v_type_kind_reference)
    {
        agg_t := v_reference_type(agg_t, 0);
    }

    voidc_internal_op_postfix_index_helper(vis, expr, agg_t, agg_v);

    agg_t = v_get_result_type();
    agg_v = v_get_result_value();

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(agg_t, agg_v);
}

//---------------------------------------------------------------------
private
compile_expr_struct: (aux: *void, vis: *voidc_visitor_t,
                      self: *v_ast_base_t
                      ) ~> void
{
    void_obj = v_ast_generic_get_object((self: *v_ast_expr_t));

    obj = *(void_obj: *v_ast_expr_struct_t);

    name   = &obj[0];
    body   = &obj[1];
    packed =  obj[2];
    export =  obj[3];

    type_name: &*const char := 0;

    type: &*v_type_t := 0;

    if (!v_empty(name))
    {
        struct_name: &*const char := v_undef();

        tag = v_ast_base_get_tag((name: *v_ast_base_t));

        if (tag == v_ast_expr_identifier_tag)
        {
            nm = v_ast_expr_identifier_get_name(name);

            type_name   := nm;
            struct_name := v_obtain_alias(nm, export);          //- Sic !!!
        }
        else        //- Sic!
        {
            struct_name := v_ast_expr_string_get_string(name);
        }

        sstr = v_alloca(v_std_string_t);
        v_initialize(sstr);
        defer v_terminate(sstr);

        v_std_string_set(sstr, "struct.");

        v_std_string_append(sstr+0, struct_name);

        type := v_struct_type_named(v_std_string_get(sstr));
    }

    if (type_name)
    {
        if (export)  v_export_type(type_name, type);
        else         v_add_type(type_name, type);
    }

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    static_type_t = v_find_type_q(q_static_type_t);

    if (!v_empty(body))
    {
        N = (v_list_get_size(body) : unsigned);

        {   types = v_malloc(*v_type_t, N);
            defer v_free(types);

            for (i: &int := 0; i < N; ++i)
            {
                stmp = v_list_get_item(body, i);

                etmp = v_ast_stmt_get_expr(stmp);

                v_set_result_type(static_type_t);
                v_set_result_value(0);

                v_ast_accept_visitor((etmp : *v_ast_base_t), vis);

                types[i] := (v_get_result_value() : *v_type_t);
            }

            if (type) v_type_struct_set_body(type, types, N, packed);
            else      type := v_struct_type(types, N, packed);
        }

        tref = v_reference_type(type, 0);

        sstr = v_alloca(v_std_string_t, 2);
        v_initialize(sstr, 2);
        defer v_terminate(sstr, 2);

        for (i: &int := 0; i < N; ++i)
        {
            stmp = v_list_get_item(body, i);

            field = v_ast_stmt_get_name(stmp);

            if (!field  ||  !field[0])  v_continue();

            v_std_string_set(sstr+0, ".");

            v_std_string_append(sstr+0, field);

            quark = v_quark_from_string(v_std_string_get(sstr+0));

            v_std_string_set(sstr+1, "voidc.internal.index.");

            v_std_string_append_number(sstr+1, i);

            intrinsic = v_std_string_get(sstr+1);

            intrinsic_q = v_quark_from_string(intrinsic);

            if (export)
            {
                v_export_overload_q(quark, type, intrinsic_q);
                v_export_overload_q(quark, tref, intrinsic_q);

                v_export_intrinsic_q(intrinsic_q, voidc_internal_index_intrinsic, (i: *void));
            }
            else
            {
                v_add_overload_q(quark, type, intrinsic_q);
                v_add_overload_q(quark, tref, intrinsic_q);

                v_add_intrinsic_q(intrinsic_q, voidc_internal_index_intrinsic, (i: *void));
            }
        }
    }

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(static_type_t, v_cast(type, LLVMValueRef));


    //-----------------------------------------------------------------
    stmt_list = voidc_definitions_context_get_stmt_list();

    if (!stmt_list)  v_return();


    expr = v_alloca(v_ast_expr_t, 3);
    v_initialize(expr, 3);
    defer v_terminate(expr, 3);

    elst = v_alloca(v_ast_expr_list_t);
    v_initialize(elst);
    defer v_terminate(elst);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);
    defer v_terminate(stmt);


    v_ast_make_expr_integer(expr+0, (type: intptr_t));          //- Sic!!!

    v_ast_make_stmt_call(stmt, type_q, voidc_compile_type_q, expr+0, 1);

    v_list_append(stmt_list, stmt_list, stmt);


    if (type_name)
    {
        v_ast_make_expr_string(expr+0, type_name);

        v_ast_make_expr_identifier_q(expr+1, type_q);

        if (export)  v_ast_make_stmt_call(stmt, 0, q_export_type, expr, 2);
        else         v_ast_make_stmt_call(stmt, 0, q_add_type,    expr, 2);

        v_list_append(stmt_list, stmt_list, stmt);
    }


    if (v_empty(body))  v_return();

    N = v_list_get_size(body);

    if (N == 0)  v_return();

    tref = v_reference_type(type, 0);

    v_ast_make_expr_integer(expr+0, (tref: intptr_t));          //- Sic!!!

    v_ast_make_stmt_call(stmt, tref_q, voidc_compile_type_q, expr+0, 1);

    v_list_append(stmt_list, stmt_list, stmt);


    v_ast_make_expr_identifier_q(expr+0, void_q);

    v_ast_make_expr_integer(expr+1, 0);

    v_ast_make_stmt_call(stmt, void_ptr_q, q_ptr, expr+0, 2);

    v_list_append(stmt_list, stmt_list, stmt);


    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);
    defer v_terminate(sstr);

    for (i: &int := 0; i < N; ++i)
    {
        stmp = v_list_get_item(body, i);

        field = v_ast_stmt_get_name(stmp);

        if (!field  ||  !field[0])  v_continue();

        v_std_string_set(sstr, ".");

        v_std_string_append(sstr, field);

        v_ast_make_expr_integer(expr+0, v_quark_from_string(v_std_string_get(sstr)));

        v_ast_make_stmt_call(stmt, quark_q, voidc_compile_quark_q, expr+0, 1);

        v_list_append(stmt_list, stmt_list, stmt);


        v_std_string_set(sstr, "voidc.internal.index.");

        v_std_string_append_number(sstr, i);

        v_ast_make_expr_integer(expr+2, v_quark_from_string(v_std_string_get(sstr)));

        v_ast_make_stmt_call(stmt, qname_q, voidc_compile_quark_q, expr+2, 1);

        v_list_append(stmt_list, stmt_list, stmt);


        v_ast_make_expr_identifier_q(expr+0, quark_q);
        v_ast_make_expr_identifier_q(expr+1, type_q);
        v_ast_make_expr_identifier_q(expr+2, qname_q);

        if (export) v_ast_make_stmt_call(stmt, 0, q_export_overload_q, expr+0, 3);
        else        v_ast_make_stmt_call(stmt, 0, q_add_overload_q,    expr+0, 3);

        v_list_append(stmt_list, stmt_list, stmt);


        v_ast_make_expr_identifier_q(expr+1, tref_q);

        if (export) v_ast_make_stmt_call(stmt, 0, q_export_overload_q, expr+0, 3);
        else        v_ast_make_stmt_call(stmt, 0, q_add_overload_q,    expr+0, 3);

        v_list_append(stmt_list, stmt_list, stmt);


        v_copy(expr+0, expr+2);     //- kinda  "voidc.internal.index." + i


        v_ast_make_expr_integer(expr+1, i);

        v_ast_make_expr_identifier_q(expr+2, void_ptr_q);

        v_make_list(elst, expr+1, 2);

        v_ast_make_expr_identifier_q(expr+1, q_cast);

        v_ast_make_expr_call(expr+2, expr+1, elst);


        v_ast_make_expr_identifier_q(expr+1, voidc_internal_index_intrinsic_q);

        if (export)  v_ast_make_stmt_call(stmt, 0, q_export_intrinsic_q, expr+0, 3);
        else         v_ast_make_stmt_call(stmt, 0, q_add_intrinsic_q,    expr+0, 3);

        v_list_append(stmt_list, stmt_list, stmt);
    }
}

//---------------------------------------------------------------------
private
compile_unit_struct_defn: (aux: *void, vis: *voidc_visitor_t,
                           self: *v_ast_base_t
                          ) ~> void
{
    list = (self: *v_ast_generic_list_t);

    ast = v_list_get_item(list, 0);

    v_set_result_type(v_find_type_q(q_static_type_t));
    v_set_result_value(0);

    v_ast_accept_visitor(ast, vis);
}


//---------------------------------------------------------------------
//- Enable structures
//---------------------------------------------------------------------
export
voidc_enable_structures_compiler: () ~> void
{
    vis = v_get_compiler();

    v_return_if(voidc_visitor_get_method(vis, expr_struct_q, 0));

    voidc_visitor_set_method(vis, vis, expr_struct_q,      compile_expr_struct,      0);
    voidc_visitor_set_method(vis, vis, unit_struct_defn_q, compile_unit_struct_defn, 0);
}

//---------------------------------------------------------------------
//- Enable structures
//---------------------------------------------------------------------
export
voidc_enable_structures: () ~> void
{
    voidc_enable_structures_compiler();

    gr0 = v_peg_get_grammar();

    v_return_if_not(gr0);
    v_return_if(v_peg_grammar_get_parser(gr0, "expr_struct", 0));

    grammar gr0
    {
    actions:
        mk_expr_struct = mk_expr_struct_grammar_action;

        mk_unit_struct_defn = mk_unit_struct_defn_grammar_action;

    parsers:
        expr_struct = p:struct_packed _"struct" !ident_cont _ n:struct_name? _ b:struct_body?   { mk_expr_struct(p, n, b) }
                    ;

        struct_packed = p:"packed" !ident_cont  { 1 }
                      /                         { 0 }
                      ;

        struct_name = i:identifier  { mk_expr_identifier(i) }
                    / s:string      { mk_expr_string(s) }
                    ;

        struct_body = '{'_ f:fields_list _'}'       { f }
                    ;

        fields_list = fields_list_lr
                    /                                       { mk_stmt_list(0, 0) }      //- Sic!!!
                    ;

        fields_list_lr = l:fields_list_lr _ e:field_decl    { mk_stmt_list(l, e) }      //- Sic!!!
                       / e:field_decl                       { mk_stmt_list(0, e) }      //- Sic!!!
                       ;

        fields_list_lr is left-recursive;

        field_decl = i:identifier _':'_ t:expr _';'         { mk_stmt(i, t) }           //- Sic!!!
                   / t:expr _';'                            { mk_stmt(0, t) }           //- Sic!!!
                   ;


        prim += expr_struct;


        unit_struct_defn = q:qualif_flags _ e:expr_struct _';'      { mk_unit_struct_defn(q, e) }
                         ;

        unit_defn += unit_struct_defn;
    }
}


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   ast_expr_struct_vtable[2] := expr_struct_q;
}



