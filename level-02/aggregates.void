//---------------------------------------------------------------------
//- Copyright (C) 2020-2023 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("aggregates.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");

    v_import("llvm-c/Core.void");

    v_import("unit_module.void");
    v_import("loops_etc.void");

//  v_import("printf.void");
}

{   v_enable_level_01();

    voidc_enable_loops_etc();
}


//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("q_op_braces", q_ref, q("v.op_braces"));

    v_add_symbol("packed_q", q_ref, q("packed"));

    v_add_symbol("voidc_incomplete_array_type_tag", q_ref, q("voidc.incomplete_array_type_tag"));
}


//=====================================================================
{   voidc_unit_begin_module("aggregates_module"); }


//---------------------------------------------------------------------
v_op_braces: &v_ast_expr_t := v_undef();

voidc_aggregates_internal_gloabls_cleaner: (*void) -> void
{
    v_terminate(&v_op_braces);
}


//---------------------------------------------------------------------
v_op_braces_intrinsic: (*void, vis: voidc_visitor_ptr,
                        self: v_ast_base_ptr) -> void
{
    args = v_ast_expr_call_get_arg_list((self: v_ast_expr_ptr));

    N = v_list_get_size(args);


    t: &v_type_ptr := v_get_result_type();

    is_reference = v_type_is_reference(t);

    addr_sp: &unsigned := v_undef();

    if (is_reference)
    {
        addr_sp := v_type_refptr_get_address_space(t);      //- Sic!
        t       := v_type_refptr_get_element_type(t);       //- Sic!
    }

    block
    {
        if (!v_type_is_struct(t))  v_break();

        typs = v_type_struct_get_element_types(t);

        if (!v_type_is_struct(typs[0]))  v_break();

        if (v_type_struct_get_name_q(typs[0]) != voidc_incomplete_array_type_tag)  v_break();

        t := v_array_type(typs[1], N);
    }


    v: &LLVMValueRef := LLVMGetUndef(v_type_get_llvm_type(t));


    builder = v_target_get_builder();

    if (v_type_is_vector(t))
    {
        et = v_type_vector_get_element_type(t);

        int_ = v_type_get_llvm_type(v_find_type("int"));

        for (i: &int := 0; i < N; ++i)
        {
            expr = v_list_get_item(args, i);

            v_set_result_type(et);
            v_set_result_value(0);

            v_ast_accept_visitor((expr: v_ast_base_ptr), vis);

            ev = v_get_result_value();

            iv = LLVMConstInt(int_, i, 0);

            v := LLVMBuildInsertElement(builder, v, ev, iv, "");
        }
    }
    else
    {
        ets: &*v_type_ptr := 0;

        et: &v_type_ptr := v_undef();

        if (v_type_is_struct(t))  ets := v_type_struct_get_element_types(t);
        if (v_type_is_array(t))   et  := v_type_array_get_element_type(t);

        for (i: &int := 0; i < N; ++i)
        {
            expr = v_list_get_item(args, i);

            if (ets)  et := ets[i];

            v_set_result_type(et);
            v_set_result_value(0);

            v_ast_accept_visitor((expr: v_ast_base_ptr), vis);

            ev = v_get_result_value();

            v := LLVMBuildInsertValue(builder, v, ev, i, "");
        }
    }

    if (is_reference)
    {
        v_set_result_type(v_reference_type(t, addr_sp));
        v_set_result_value(0);

        v_adopt_result(t, v);
    }
    else
    {
        v_set_result_type(t);
        v_set_result_value(v);
    }
}


//---------------------------------------------------------------------
//- v_struct ...
//---------------------------------------------------------------------
v_struct_intrinsic: (*void, vis: voidc_visitor_ptr,
                     self: v_ast_base_ptr) -> void
{
    args = v_ast_expr_call_get_arg_list((self: v_ast_expr_ptr));

    packed: &bool := false;

    type: &v_type_ptr := 0;

    n = v_list_get_size(args);

    if (n)
    block
    {
        i0: &int :=  0;
        i1: &int := i0;

        expr: &v_ast_expr_ptr := v_list_get_item(args, i0);

        if (v_ast_base_get_visitor_method_tag((expr : v_ast_base_ptr)) == v_ast_expr_string_visitor_method_tag)
        {
            name = v_ast_expr_string_get_string(expr);

            type := v_struct_type_named(name);

            if (n == ++i0) v_break();
        }

        if (i1 != i0)
        {
            i1 := i0;

            expr := v_list_get_item(args, i0);
        }

        if (v_ast_base_get_visitor_method_tag((expr : v_ast_base_ptr)) == v_ast_expr_identifier_visitor_method_tag)
        {
            qident = v_ast_expr_identifier_get_name_q(expr);

            if (qident == packed_q) packed := true;

            if (n == ++i0) v_break();
        }

        if (i1 != i0)
        {
            i1 := i0;

            expr := v_list_get_item(args, i0);
        }

        if (v_ast_base_get_visitor_method_tag((expr : v_ast_base_ptr)) == v_ast_expr_call_visitor_method_tag)
        {
            alst = v_ast_expr_call_get_arg_list(expr);

            N = (v_list_get_size(alst) : unsigned);

            types = v_malloc(v_type_ptr, N);
            defer v_free(types);

            for (i: &int := 0; i < N; ++i)
            {
                etmp = v_list_get_item(alst, i);

                v_set_result_type(INVIOLABLE_TAG);
                v_set_result_value(0);

                v_ast_accept_visitor((etmp : v_ast_base_ptr), vis);

                types[i] := (v_get_result_value() : v_type_ptr);
            }

            if (type) v_type_struct_set_body(type, types, N, packed);
            else      type := v_struct_type(types, N, packed);
        }
    }

    v_set_result_type(v_static_type_t);
    v_set_result_value((type: LLVMValueRef));
}


//---------------------------------------------------------------------
//- v_typed ...
//---------------------------------------------------------------------
v_typed_intrinsic: (*void, vis: voidc_visitor_ptr,
                    self: v_ast_base_ptr) -> void
{
    args = v_ast_expr_call_get_arg_list((self: v_ast_expr_ptr));

    arg0 = v_list_get_item(args, 0);
    arg1 = v_list_get_item(args, 1);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor((arg0 : v_ast_base_ptr), vis);         //- Type

    t = (v_get_result_value() : v_type_ptr);

    v_set_result_type(t);
    v_set_result_value(0);

    v_ast_accept_visitor((arg1 : v_ast_base_ptr), vis);         //- Value

    v = v_get_result_value();

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t, v);
}


//---------------------------------------------------------------------
//- Enable aggregates
//---------------------------------------------------------------------
export
voidc_enable_aggregates_compiler: () -> void
{
    v_return_if(v_get_intrinsic_q(q_op_braces, 0));

    q_struct = v_quark_from_string("v_struct");
    q_typed  = v_quark_from_string("v_typed");

    v_add_intrinsic_q(q_op_braces, v_op_braces_intrinsic, 0);
    v_add_intrinsic_q(q_struct,    v_struct_intrinsic,    0);
    v_add_intrinsic_q(q_typed,     v_typed_intrinsic,     0);

    voidc_enable_definitions_compiler();        //- Sic!
}


//---------------------------------------------------------------------
//- Enable aggregates
//---------------------------------------------------------------------
export
voidc_enable_aggregates: () -> void
{
    voidc_enable_aggregates_compiler();


    v_return_if_not(voidc_has_grammar());

    gr0 = v_alloca(v_peg_grammar_t);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    any_ = v_peg_grammar_get_value(gr0, "v_op_braces");

    if (any_)  v_return();


    voidc_enable_definitions();         //- Sic!

    v_peg_get_grammar(gr0);


    any_braces = v_alloca(v_std_any_t);
    v_initialize(any_braces);
    defer v_terminate(any_braces);

    v_std_any_set_pointer(any_braces, &v_op_braces);


    grammar gr0
    {
    values:
        v_op_braces = any_braces;

    parsers:
        bracketed =+ '{'_ l:expr_list _ (','_)? '}'     { mk_expr_call(v_op_braces, l) };
    }

    v_peg_set_grammar(gr0);
}


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    v_initialize(&v_op_braces);

    v_ast_make_expr_identifier_q(&v_op_braces, q_op_braces);

    v_add_cleaner(voidc_aggregates_internal_gloabls_cleaner, 0);
}


