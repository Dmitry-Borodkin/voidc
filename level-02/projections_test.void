{   v_import("level-00");
    v_import("level-01");

    v_import("literals.void");
    v_import("loops_etc.void");
    v_import("aggregates.void");
    v_import("overloading.void");
    v_import("projections.void");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01();

    voidc_enable_literals();
    voidc_enable_loops_etc();
    voidc_enable_aggregates();
    voidc_enable_overloading();
    voidc_enable_projections();
}


//=====================================================================
double = float(64);

Vector = v_struct("struct.my_vector_2d", { double[2] });

vector_x_ref: (v: &Vector) ~> &double = v[0][0];
vector_y_ref: (v: &Vector) ~> &double = v[0][1];

vector_x: (v: Vector) ~> double = v[0][0];
vector_y: (v: Vector) ~> double = v[0][1];


{   vector_ref = v_reference_type(Vector, 0);

    q = v_quark_from_string;

    v_util_function_dict_set(q(".x"), vector_ref, q("vector_x_ref"));
    v_util_function_dict_set(q(".y"), vector_ref, q("vector_y_ref"));
    v_util_function_dict_set(q(".x"), Vector,     q("vector_x"));
    v_util_function_dict_set(q(".y"), Vector,     q("vector_y"));
}


//---------------------------------------------------------------------
{
    v: &Vector := {{1.7, 2.3}};

    printf("v: (%g, %g)\n", v.x, v.y);

    v.x += 5.3;

    printf("v: (%g, %g)\n", v.x, v.y);


    w: Vector = {{1.1, 2.2}};

    printf("w: (%g, %g)\n", w.x, w.y);
}


//---------------------------------------------------------------------
vector_add_ref: (v: &Vector, x: double, y: double) ~> &Vector
=
    v := {{v.x+x, v.y+y}};

vector_add: (v: Vector, x: double, y: double) ~> Vector
=
    {{v.x+x, v.y+y}};


{   vector_ref = v_reference_type(Vector, 0);

    q = v_quark_from_string;

    v_util_function_dict_set(q(".add()"), vector_ref, q("vector_add_ref"));
    v_util_function_dict_set(q(".add()"), Vector,     q("vector_add"));
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    printf("\n");

    v: &Vector := {{1.7, 2.3}};

    v.add(0.1, 0.2);

    printf("v: (%g, %g)\n", v.x, v.y);

    w = v_load(&v).add(-0.1, -0.2);

    printf("w: (%g, %g)\n", w.x, w.y);

}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    printf("\n");

    v: &Vector := {{1.7, 2.3}};

    p = &v;

    p->add(0.3, 0.4);

    printf("p: (%g, %g)\n", p->x, p->y);

    w = v_load(p).add(-0.3, -0.4);

    printf("w: (%g, %g)\n", w.x, w.y);

    printf("p: (%g, %g)\n", p->x, p->y);

}


//---------------------------------------------------------------------
{   char_ptr     = v_pointer_type(char, 0);
    char_ptr_ref = v_reference_type(char_ptr, 0);

    q = v_quark_from_string;

    v_util_function_dict_set(q(".my_printf()"), char_ptr,     q("printf"));
    v_util_function_dict_set(q(".my_printf()"), char_ptr_ref, q("printf"));
}

//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    printf("\n");

    ("Hello %s!\n" : *char).my_printf("World");         //- WTF?

}


//---------------------------------------------------------------------
foo_t = v_struct("struct.foo_t", { *((*const char, ...) ~> int) });

foo_ref = &foo_t;

foo_bar: (f: foo_t) ~> *((*const char, ...) ~> int) = f[0];

foo: &foo_t := { printf };

{
    q = v_quark_from_string;

    v_util_function_dict_set(q(".fun"), foo_t,   q("foo_bar"));
    v_util_function_dict_set(q(".fun"), foo_ref, q("foo_bar"));
}

//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    printf("\n");

    foo.fun("Hello %s!\n", "world");

}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    printf("\n");

    t0 = vec(int(5), 5);

    t1 = t0[2];

    printf("t1.size:  %d\n", (t1.size : int));
    printf("t1.align: %d\n", (t1.align : int));


    v: &t1 := {{0, 1, 2, 3, 4}};

    v[1] := v[0] + 5i5;

    printf("v12: %d\n", (v_load(&v[1])[2] : int));          //- Sic!


    t2 = vec(bool, 32*8)[5];

    printf("t2.size:  %d\n", (t2.size : int));
    printf("t2.align: %d\n", (t2.align : int));

    t3 = int(33*8);

    printf("t3.size:  %d\n", (t3.size : int));
    printf("t3.align: %d\n", (t3.align : int));
}

//---------------------------------------------------------------------
{
    printf("\n");

    t0 = vec(int(5), 5);

    t1 = t0[2];

    printf("vec(int(3), 5)[2].size:  %d\n", (vec(int(3), 5)[2].size : int));
    printf("vec(int(3), 5)[2].align: %d\n", (vec(int(3), 5)[2].align : int));
}


