//---------------------------------------------------------------------
//- Copyright (C) 2020-2022 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("projections.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");

    v_import("llvm-c/Core.void");

    v_import("unit_module.void");
    v_import("literals.void");
    v_import("loops_etc.void");
    v_import("aggregates.void");
    v_import("overloading.void");

//  v_import("printf.void");
}

{   v_enable_level_01();

    voidc_enable_literals();
    voidc_enable_loops_etc();
    voidc_enable_aggregates();
    voidc_enable_overloading();
}


//=====================================================================
{   voidc_unit_begin_module("projections_module"); }


//---------------------------------------------------------------------
op_postfix_dot:     &v_ast_expr_t := v_undef();
op_postfix_tildato: &v_ast_expr_t := v_undef();

voidc_projections_internal_globals_cleaner: (*void) -> void
{
    v_terminate(&op_postfix_dot);
    v_terminate(&op_postfix_tildato);
}


//---------------------------------------------------------------------
//- mk_projection - grammar action
//---------------------------------------------------------------------
private
mk_projection_grammar_action: (ret: v_std_any_ptr, any: v_std_any_ptr, size_t) -> void
{
    op0  = v_std_any_get_pointer(v_ast_expr_t,      any+0);
    name = v_std_any_get_pointer(v_std_string_t,    any+1);
    args = v_std_any_get_pointer(v_ast_expr_list_t, any+2);

    void_obj = v_ast_generic_get_object((op0: v_ast_base_ptr));

    obj = *(void_obj: v_ast_operator_unary_ptr);

    quark = obj[0];
    prec  = obj[1];


    pay = v_alloca(v_ast_generic_list_t);
    v_initialize(pay);
    defer v_terminate(pay);

    id = v_alloca(v_ast_expr_t);
    v_initialize(id);
    defer v_terminate(id);

    v_ast_make_expr_identifier(id, v_std_string_get(name));

    v_make_list(pay, 0, (id: v_ast_base_ptr), 1);

    if (args) v_list_append(pay, pay, (args: v_ast_base_ptr));


    op1 = v_alloca(v_ast_expr_t);
    v_initialize(op1);
    defer v_terminate(op1);

    v_ast_make_operator_unary(op1, quark, prec, (pay: v_ast_base_ptr));

    v_std_any_set_pointer(ret, op1);
}


//---------------------------------------------------------------------
private
intrinsic_p1_t = (vis: voidc_visitor_ptr, aux: *void,
                  args: v_ast_expr_list_ptr,
                  t0: v_type_ptr, v0: LLVMValueRef
                 ) -> void;


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
private
op_postfix_dot_helper: (vis: voidc_visitor_ptr,
                        args: v_ast_expr_list_ptr,
                        t0: v_type_ptr, v0: LLVMValueRef
                       ) -> void
{
    op = v_list_get_item(args, 0);

    void_obj = v_ast_generic_get_object((op: v_ast_base_ptr));

    obj = *(void_obj: v_ast_operator_unary_ptr);

    pay = (&obj[2] : v_ast_generic_list_ptr);


    etmp = (v_list_get_item(pay, 0) : v_ast_expr_ptr);

    name = v_ast_expr_identifier_get_name(etmp);

    alst: &v_ast_expr_list_ptr := v_undef();

    got_args = v_list_get_size(pay) > 1;

    if (got_args)  alst := (v_list_get_item(pay, 1) : v_ast_expr_list_ptr);

    spc_flag: &bool := false;

    quark: &v_quark_t := v_undef();

    {   sstr = v_alloca(v_std_string_t);
        v_initialize(sstr);
        defer v_terminate(sstr);

        v_std_string_set(sstr, ".");

        v_std_string_append(sstr, name);

        if (got_args)  v_std_string_append(sstr, "()");

        quark := v_quark_from_string(v_std_string_get(sstr));
    }

    void_fun: &*void := 0;
    void_aux: &*void := 0;

    ft: &v_type_ptr   := 0;
    fv: &LLVMValueRef := 0;

    if (!v_util_lookup_function_dict(vis, quark, t0, void_fun, void_aux, ft, fv))
    {
        spc_flag := true;       //- assert(got_args);

        sstr = v_alloca(v_std_string_t);
        v_initialize(sstr);
        defer v_terminate(sstr);

        v_std_string_set(sstr, ".");

        v_std_string_append(sstr, name);

        quark := v_quark_from_string(v_std_string_get(sstr));

        v_util_lookup_function_dict(vis, quark, t0, void_fun, void_aux, ft, fv);        //- Sic!!!
    }

    //- Overloading only!

    tt = v_get_result_type();

    if (spc_flag)  v_set_result_type(INVIOLABLE_TAG);

    tr: &v_type_ptr   := v_undef();
    vr: &LLVMValueRef := v_undef();

    if (fun = (void_fun: *intrinsic_p1_t))
    {
        fun(vis, void_aux, args, t0, v0);

        if (!spc_flag)  v_return();

        tr := v_get_result_type();
        vr := v_get_result_value();
    }
    else
    {
        par_count = v_type_function_get_param_count(ft);
        par_types = v_type_function_get_param_types(ft);

        arg_count: &int := 1;

        if (got_args && !spc_flag)  arg_count += (v_list_get_size(alst) : int);

        values = v_malloc(LLVMValueRef, arg_count);
        defer v_free(values);

        for (i: &int := 0; i < arg_count; ++i)
        {
            if (i == 0)
            {
                v_set_result_type(par_types[0]);

                v_adopt_result(t0, v0);
            }
            else
            {
                if (i < par_count)  v_set_result_type(par_types[i]);
                else                v_set_result_type(UNREFERENCE_TAG);

                etmp = v_list_get_item(alst, i-1);

                v_ast_accept_visitor((etmp: v_ast_base_ptr), vis);
            }

            values[i] := v_get_result_value();
        }

        builder = v_target_get_builder();

        ft_ = v_type_get_llvm_type(ft);

        vr := LLVMBuildCall2(builder, ft_, fv, values, arg_count, "");

        tr := v_type_function_get_return_type(ft);
    }

    v_set_result_type(tt);

    if (spc_flag)  voidc_internal_compile_expr_call_helper(vis, alst, tr, vr);
    else           v_adopt_result(tr, vr);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
private
op_postfix_dot_intrinsic: (vis: voidc_visitor_ptr, aux: *void,
                           args: v_ast_expr_list_ptr) -> void
{
    tt = v_get_result_type();

    arg = v_list_get_item(args, 1);

    v_set_result_type(INVIOLABLE_TAG);

    v_ast_accept_visitor((arg: v_ast_base_ptr), vis);

    t0 = v_get_result_type();
    v0 = v_get_result_value();


    v_set_result_type(tt);

    op_postfix_dot_helper(vis, args, t0, v0);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
private
op_postfix_tildato_intrinsic: (vis: voidc_visitor_ptr, aux: *void,
                               args: v_ast_expr_list_ptr) -> void
{
    tt = v_get_result_type();

    arg = v_list_get_item(args, 1);

    v_set_result_type(INVIOLABLE_TAG);

    v_ast_accept_visitor((arg: v_ast_base_ptr), vis);

    t0: &v_type_ptr   := v_get_result_type();
    v0: &LLVMValueRef := v_get_result_value();

    builder = v_target_get_builder();

    q = v_quark_from_string("op_postfix_tildato");

    void_fun: &*void := 0;
    void_aux: &*void := 0;

    ft: &v_type_ptr   := 0;
    fv: &LLVMValueRef := 0;

    if (v_util_lookup_function_dict(vis, q, t0, void_fun, void_aux, ft, fv))
    {
        //- Got overloading!

        if (fun = (void_fun: *intrinsic_p1_t))
        {
            v_set_result_type(INVIOLABLE_TAG);

            fun(vis, void_aux, args, t0, v0);

            t0 := v_get_result_type();
            v0 := v_get_result_value();
        }
        else
        {
            val: &LLVMValueRef := v_undef();

            fpar = v_type_function_get_param_types(ft);

            v_set_result_type(fpar[0]);

            v_adopt_result(t0, v0);

            val := v_get_result_value();

            ft_ = v_type_get_llvm_type(ft);

            v0 := LLVMBuildCall2(builder, ft_, fv, &val, 1, "");

            t0 := v_type_function_get_return_type(ft);
        }
    }

    if (v_type_is_reference(t0))
    {
        t0 := v_type_refptr_get_element_type(t0);

        v0 := LLVMBuildLoad2(builder, v_type_get_llvm_type(t0), v0, "");
    }

    {   e = v_type_refptr_get_element_type(t0);
        a = v_type_refptr_get_address_space(t0);

        t0 := v_reference_type(e, a);
    }


    //- Default treatment...

    v_set_result_type(tt);

    op_postfix_dot_helper(vis, args, t0, v0);
}


//---------------------------------------------------------------------
//- Enable projections
//---------------------------------------------------------------------
export
voidc_enable_projections_compiler: () -> void
{
    vis = voidc_compiler;

    v_return_if(voidc_visitor_get_intrinsic(vis, "v.op_postfix_dot", 0));

    voidc_visitor_set_intrinsic(vis, vis, "v.op_postfix_dot",     op_postfix_dot_intrinsic,     0);
    voidc_visitor_set_intrinsic(vis, vis, "v.op_postfix_tildato", op_postfix_tildato_intrinsic, 0);
}


//---------------------------------------------------------------------
//- Enable projections
//---------------------------------------------------------------------
export
voidc_enable_projections: () -> void
{
    voidc_enable_projections_compiler();


    v_return_if_not(voidc_has_grammar());

    any = v_alloca(v_std_any_t, 2);
    v_initialize(any, 2);
    defer v_terminate(any, 2);

    any_dot     = any + 0;
    any_tildato = any + 1;

    v_std_any_set_pointer(any_dot,     &op_postfix_dot);
    v_std_any_set_pointer(any_tildato, &op_postfix_tildato);

    gr0 = v_alloca(v_peg_grammar_t);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    values:
        op_postfix_dot     = any_dot;
        op_postfix_tildato = any_tildato;

    actions:
        mk_projection = mk_projection_grammar_action;

    parsers:
        postfix += '.' _ i:identifier _'('_ al:expr_list _')'   { mk_projection(op_postfix_dot,     i, al) }
                 / '.' _ i:identifier                           { mk_projection(op_postfix_dot,     i,  0) }
                 / "~>"_ i:identifier _'('_ al:expr_list _')'   { mk_projection(op_postfix_tildato, i, al) }
                 / "~>"_ i:identifier                           { mk_projection(op_postfix_tildato, i,  0) }
                 ;
    }

    v_peg_set_grammar(gr0);
}


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    v_initialize(&op_postfix_dot);
    v_initialize(&op_postfix_tildato);

    q = v_quark_from_string;

    v_ast_make_operator_unary(&op_postfix_dot,     q("op_postfix_dot"),     30000, 0);      //- "Postfix" priority
    v_ast_make_operator_unary(&op_postfix_tildato, q("op_postfix_tildato"), 30000, 0);      //- "Postfix" priority

    v_add_cleaner(voidc_projections_internal_globals_cleaner, 0);
}


