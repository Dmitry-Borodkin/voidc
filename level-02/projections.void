//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("projections.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");

    v_import("llvm-c/Core.void");

    v_import("literals.void");
    v_import("loops_etc.void");
    v_import("condcomp.void");
    v_import("aggregates.void");
    v_import("handlers_etc.void");
    v_import("overloading.void");

//  v_import("printf.void");
}

{   v_enable_level_01();

    voidc_enable_literals();
    voidc_enable_loops_etc();
    voidc_enable_condcomp();
    voidc_enable_aggregates();
    voidc_enable_handlers_etc();
    voidc_enable_overloading();
}


//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("proj_q", q_ref, q("projection_payload"));

    v_add_symbol("q_op_postfix_to", q_ref, q("v.op_postfix_to"));
}


//=====================================================================
{   voidc_unit_begin_module("projections_module"); }


//---------------------------------------------------------------------
op_postfix_dot: &v_ast_expr_t := v_undef();
op_postfix_to:  &v_ast_expr_t := v_undef();

voidc_projections_internal_globals_cleaner: (*void) ~> void
{
    v_terminate(&op_postfix_dot);
    v_terminate(&op_postfix_to);
}


//---------------------------------------------------------------------
//- mk_projection - grammar action
//---------------------------------------------------------------------
private
mk_projection_grammar_action: (ret: v_std_any_ptr, *void, any: v_std_any_ptr, size_t) ~> void
{
    op0  = v_std_any_get_pointer(v_ast_expr_t,      any+0);
    name = v_std_any_get_pointer(v_std_string_t,    any+1);
    args = v_std_any_get_pointer(v_ast_expr_list_t, any+2);

    void_obj = v_ast_generic_get_object(op0);

    obj = *(void_obj: v_ast_operator_unary_ptr);

    quark = obj[0];
    prec  = obj[1];


    pay = v_alloca(v_ast_generic_list_t);
    v_initialize(pay);
    defer v_terminate(pay);

    id = v_alloca(v_ast_expr_t);
    v_initialize(id);
    defer v_terminate(id);

    v_ast_make_expr_identifier(id, v_std_string_get(name));

    v_make_list(pay, proj_q, (id: v_ast_base_ptr), 1);

    if (args) v_list_append(pay, pay, (args: v_ast_base_ptr));


    op1 = v_alloca(v_ast_expr_t);
    v_initialize(op1);
    defer v_terminate(op1);

    v_ast_make_operator_unary(op1, quark, prec, (pay: v_ast_base_ptr));

    v_std_any_set_pointer(ret, op1);
}


//---------------------------------------------------------------------
private
intrinsic_p1_t = (aux: *void, vis: voidc_visitor_ptr,
                  self: v_ast_base_ptr,
                  t0: v_type_ptr, v0: LLVMValueRef
                 ) ~> void;


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
private
op_postfix_dot_helper: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                        t0: v_type_ptr, v0: LLVMValueRef,
                        q0: v_quark_t, q1: v_quark_t,
                        alst: *v_ast_expr_list_t
                       ) ~> void
{
    spc_flag: &bool := false;

    quark: &v_quark_t := q0;

    if (alst)   quark := q1;


    void_fun: &*void := 0;
    void_aux: &*void := 0;

    ft: &v_type_ptr   := 0;
    fv: &LLVMValueRef := 0;

    if (!v_util_lookup_function_dict(quark, t0, void_fun, void_aux, ft, fv))
    {
        spc_flag := true;       v_assert(alst);

        quark := q0;

        v_util_lookup_function_dict(quark, t0, void_fun, void_aux, ft, fv);        //- Sic!!!
    }

    //- Overloading only!

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    if (spc_flag)
    {
        v_set_result_type(INVIOLABLE_TAG);
        v_set_result_value(0);
    }

    if (fun = (void_fun: *intrinsic_p1_t))
    {
        fun(void_aux, vis, self, t0, v0);
    }
    else
    {
        expr = v_alloca(v_ast_expr_t);
        v_initialize(expr);
        defer v_terminate(expr);

        arg_count: &int := 1;

        if (alst && !spc_flag)  arg_count += (v_list_get_size(alst) : int);

        arg_ptrs = v_malloc(v_ast_expr_ptr, arg_count);
        defer v_free(arg_ptrs);

        v_ast_make_expr_compiled(expr, t0, v0);

        arg_ptrs[0] := expr;

        for (j: &int := 1; j < arg_count; ++j)
        {
            arg_ptrs[j] := v_list_get_item(alst, j-1);
        }

        v_llvm_build_call(vis, self, ft, fv, arg_ptrs, arg_count);
    }

    if (!spc_flag)  v_return();

    tr = v_get_result_type();
    vr = v_get_result_value();

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_compile_expr_call(vis, self, alst, tr, vr);
}

//---------------------------------------------------------------------
{   v_make_handler(v_compile_op_postfix_dot, op_postfix_dot_helper); }

//---------------------------------------------------------------------
private
op_postfix_dot_agent: (vis: *voidc_visitor_t, self: *v_ast_base_t,
                       t0: v_type_ptr, v0: LLVMValueRef
                      ) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: v_ast_expr_ptr));

    op = v_list_get_item(args, 0);

    void_obj = v_ast_generic_get_object(op);

    obj = *(void_obj: v_ast_operator_unary_ptr);

    pay = (&obj[2] : v_ast_generic_list_ptr);


    etmp = (v_list_get_item(pay, 0) : v_ast_expr_ptr);

    name = v_ast_expr_identifier_get_name(etmp);

    alst: &v_ast_expr_list_ptr := 0;

    got_args = v_list_get_size(pay) > 1;

    if (got_args)  alst := (v_list_get_item(pay, 1) : v_ast_expr_list_ptr);

    spc_flag: &bool := false;

    q0: &v_quark_t := v_undef();
    q1: &v_quark_t := v_undef();

    {   sstr = v_alloca(v_std_string_t);
        v_initialize(sstr);
        defer v_terminate(sstr);

        v_std_string_set(sstr, ".");

        v_std_string_append(sstr, name);

        q0 := v_quark_from_string(v_std_string_get(sstr));

        v_std_string_append(sstr, "()");

        q1 := v_quark_from_string(v_std_string_get(sstr));
    }

    v_compile_op_postfix_dot(vis, self, t0, v0, q0, q1, alst);
}

//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
private
op_postfix_dot_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    arg = v_list_get_item(args, 1);

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor((arg: *v_ast_base_t), vis);

    t0 = v_get_result_type();
    v0 = v_get_result_value();


    v_set_result_type(ttag);
    v_set_result_value(vtag);

    op_postfix_dot_agent(vis, self, t0, v0);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
private
op_postfix_to_helper: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                       t0: v_type_ptr, v0: LLVMValueRef
                      ) ~> void
{
    ttag = v_get_result_type();
    vtag = v_get_result_value();

    t0: &v_type_ptr   := t0;
    v0: &LLVMValueRef := v0;

    q = q_op_postfix_to;

    void_fun: &*void := 0;
    void_aux: &*void := 0;

    ft: &v_type_ptr   := 0;
    fv: &LLVMValueRef := 0;

    if (v_util_lookup_function_dict(q, t0, void_fun, void_aux, ft, fv))
    {
        //- Got overloading!

        if (fun = (void_fun: *intrinsic_p1_t))
        {
            v_set_result_type(INVIOLABLE_TAG);
            v_set_result_value(0);

            fun(void_aux, vis, self, t0, v0);

            t0 := v_get_result_type();
            v0 := v_get_result_value();
        }
        else
        {
            expr = v_alloca(v_ast_expr_t);
            v_initialize(expr);
            defer v_terminate(expr);

            v_ast_make_expr_compiled(expr, t0, v0);

            arg_ptr: &v_ast_expr_ptr := expr;               //- Value, compiled

            t0 := v_type_function_get_return_type(ft);

            v_set_result_type(t0);
            v_set_result_value(0);

            v_llvm_build_call(vis, self, ft, fv, &arg_ptr, 1);

            v0 := v_get_result_value();
        }
    }

    //- Default treatment...

    if (v_type_is_reference(t0))
    {
        builder = v_target_get_builder();

        t0 := v_type_refptr_get_element_type(t0);

        v0 := LLVMBuildLoad2(builder, v_type_get_llvm_type(t0), v0, "");
    }

    {   e = v_type_refptr_get_element_type(t0);
        a = v_type_refptr_get_address_space(t0);

        t0 := v_reference_type(e, a);
    }

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    op_postfix_dot_agent(vis, self, t0, v0);
}

//---------------------------------------------------------------------
{   v_make_handler(v_compile_op_postfix_to, op_postfix_to_helper); }

//---------------------------------------------------------------------
private
op_postfix_to_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    arg = v_list_get_item(args, 1);

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor((arg: *v_ast_base_t), vis);

    t0: &*v_type_t    := v_get_result_type();
    v0: &LLVMValueRef := v_get_result_value();

    q = q_op_postfix_to;

    void_fun: &*void := 0;
    void_aux: &*void := 0;

    ft: &*v_type_t    := 0;
    fv: &LLVMValueRef := 0;

    if (v_util_lookup_function_dict(q, t0, void_fun, void_aux, ft, fv))
    {
        //- Got overloading!

        if (fun = (void_fun: *intrinsic_p1_t))
        {
            v_set_result_type(INVIOLABLE_TAG);
            v_set_result_value(0);

            fun(void_aux, vis, self, t0, v0);

            t0 := v_get_result_type();
            v0 := v_get_result_value();
        }
        else
        {
            expr = v_alloca(v_ast_expr_t);
            v_initialize(expr);
            defer v_terminate(expr);

            v_ast_make_expr_compiled(expr, t0, v0);

            arg_ptr: &v_ast_expr_ptr := expr;               //- Value, compiled

            t0 := v_type_function_get_return_type(ft);

            v_set_result_type(t0);
            v_set_result_value(0);

            v_llvm_build_call(vis, self, ft, fv, &arg_ptr, 1);

            v0 := v_get_result_value();
        }
    }

    //- Default treatment...

    if (v_type_is_reference(t0))
    {
        builder = v_target_get_builder();

        t0 := v_type_refptr_get_element_type(t0);

        v0 := LLVMBuildLoad2(builder, v_type_get_llvm_type(t0), v0, "");
    }

    {   e = v_type_refptr_get_element_type(t0);
        a = v_type_refptr_get_address_space(t0);

        t0 := v_reference_type(e, a);
    }

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    op_postfix_dot_agent(vis, self, t0, v0);
}


//---------------------------------------------------------------------
//- Enable projections
//---------------------------------------------------------------------
export
voidc_enable_projections_compiler: () ~> void
{
    vis = v_get_compiler();

    v_op_postfix_dot_q = v_quark_from_string("v.op_postfix_dot");

    v_return_if(v_get_intrinsic_q(v_op_postfix_dot_q, 0));

    v_op_postfix_to_q = v_quark_from_string("v.op_postfix_to");

    //-------------------------------------------------------------
    v_add_intrinsic_q(v_op_postfix_dot_q, op_postfix_dot_intrinsic, 0);
    v_add_intrinsic_q(v_op_postfix_to_q,  op_postfix_to_intrinsic,  0);

    //-------------------------------------------------------------
    v_set_handler(v_compile_op_postfix_dot, op_postfix_dot_helper, 0);
    v_set_handler(v_compile_op_postfix_to,  op_postfix_to_helper,  0);
}


//---------------------------------------------------------------------
//- Enable projections
//---------------------------------------------------------------------
export
voidc_enable_projections: () ~> void
{
    voidc_enable_projections_compiler();


    v_return_if_not(voidc_has_grammar());

    any = v_alloca(v_std_any_t, 2);
    v_initialize(any, 2);
    defer v_terminate(any, 2);

    any_dot = any + 0;
    any_to  = any + 1;

    v_std_any_set_pointer(any_dot, &op_postfix_dot);
    v_std_any_set_pointer(any_to,  &op_postfix_to);

    gr0 = v_alloca(v_peg_grammar_t);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    values:
        op_postfix_dot = any_dot;
        op_postfix_to  = any_to;

    actions:
        mk_projection = mk_projection_grammar_action;

    parsers:
        postfix += '.' _ i:identifier _'('_ al:expr_list _')'   { mk_projection(op_postfix_dot, i, al) }
                 / '.' _ i:identifier                           { mk_projection(op_postfix_dot, i,  0) }
                 / "->"_ i:identifier _'('_ al:expr_list _')'   { mk_projection(op_postfix_to,  i, al) }
                 / "->"_ i:identifier                           { mk_projection(op_postfix_to,  i,  0) }
                 ;
    }

    v_peg_set_grammar(gr0);
}


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    v_initialize(&op_postfix_dot);
    v_initialize(&op_postfix_to);

    q = v_quark_from_string;

    v_ast_make_operator_unary(&op_postfix_dot, q("v.op_postfix_dot"), 30000, 0);        //- "Postfix" priority
    v_ast_make_operator_unary(&op_postfix_to,  q("v.op_postfix_to"),  30000, 0);        //- "Postfix" priority

    v_add_cleaner(voidc_projections_internal_globals_cleaner, 0);
}


//=====================================================================
{   voidc_unit_begin_module("static_type_projections_module"); }

//---------------------------------------------------------------------
voidc_internal_static_type_projection_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                                  t0: v_type_ptr, v0: LLVMValueRef
                                                  ) ~> void
{
    type  = (v0: v_type_ptr);
    type_ = v_type_get_llvm_type(type);

    f = (aux: *((LLVMTypeRef) ~> LLVMValueRef));

    v = f(type_);

    v_adopt_result(size_t, v);
}

//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
{
    q = v_quark_from_string;

    q_static_type_sizeof  = q("v.static_type_sizeof");
    q_static_type_alignof = q("v.static_type_alignof");

    v_util_function_dict_set(q(".size"),  v_static_type_t, q_static_type_sizeof);
    v_util_function_dict_set(q(".align"), v_static_type_t, q_static_type_alignof);

    v_export_intrinsic_q(q_static_type_sizeof,  voidc_internal_static_type_projection_intrinsic, LLVMSizeOf);
    v_export_intrinsic_q(q_static_type_alignof, voidc_internal_static_type_projection_intrinsic, LLVMAlignOf);
}


