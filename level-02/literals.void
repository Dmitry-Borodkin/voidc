//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("literals.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");

    v_import("llvm-c/Core.void");

//  v_import("printf.void");
}

{   v_enable_level_01(); }


//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("q_literal_integer", q_ref, q("v.literal.integer"));
    v_add_symbol("q_literal_real",    q_ref, q("v.literal.real"));

    v_add_symbol("int_q",      q_ref, q("int"));
    v_add_symbol("unsigned_q", q_ref, q("unsigned"));
}


//=====================================================================
{   voidc_unit_begin_module("literals_module"); }


//---------------------------------------------------------------------
v_literal_integer_intrinsic: (*void, vis: voidc_visitor_ptr,
                              self: v_ast_base_ptr) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: v_ast_expr_ptr));

    arg0 = v_list_get_item(args, 0);
    arg1 = v_list_get_item(args, 1);

    t_str = v_ast_expr_string_get_string(arg1);         //- Suffix string

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    t: &v_type_ptr := ttag;

    is_reference: &bool := false;

    if (t != INVIOLABLE_TAG  &&  t != UNREFERENCE_TAG  &&  (is_reference := v_type_is_reference(t)))
    {
        t := v_type_refptr_get_element_type(t);         //- Sic!
    }

    if (t_str[0] == 0)      //- Empty suffix
    {
        if (t == INVIOLABLE_TAG  ||  t == UNREFERENCE_TAG)
        {
            t := v_find_type_q(int_q);
        }
    }
    else    //- Suffix determine type (kinda)
    {
        signed = (t_str[0] == 'i'  ||  t_str[0] == 'I');

        if (t_str[1])       //- Got bit width
        {
            width_v = LLVMConstIntOfString(v_type_get_llvm_type(unsigned), t_str+1, 10);

            width = (LLVMConstIntGetZExtValue(width_v) : unsigned);

            if (signed) t := v_int_type(width);
            else        t := v_uint_type(width);
        }
        else
        {
            if (signed) t := v_find_type_q(int_q);
            else        t := v_find_type_q(unsigned_q);
        }
    }

    src: &*const char := v_ast_expr_string_get_string(arg0);        //- Value string (source)

    dst = v_alloca(v_std_string_t);
    v_initialize(dst);
    defer v_terminate(dst);

    if (src[0] == '-')
    {
        ++src;

        v_std_string_set(dst, "-");
    }
    else
    {
        v_std_string_set(dst, "");

        if (src[0] == '+')  ++src;
    }

    radix: &uint(8) := 10;

    if (src[0] == '0')
    {
        switch((src[1] : char32_t))
        {
        case 0: v_break();

        case 'x': case 'X':     radix := 16;  src += 2;   v_break();
        case 'b': case 'B':     radix :=  2;  src += 2;   v_break();

        default:                radix :=  8;  src += 1;   v_break();
        }
    }

    loop
    {
        if (!*src)  v_break();

        if (*src != '\'')   v_std_string_append_char(dst, *src);

        ++src;
    }

    v = LLVMConstIntOfString(v_type_get_llvm_type(t), v_std_string_get(dst), radix);

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(t, v);
}


//---------------------------------------------------------------------
v_literal_real_intrinsic: (*void, vis: voidc_visitor_ptr,
                           self: v_ast_base_ptr) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: v_ast_expr_ptr));

    arg0 = v_list_get_item(args, 0);
    arg1 = v_list_get_item(args, 1);

    t_str = v_ast_expr_string_get_string(arg1);         //- Suffix string

    t: &v_type_ptr := 0;    //- Sic!

    if (t_str[0] == 0)      //- Empty suffix
    {
        t := v_get_result_type();

        if (t == INVIOLABLE_TAG  ||  t == UNREFERENCE_TAG)
        {
            t := v_f64_type();      //- "double"
        }
    }
    else    //- Suffix determine type (kinda)
    {
        if (t_str[1])       //- Got bit width
        {
            width_v = LLVMConstIntOfString(v_type_get_llvm_type(unsigned), t_str+1, 10);

            width = (LLVMConstIntGetZExtValue(width_v) : unsigned);

            switch(width)
            {
            case  16:   t := v_f16_type();  v_break();
            case  32:   t := v_f32_type();  v_break();
            case  64:   t := v_f64_type();  v_break();
            case 128:   t := v_f128_type(); v_break();
            }
        }
        else
        {
            t := v_f32_type();      //- "float"
        }
    }

    src: &*const char := v_ast_expr_string_get_string(arg0);        //- Value string (source)

    dst = v_alloca(v_std_string_t);
    v_initialize(dst);
    defer v_terminate(dst);

    loop
    {
        if (!*src)  v_break();

        if (*src != '\'')   v_std_string_append_char(dst, *src);

        ++src;
    }

    v = LLVMConstRealOfString(v_type_get_llvm_type(t), v_std_string_get(dst));

    v_adopt_result(t, v);
}


//---------------------------------------------------------------------
//- mk_numeric_literal - grammar action
//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
mk_numeric_literal_grammar_action: (ret: v_std_any_ptr, *void, any: v_std_any_ptr, size_t) ~> void
{
//    printf("mk_numeric_literal_grammar_action\n");
//    defer printf("mk_numeric_literal_grammar_action leave\n");

    str0 = v_std_string_get(v_std_any_get_pointer(v_std_string_t, any+0));
    str1 = v_std_string_get(v_std_any_get_pointer(v_std_string_t, any+1));

    qname = v_std_any_get_value(v_quark_t, any+2);

    expr = v_alloca(v_ast_expr_t, 2);
    v_initialize(expr, 2);
    defer v_terminate(expr, 2);

    v_ast_make_expr_string(expr+0, str0);
    v_ast_make_expr_string(expr+1, str1);

    lst = v_alloca(v_ast_expr_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_make_list(lst, expr, 2);

    v_ast_make_expr_identifier_q(expr, qname);

    v_ast_make_expr_call(expr, expr, lst);

    v_std_any_set_pointer(ret, expr);
}


//---------------------------------------------------------------------
//- Enable literals
//---------------------------------------------------------------------
export
voidc_enable_literals_compiler: () ~> void
{
    v_return_if(v_get_intrinsic_q(q_literal_integer, 0));

    v_add_intrinsic_q(q_literal_integer, v_literal_integer_intrinsic, 0);
    v_add_intrinsic_q(q_literal_real,    v_literal_real_intrinsic,    0);
}


//---------------------------------------------------------------------
//- Enable literals
//---------------------------------------------------------------------
export
voidc_enable_literals: () ~> void
{
    voidc_enable_literals_compiler();


    v_return_if_not(voidc_has_grammar());
    v_return_if(voidc_grammar_has_parser("real_literal"));


    any = v_alloca(v_std_any_t, 2);
    v_initialize(any, 2);
    defer v_terminate(any, 2);

    any_integer = any + 0;
    any_real    = any + 1;

    v_std_any_set_value(any_integer, q_literal_integer);
    v_std_any_set_value(any_real,    q_literal_real);


    gr0 = v_alloca(v_peg_grammar_t);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    values:
        q_literal_integer = any_integer;
        q_literal_real    = any_real;

    actions:
        mk_numeric_literal = mk_numeric_literal_grammar_action;

    parsers:
        string += "\"\"\"" <(!"\"\"\"" .)*> "\"\"\"" { $1 };


        integer = '+'? n:dec_natural !(ident_cont / '\'')  { mk_pos_integer(n) }        //- Sic !?!?!
                / '-'  n:dec_natural !(ident_cont / '\'')  { mk_neg_integer(n) }        //- Sic !?!?!
                ;


        big_integer = <[-+]? big_number> <integer_suffix?> !ident_cont  { mk_numeric_literal($1, $2, q_literal_integer) };

        big_number = '0' ([xX] hex_digits / [bB] bin_digits / oct_digits)?
                   / nzdec_digits
                   ;


        hex_digits = hex_digit ('\''? hex_digit)*;

        hex_digit = [0-9a-fA-F];

        dec_digits = dec_digit ('\''? dec_digit)*;

        bin_digits = bin_digit ('\''? bin_digit)*;

        bin_digit = [01];

        oct_digits = oct_digit ('\''? oct_digit)*;

        oct_digit = [0-7];


        integer_suffix = [iIuU] ([1-9] dec_digit*)?;

        nzdec_digits = [1-9] ('\''? dec_digit)*;

        prim =+ big_integer;


        real_literal = <[-+]? real_number> <real_suffix?> !ident_cont   { mk_numeric_literal($1, $2, q_literal_real) };

        real_number = dec_digits? '.' dec_digits dec_exponent?
                    / dec_digits  '.' dec_exponent?
                    / dec_digits dec_exponent
                    / '0' [xX] (hex_digits? '.' hex_digits / hex_digits '.'?) hex_exponent
                    ;

        dec_exponent = [eE] [-+]? dec_digits;

        hex_exponent = [pP] [-+]? dec_digits;

        real_suffix = [fF] dec_digit*;

        prim += real_literal;
    }

    v_peg_set_grammar(gr0);
}


//=====================================================================
{   voidc_unit_end_module(); }


