//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("unions.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");

    v_import("llvm-c/Core.void");
    v_import("llvm-c/Target.void");

    v_import("literals.void");
    v_import("loops_etc.void");
    v_import("aggregates.void");
    v_import("overloading.void");
    v_import("projections.void");
    v_import("structures.void");
    v_import("mangling.void");
    v_import("inlining.void");

    v_import("level-01/handlers.void");      //- WTF?

//  v_import("printf.void");
}

{   v_enable_level_01();

    voidc_enable_literals();
    voidc_enable_loops_etc();
    voidc_enable_aggregates();
    voidc_enable_overloading();
    voidc_enable_projections();
    voidc_enable_structures();
    voidc_enable_mangling();
    voidc_enable_inlining();
}


//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("expr_union_q",      q_ref, q("expr_union"));
    v_add_symbol("unit_union_defn_q", q_ref, q("unit_union_defn"));

    v_add_symbol("type_q",  q_ref, q("type"));
    v_add_symbol("tref_q",  q_ref, q("tref"));
    v_add_symbol("quark_q", q_ref, q("quark"));
    v_add_symbol("qname_q", q_ref, q("qname"));

    v_add_symbol("voidc_decl_stmt_list_q", q_ref, q("voidc.decl_stmt_list"));

    v_add_symbol("voidc_compile_type_q",  q_ref, q("voidc.compile_type"));
    v_add_symbol("voidc_compile_quark_q", q_ref, q("voidc.compile_quark"));

    v_add_symbol("q_export_type",            q_ref, q("v_export_type"));
    v_add_symbol("q_add_type",               q_ref, q("v_add_type"));
    v_add_symbol("q_util_function_dict_set", q_ref, q("v_util_function_dict_set"));
    v_add_symbol("q_export_intrinsic_q",     q_ref, q("v_export_intrinsic_q"));
    v_add_symbol("q_add_intrinsic_q",        q_ref, q("v_add_intrinsic_q"));

    v_add_symbol("voidc_internal_union_cast_intrinsic_q", q_ref, q("voidc_internal_union_cast_intrinsic"));
}


//=====================================================================
{   voidc_unit_begin_module("unions_module"); }


//---------------------------------------------------------------------
//- v_ast_expr_union_t ...
//---------------------------------------------------------------------
export
struct v_ast_expr_union_t
{
    name:   v_ast_expr_t;           //- Name (identifier or string or empty)
    body:   v_ast_stmt_list_t;      //- Alternatives list (or empty)
    export: bool;                   //- Is export
};

//---------------------------------------------------------------------
private
ast_expr_union_init: (void_obj: *void) ~> void
{
    obj = *(void_obj: *v_ast_expr_union_t);

    v_initialize(&obj.name);
    v_initialize(&obj.body);

    obj.export := false;
}

//---------------------------------------------------------------------
private
ast_expr_union_term: (void_obj: *void) ~> void
{
    obj = *(void_obj: *v_ast_expr_union_t);

    v_terminate(&obj.name);
    v_terminate(&obj.body);
}

//---------------------------------------------------------------------
ast_expr_union_vtable: &v_ast_generic_vtable :=
{
    ast_expr_union_init,
    ast_expr_union_term,
};

//---------------------------------------------------------------------
export
v_ast_make_expr_union: (ret: *v_ast_expr_t,
                        name: *v_ast_expr_t,
                        body: *v_ast_stmt_list_t,
                        export: bool
                       ) ~> void
{
    etmp = v_alloca(v_ast_expr_t);
    v_initialize(etmp);
    defer v_terminate(etmp);

    v_ast_make_generic(etmp, &ast_expr_union_vtable, v_ast_expr_union_t.size);

    void_obj = v_ast_generic_get_object((etmp: v_ast_base_ptr));

    obj = *(void_obj: *v_ast_expr_union_t);

    if (name)  v_copy(&obj.name, name);
    if (body)  v_copy(&obj.body, body);

    obj.export := export;

    v_copy(ret, etmp);
}


//---------------------------------------------------------------------
//- Grammar actions ...
//---------------------------------------------------------------------
private
mk_expr_union_grammar_action: (ret: v_std_any_ptr, *void, any: v_std_any_ptr, size_t) ~> void
{
    name   = v_std_any_get_pointer(v_ast_expr_t, any+0);
    body   = v_std_any_get_pointer(v_ast_stmt_list_t, any+1);

    expr = v_alloca(v_ast_expr_t);
    v_initialize(expr);
    defer v_terminate(expr);

    v_ast_make_expr_union(expr, name, body, false);         //- NOT export!

    v_std_any_set_pointer(ret, expr);
}

//---------------------------------------------------------------------
private
mk_unit_union_defn_grammar_action: (ret: v_std_any_ptr, *void, any: v_std_any_ptr, size_t) ~> void
{
    qualif = v_std_any_get_value(intptr_t, any+0);
    expr   = v_std_any_get_pointer(v_ast_expr_t, any+1);

    qf_export  = 1;         //- Sic!
    qf_private = 2;         //- Sic!

    export = (v_get_export_flag()  ||  qualif == qf_export)  &&  (qualif != qf_private);

    if (export)
    {
        void_obj = v_ast_generic_get_object((expr: v_ast_base_ptr));

        obj = *(void_obj: *v_ast_expr_union_t);

        obj.export := true;
    }

    lst = v_alloca(v_ast_generic_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_make_list(lst, unit_union_defn_q, (expr: v_ast_base_ptr), 1);

    v_std_any_set_pointer(ret, (lst: *v_ast_base_t));
}


//---------------------------------------------------------------------
//- Compilation ...
//---------------------------------------------------------------------
export
voidc_internal_union_cast_intrinsic: (aux: *void, vis: *voidc_visitor_t,
                                      self: v_ast_base_ptr,
                                      t0: v_type_ptr, v0: LLVMValueRef
                                     ) ~> void
{
    typ = (aux: *v_type_t);

    v_adopt_result(typ, v0);            //- Sic!
}

//---------------------------------------------------------------------
private
compile_expr_union: (aux: *void, vis: *voidc_visitor_t,
                     self: *v_ast_base_t
                    ) ~> void
{
    void_obj = v_ast_generic_get_object((self: v_ast_expr_ptr));

    obj = *(void_obj: *v_ast_expr_union_t);

    type_name: &*const char := 0;

    type: &v_type_ptr := 0;

    if (!v_empty(&obj.name))
    {
        union_name: &*const char := v_undef();

        tag = v_ast_base_get_visitor_method_tag((&obj.name: v_ast_base_ptr));

        if (tag == v_ast_expr_identifier_visitor_method_tag)
        {
            nm = v_ast_expr_identifier_get_name(&obj.name);

            type_name  := nm;
            union_name := nm;
        }
        else        //- Sic!
        {
            union_name := v_ast_expr_string_get_string(&obj.name);
        }

        sstr = v_alloca(v_std_string_t);
        v_initialize(sstr);
        defer v_terminate(sstr);

        v_std_string_set(sstr, "union.");

        v_std_string_append(sstr+0, union_name);

        type := v_struct_type_named(v_std_string_get(sstr));
    }

    if (type_name)
    {
        if (obj.export)  v_export_type(type_name, type);
        else             v_add_type(type_name, type);
    }

    N: &unsigned := 0;

    hstr = v_alloca(v_std_string_t);
    v_initialize(hstr);
    defer v_terminate(hstr);

    types: &*v_type_ptr := 0;
    defer if (types)  v_free(types);

    if (!v_empty(&obj.body))
    block
    {
        N := (v_list_get_size(&obj.body) : unsigned);

        i8_t = v_int_type(8);

        ts: &v_type_ptr[2] := { v_undef(), v_array_type(i8_t, 0) };

        if (N == 0)
        {
            if (type) v_type_struct_set_body(type, ts+1, 1, false);
            else      type := v_struct_type(ts+1, 1, false);

            v_break();
        }

        types := v_malloc(v_type_ptr, N);

        dl = v_target_get_data_layout();

        max_num:   &int    := 0;
        max_size:  &size_t := 0;
        num_size:  &size_t := 0;
        max_align: &size_t := 0;

        ta: &v_type_ptr[2] := { v_uint_type(1), v_undef() };

        for (i: &int := 0; i < N; ++i)
        {
            stmp = v_list_get_item(&obj.body, i);

            etmp = v_ast_stmt_get_expr(stmp);

            v_set_result_type(INVIOLABLE_TAG);
            v_set_result_value(0);

            v_ast_accept_visitor((etmp : v_ast_base_ptr), vis);

            t_i = (v_get_result_value() : v_type_ptr);

            types[i] := t_i;

            ta[1] := t_i;

            align = LLVMOffsetOfElement(dl, v_type_get_llvm_type(v_struct_type(ta, 2, false)), 1);

            ts[0] := t_i;

            size = LLVMOffsetOfElement(dl, v_type_get_llvm_type(v_struct_type(ts, 2, false)), 1);

            if (max_align < align)
            {
                max_align := align;
                max_num   := i;
                num_size  := size;
            }

            if (max_size < size)  max_size := size;
        }

        ts[0] := types[max_num];
        ts[1] := v_array_type(i8_t, max_size - num_size);

        if (type) v_type_struct_set_body(type, ts, 2, false);
        else      type := v_struct_type(ts, 2, false);

        v_std_string_set(hstr, "voidc.internal.union_cast.");

        voidc_internal_std_string_append_type(hstr, type);

        v_std_string_append(hstr, ".");

        shdr = v_std_string_get(hstr);

        tref = v_reference_type(type, 0);

        sstr = v_alloca(v_std_string_t, 2);
        v_initialize(sstr, 2);
        defer v_terminate(sstr, 2);

        for (i: &int := 0; i < N; ++i)
        {
            stmp = v_list_get_item(&obj.body, i);

            field = v_ast_stmt_get_name(stmp);

            v_std_string_set(sstr+0, ".");

            v_std_string_append(sstr+0, field);

            quark = v_quark_from_string(v_std_string_get(sstr+0));

            v_std_string_set(sstr+1, shdr);

            v_std_string_append(sstr+1, field);

            intrinsic = v_std_string_get(sstr+1);

            intrinsic_q = v_quark_from_string(intrinsic);

            v_util_function_dict_set(quark, tref, intrinsic_q);

            tri = v_reference_type(types[i], 0);

            if (obj.export)  v_export_intrinsic_q(intrinsic_q, voidc_internal_union_cast_intrinsic, tri);
            else             v_add_intrinsic_q   (intrinsic_q, voidc_internal_union_cast_intrinsic, tri);
        }
    }

    v_set_result_type(v_static_type_t);
    v_set_result_value((type: LLVMValueRef));


    //-----------------------------------------------------------------
    stmt_list = voidc_definitions_context_get_stmt_list();

    if (!stmt_list)  v_return();


    expr = v_alloca(v_ast_expr_t, 3);
    v_initialize(expr, 3);
    defer v_terminate(expr, 3);

    elst = v_alloca(v_ast_expr_list_t);
    v_initialize(elst);
    defer v_terminate(elst);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);
    defer v_terminate(stmt);


    v_ast_make_expr_integer(expr+0, (type: intptr_t));          //- Sic!!!

    v_ast_make_stmt_call(stmt, type_q, voidc_compile_type_q, expr+0, 1);

    v_list_append(stmt_list, stmt_list, stmt);


    if (type_name)
    {
        v_ast_make_expr_string(expr+0, type_name);

        v_ast_make_expr_identifier_q(expr+1, type_q);

        if (obj.export)  v_ast_make_stmt_call(stmt, 0, q_export_type, expr, 2);
        else             v_ast_make_stmt_call(stmt, 0, q_add_type,    expr, 2);

        v_list_append(stmt_list, stmt_list, stmt);
    }


    if (N == 0)  v_return();

    shdr = v_std_string_get(hstr);

    tref = v_reference_type(type, 0);

    v_ast_make_expr_integer(expr+0, (tref: intptr_t));          //- Sic!!!

    v_ast_make_stmt_call(stmt, tref_q, voidc_compile_type_q, expr+0, 1);

    v_list_append(stmt_list, stmt_list, stmt);


    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);
    defer v_terminate(sstr);

    for (i: &int := 0; i < N; ++i)
    {
        stmp = v_list_get_item(&obj.body, i);

        field = v_ast_stmt_get_name(stmp);

        v_std_string_set(sstr, ".");

        v_std_string_append(sstr, field);

        v_ast_make_expr_integer(expr+0, v_quark_from_string(v_std_string_get(sstr)));

        v_ast_make_stmt_call(stmt, quark_q, voidc_compile_quark_q, expr+0, 1);

        v_list_append(stmt_list, stmt_list, stmt);


        v_std_string_set(sstr, shdr);       //- kinda "voidc.internal.union_cast." ...

        v_std_string_append(sstr, field);

        v_ast_make_expr_integer(expr+2, v_quark_from_string(v_std_string_get(sstr)));

        v_ast_make_stmt_call(stmt, qname_q, voidc_compile_quark_q, expr+2, 1);

        v_list_append(stmt_list, stmt_list, stmt);


        v_ast_make_expr_identifier_q(expr+0, quark_q);
        v_ast_make_expr_identifier_q(expr+1, tref_q);
        v_ast_make_expr_identifier_q(expr+2, qname_q);

        v_ast_make_stmt_call(stmt, 0, q_util_function_dict_set, expr+0, 3);

        v_list_append(stmt_list, stmt_list, stmt);


        v_copy(expr+0, expr+2);             //- kinda  "voidc.internal.union_cast." ...


        tri = v_reference_type(types[i], 0);

        v_ast_make_expr_integer(expr+1, (tri: intptr_t));       //- Sic!!!

        v_make_list(elst, expr+1, 1);

        v_ast_make_expr_identifier_q(expr+1, voidc_compile_type_q);

        v_ast_make_expr_call(expr+2, expr+1, elst);


        v_ast_make_expr_identifier_q(expr+1, voidc_internal_union_cast_intrinsic_q);

        if (obj.export)  v_ast_make_stmt_call(stmt, 0, q_export_intrinsic_q, expr+0, 3);
        else             v_ast_make_stmt_call(stmt, 0, q_add_intrinsic_q,    expr+0, 3);

        v_list_append(stmt_list, stmt_list, stmt);
    }
}

//---------------------------------------------------------------------
private
compile_unit_union_defn: (aux: *void, vis: *voidc_visitor_t,
                          self: *v_ast_base_t
                         ) ~> void
{
    list = (self: *v_ast_generic_list_t);

    ast = v_list_get_item(list, 0);

    v_ast_accept_visitor(ast, vis);
}


//---------------------------------------------------------------------
//- Enable unions
//---------------------------------------------------------------------
export
voidc_enable_unions_compiler: () ~> void
{
    vis = v_get_compiler();

    v_return_if(voidc_visitor_get_void_method(vis, expr_union_q, 0));

    voidc_visitor_set_void_method(vis, vis, expr_union_q,      compile_expr_union,      0);
    voidc_visitor_set_void_method(vis, vis, unit_union_defn_q, compile_unit_union_defn, 0);
}

//---------------------------------------------------------------------
//- Enable unions
//---------------------------------------------------------------------
export
voidc_enable_unions: () ~> void
{
    voidc_enable_unions_compiler();

    v_return_if_not(voidc_has_grammar());
    v_return_if(voidc_grammar_has_parser("expr_union"));

    gr0 = v_alloca(v_peg_grammar_t);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    actions:
        mk_expr_union = mk_expr_union_grammar_action;

        mk_unit_union_defn = mk_unit_union_defn_grammar_action;

    parsers:
        expr_union = "union" !ident_cont _ n:struct_name? _ b:struct_body?   { mk_expr_union(n, b) }
                   ;


        prim += expr_union;


        unit_union_defn = q:qualif_flags _ e:expr_union _';'   { mk_unit_union_defn(q, e) }
                        ;

        unit_defn += unit_union_defn;
    }

    v_peg_set_grammar(gr0);
}


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   ast_expr_union_vtable[2] := expr_union_q;
}


