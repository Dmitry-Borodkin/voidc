//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("mangling.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");

    v_import("llvm-c/Core.void");

    v_import("literals.void");
    v_import("loops_etc.void");
    v_import("condcomp.void");
    v_import("aggregates.void");
    v_import("handlers_etc.void");
    v_import("overloading.void");
    v_import("projections.void");
    v_import("structures.void");

    v_import("compression.void");

//  v_import("printf.void");
}

{   v_enable_level_01();

    voidc_enable_literals();
    voidc_enable_loops_etc();
    voidc_enable_condcomp();
    voidc_enable_aggregates();
    voidc_enable_handlers_etc();
    voidc_enable_overloading();
    voidc_enable_projections();
    voidc_enable_structures();
}


//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("q_quark", q_ref, q("v.quark"));
    v_add_symbol("qname_q", q_ref, q("qname"));

    v_add_symbol("q_export_overload_q", q_ref, q("v_export_overload_q"));

    v_add_symbol("q_internal_spec_fun_decl", q_ref, q("v.internal.spec_fun_decl"));
    v_add_symbol("q_internal_spec_fun_renm", q_ref, q("v.internal.spec_fun_renm"));

    v_add_symbol("voidc_compile_type_q",  q_ref, q("voidc.compile_type"));
    v_add_symbol("voidc_compile_quark_q", q_ref, q("voidc.compile_quark"));

    //-----------------------------------------------------------------
    v_add_symbol("q_initialize", q_ref, q("v_initialize"));

    v_add_symbol("q_static_type_t", q_ref, q("v_static_type_t"));
}


//=====================================================================
{   voidc_unit_begin_module("mangling_module"); }


//---------------------------------------------------------------------
private
struct v_trp_dict_t
{
    map:  v_util_map_t;
    next: intptr_t;
};

//---------------------------------------------------------------------
private
dict_init: (dict: &v_trp_dict_t) ~> void
{
    v_initialize(&dict.map);
    v_make_map(&dict.map);

    dict.next := 0;
}

private
dict_term: (dict: &v_trp_dict_t) ~> void
{
    v_terminate(&dict.map);
}


//---------------------------------------------------------------------
private
dict_find: (dict: &v_trp_dict_t, key: *void) ~> intptr_t
{
    a = v_map_find(&dict.map, (key: intptr_t));

    if (!a) v_return(-1);

    v = v_std_any_get_value(intptr_t, a);

    v_return(v);
}

//---------------------------------------------------------------------
private
dict_insert: (dict: &v_trp_dict_t, key: *void) ~> void
{
    a = v_alloca(v_std_any_t);
    v_initialize(a);
    defer v_terminate(a);

    v_std_any_set_value(a, dict.next++);

    v_map_insert(&dict.map, &dict.map, (key: intptr_t), a);
}


//---------------------------------------------------------------------
private
append_string_repr: (str: *v_std_string_t, s: *const char, l: size_t) ~> void
{
    s: &*const char := s;

    v_std_string_append(str, "\"");

    buf: &char[2] := 0;

    for (i: &int := 0; i < l; ++i)
    {
        c = *s++;

        switch((c: char32_t))
        {
        case   0 :  v_std_string_append(str, "\\0");  v_break();    //- Sic!
        case '\n':  v_std_string_append(str, "\\n");  v_break();
        case '\r':  v_std_string_append(str, "\\r");  v_break();
        case '\t':  v_std_string_append(str, "\\t");  v_break();
        case '\'':  v_std_string_append(str, "\\\'"); v_break();
        case '\"':  v_std_string_append(str, "\\\""); v_break();
        case '\\':  v_std_string_append(str, "\\\\"); v_break();

        default:

           buf[0] := c;

           v_std_string_append(str, buf);

           v_break();
        }
    }

    v_std_string_append(str, "\"");
}


//---------------------------------------------------------------------
private append_type:             (str: *v_std_string_t, dict: &v_trp_dict_t, t: *v_type_t)             ~> void;
private append_quark:            (str: *v_std_string_t, dict: &v_trp_dict_t, q: v_quark_t)             ~> void;
private append_type_generic_arg: (str: *v_std_string_t, dict: &v_trp_dict_t, a: *v_type_generic_arg_t) ~> void;

//---------------------------------------------------------------------
private
append_type: (str: *v_std_string_t, dict: &v_trp_dict_t, t: *v_type_t) ~> void
{
    if (idx = dict_find(dict, t), idx >= 0)
    {
        v_std_string_append_number(str, idx);

        v_return();
    }

    flag: &bool := false;

    switch(v_kind(t))
    {
    case v_type_kind_void:  v_std_string_append(str, "void");       v_break();
    case v_type_kind_f16:   v_std_string_append(str, "float(16)");  v_break();
    case v_type_kind_f32:   v_std_string_append(str, "float(32)");  v_break();
    case v_type_kind_f64:   v_std_string_append(str, "float(64)");  v_break();
    case v_type_kind_f128:  v_std_string_append(str, "float(128)"); v_break();

    case v_type_kind_int:

        flag := true;

        //- Fallthrough!

    case v_type_kind_uint:

        if (flag)  v_std_string_append(str, "int(");
        else       v_std_string_append(str, "uint(");

        v_std_string_append_number(str, v_type_integer_get_width(t));

        v_std_string_append(str, ")");

        v_break();

    case v_type_kind_function:

        v_std_string_append(str, "((");

        pc = v_type_function_get_param_count(t);
        pt = v_type_function_get_param_types(t);

        for (i: &int := 0; i < pc; ++i)
        {
            if (i)  v_std_string_append(str, ", ");

            append_type(str, dict, pt[i]);
        }

        if (v_type_function_is_var_arg(t))
        {
            if (pc)  v_std_string_append(str, ", ");

            v_std_string_append(str, "...");
        }

        v_std_string_append(str, ") ~> ");

        append_type(str, dict, v_type_function_get_return_type(t));

        v_std_string_append(str, ")");

        v_break();

    case v_type_kind_pointer:

        flag := true;

        //- Fallthrough!

    case v_type_kind_reference:

        et = v_type_refptr_get_element_type(t);
        as = v_type_refptr_get_address_space(t);

        if (as == 0)
        {
            if (flag) v_std_string_append(str, "*");
            else      v_std_string_append(str, "&");

            append_type(str, dict, et);
        }
        else
        {
            if (flag) v_std_string_append(str, "v_ptr(");       //- Sic!
            else      v_std_string_append(str, "v_ref(");       //- Sic!

            append_type(str, dict, et);

            v_std_string_append(str, ", ");

            v_std_string_append_number(str, as);

            v_std_string_append(str, ")");
        }

        v_break();

    case v_type_kind_struct:

        v_std_string_append(str, "v_struct(");

        if (q = v_type_struct_get_name_q(t))
        {
            append_quark(str, dict, q);

            flag := true;
        }

        if (!flag  &&  !v_type_struct_is_opaque(t))
        {
            if (v_type_struct_is_packed(t))
            {
                v_std_string_append(str, "packed, ");
            }

            v_std_string_append(str, "{");

            ec = v_type_struct_get_element_count(t);
            et = v_type_struct_get_element_types(t);

            for (i: &int := 0; i < ec; ++i)
            {
                if (i)  v_std_string_append(str, ", ");

                append_type(str, dict, et[i]);
            }

            v_std_string_append(str, "}");
        }

        v_std_string_append(str, ")");

        v_break();

    case v_type_kind_array:

        v_std_string_append(str, "(");

        append_type(str, dict, v_type_array_get_element_type(t));

        v_std_string_append(str, ")[");

        v_std_string_append_number(str, v_type_array_get_length(t));

        v_std_string_append(str, "]");

        v_break();

    case v_type_kind_vector:

        flag := true;

        //- Fallthrough!

    case v_type_kind_svector:

        if (flag) v_std_string_append(str, "vec(");
        else      v_std_string_append(str, "svec(");

        append_type(str, dict, v_type_vector_get_element_type(t));

        v_std_string_append(str, ", ");

        v_std_string_append_number(str, v_type_vector_get_size(t));

        v_std_string_append(str, ")");

        v_break();

    case v_type_kind_generic:

        v_std_string_append(str, "v_generic(");

        append_quark(str, dict, v_type_generic_get_cons(t));

        if (n = v_type_generic_get_arg_count(t))
        {
            args = v_type_generic_get_args(t);

            for (i: &int := 0; i < n; ++i)
            {
                v_std_string_append(str, ", ");

                append_type_generic_arg(str, dict, args[i]);
            }
        }

        v_std_string_append(str, ")");

        v_break();
    }

    dict_insert(dict, t);
}

//---------------------------------------------------------------------
private
append_quark: (str: *v_std_string_t, dict: &v_trp_dict_t, q: v_quark_t) ~> void
{
    qstr = v_quark_to_string(q);                //- Sic!

    if (idx = dict_find(dict, qstr), idx >= 0)
    {
        v_std_string_append_number(str, idx);

        v_return();
    }

    append_string_repr(str, qstr, v_quark_to_string_size(q));

    dict_insert(dict, qstr);
}

//---------------------------------------------------------------------
private
append_type_generic_arg: (str: *v_std_string_t, dict: &v_trp_dict_t, a: *v_type_generic_arg_t) ~> void
{
    if (idx = dict_find(dict, a), idx >= 0)
    {
        v_std_string_append_number(str, idx);

        v_return();
    }

    switch(v_kind(a))
    {
    case v_type_generic_arg_kind_number:

        v_std_string_append(str, "N(");

        v_std_string_append_number(str, v_type_generic_arg_number_get_number(a));

        v_std_string_append(str, ")");

        v_break();

    case v_type_generic_arg_kind_string:

        v_std_string_append(str, "S(");

        sstr = v_type_generic_arg_string_get_string(a);

        append_string_repr(str, v_std_string_get(sstr), v_std_string_get_size(sstr));

        v_std_string_append(str, ")");

        v_break();

    case v_type_generic_arg_kind_quark:

        v_std_string_append(str, "Q(");

        append_quark(str, dict, v_type_generic_arg_quark_get_quark(a));

        v_std_string_append(str, ")");

        v_break();

    case v_type_generic_arg_kind_type:

        v_std_string_append(str, "T(");

        append_type(str, dict, v_type_generic_arg_type_get_type(a));

        v_std_string_append(str, ")");

        v_break();

    case v_type_generic_arg_kind_cons:

        v_std_string_append(str, "C(");

        append_quark(str, dict, v_type_generic_arg_cons_get_cons(a));

        if (n = v_type_generic_arg_cons_get_arg_count(a))
        {
            args = v_type_generic_arg_cons_get_args(a);

            for (i: &int := 0; i < n; ++i)
            {
                v_std_string_append(str, ", ");

                append_type_generic_arg(str, dict, args[i]);
            }
        }

        v_std_string_append(str, ")");

        v_break();
    }

    dict_insert(dict, a);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
OUTBUFSIZE = 8*16;      //- ?...

//---------------------------------------------------------------------
private
encode_base62: (ctx: &v_myz_ctx_t) ~> bool
{
    sstr = (ctx.aux_out: *v_std_string_t);

    n = OUTBUFSIZE - ctx.avail_out;

    buf = ctx.next_out - n;

    b64: &uint64_t := 0;

    str: &char[12] := v_undef();

    for (i: &int := 0; i < n; ++i)
    {
        i8 = i % 8;

        b64 |= (buf[i]: uint64_t) << i8*8;

        if (i8 == 7  ||  i == n-1)
        {
            j: &int := 0;

            for (; j < 11; ++j)
            {
                if (b64 == 0  &&  i == n-1)  v_break();

                d = b64 % 62;

                D: &char32_t := v_undef();

                if (d < 10)       D := '0';
                else if (d < 36)  D := 'A' - 10;
                else              D := 'a' - 36;

                str[j] := (D + d : char);

                b64 /= 62;
            }

            str[j] := 0;

            v_std_string_append(sstr, str);
        }
    }

    ctx.next_out  := buf;
    ctx.avail_out := OUTBUFSIZE;

    v_return(true);
}


//---------------------------------------------------------------------
export
voidc_internal_std_string_append_type: (sstr: *v_std_string_t, t: *v_type_t) ~> void
{
    dict: &v_trp_dict_t := v_undef();
    dict_init(dict);
    defer dict_term(dict);

    append_type(sstr, dict, t);
}

//---------------------------------------------------------------------
export
voidc_internal_std_string_append_quark: (sstr: *v_std_string_t, q: v_quark_t) ~> void
{
    dict: &v_trp_dict_t := v_undef();
    dict_init(dict);
    defer dict_term(dict);

    append_quark(sstr, dict, q);
}

//---------------------------------------------------------------------
export
voidc_internal_std_string_append_type_generic_arg: (sstr: *v_std_string_t, a: *v_type_generic_arg_t) ~> void
{
    dict: &v_trp_dict_t := v_undef();
    dict_init(dict);
    defer dict_term(dict);

    append_type_generic_arg(sstr, dict, a);
}

//---------------------------------------------------------------------
export
voidc_internal_std_string_append_mangle: (dst: *v_std_string_t, src: *const v_std_string_t) ~> void
{
    ctx: &v_myz_ctx_t := 0;

    ctx.next_in  := (v_std_string_get(src) : *const uint(8));
    ctx.avail_in := v_std_string_get_size(src);

    buf: &uint(8)[OUTBUFSIZE] := v_undef();

    ctx.next_out  := buf;
    ctx.avail_out := OUTBUFSIZE;

    ctx.check_out := encode_base62;
    ctx.aux_out   := dst;

    v_myz_encode(ctx);

//printf("%s <= %s\n", v_std_string_get(dst), v_std_string_get(src));
}


//---------------------------------------------------------------------
private
append_mangle: (sstr: *v_std_string_t, q: v_quark_t, t: *v_type_t) ~> void
{
    stmp = v_alloca(v_std_string_t);
    v_initialize(stmp);
    defer v_terminate(stmp);

    append_string_repr(stmp, v_quark_to_string(q), v_quark_to_string_size(q));

    v_std_string_append(stmp, ", ");

    voidc_internal_std_string_append_type(stmp, t);

//printf("%s\n", v_std_string_get(stmp));

    voidc_internal_std_string_append_mangle(sstr, stmp);
}


//=====================================================================
{
    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("q_op_postfix_dot",     q_ref, q("v.op_postfix_dot"));
    v_add_symbol("q_op_postfix_tildeto", q_ref, q("v.op_postfix_tildeto"));

    v_add_symbol("unit_spec_fun_defn_q", q_ref, q("unit_spec_fun_defn"));
    v_add_symbol("unit_spec_fun_renm_q", q_ref, q("unit_spec_fun_renm"));

    v_add_symbol("voidc_decl_stmt_list_q", q_ref, q("voidc.decl_stmt_list"));
}


//---------------------------------------------------------------------
private
mk_spec_ident_infix_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    op = v_std_any_get_pointer(v_ast_expr_t, any);

    void_obj = v_ast_generic_get_object(op);

    obj = *(void_obj: *v_ast_operator_binary_t);

    quark = obj[0];

    expr = v_alloca(v_ast_expr_t);
    v_initialize(expr);
    defer v_terminate(expr);

    v_ast_make_expr_identifier_q(expr, quark);

    v_std_any_set_pointer(ret, expr);
}

//---------------------------------------------------------------------
private
mk_spec_ident_infix_right_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    op = v_std_any_get_pointer(v_ast_expr_t, any);

    void_obj = v_ast_generic_get_object(op);

    obj = *(void_obj: *v_ast_operator_binary_t);

    quark = obj[0];

    name = v_quark_to_string(quark);

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);
    defer v_terminate(sstr);

    v_std_string_set(sstr, name);

    v_std_string_append(sstr, ".right");

    expr = v_alloca(v_ast_expr_t);
    v_initialize(expr);
    defer v_terminate(expr);

    v_ast_make_expr_identifier(expr, v_std_string_get(sstr));

    v_std_any_set_pointer(ret, expr);
}

//---------------------------------------------------------------------
private
mk_spec_ident_postfix_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    op = v_std_any_get_pointer(v_ast_expr_t, any);

    void_obj = v_ast_generic_get_object(op);

    obj = *(void_obj: *v_ast_operator_unary_t);

    quark = obj[0];

    expr = v_alloca(v_ast_expr_t);
    v_initialize(expr);
    defer v_terminate(expr);

//printf("mk_spec_ident_postfix_grammar_action: %s\n", v_quark_to_string(quark));

    if (quark != q_op_postfix_dot)
    {
        v_ast_make_expr_identifier_q(expr, quark);

        v_std_any_set_pointer(ret, expr);

        v_return();
    }

    pay = (&obj[2] : *v_ast_generic_list_t);

    etmp = (v_list_get_item(pay, 0) : *v_ast_expr_t);

    name = v_ast_expr_identifier_get_name(etmp);

    got_args = v_list_get_size(pay) > 1;

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);
    defer v_terminate(sstr);

    v_std_string_set(sstr, ".");

    v_std_string_append(sstr, name);

    if (got_args)  v_std_string_append(sstr, "()");

    v_ast_make_expr_identifier(expr, v_std_string_get(sstr));

    v_std_any_set_pointer(ret, expr);
}

//---------------------------------------------------------------------
private
mk_spec_ident_prefix_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    op = v_std_any_get_pointer(v_ast_expr_t, any);

    void_obj = v_ast_generic_get_object(op);

    obj = *(void_obj: *v_ast_operator_unary_t);

    quark = obj[0];

    expr = v_alloca(v_ast_expr_t);
    v_initialize(expr);
    defer v_terminate(expr);

    v_ast_make_expr_identifier_q(expr, quark);

    v_std_any_set_pointer(ret, expr);
}


//---------------------------------------------------------------------
private
mk_qlf_spec_ident_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    qualif = v_std_any_get_value(intptr_t, any+0);

    qexpr  = v_std_any_get_pointer(v_ast_expr_t, any+1);

    ast = v_alloca(v_ast_base_t);
    v_initialize(ast);
    defer v_terminate(ast);

    v_ast_make_expr_integer((ast : *v_ast_expr_t), qualif);

    lst = v_alloca(v_ast_generic_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_make_list(lst, unit_spec_fun_defn_q, ast);

    v_list_append(lst, lst, (qexpr: *v_ast_base_t));

    v_std_any_set_pointer(ret, lst);
}

//---------------------------------------------------------------------
private
mk_unit_spec_fun_defn_hdr_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    q_si = v_std_any_get_pointer(v_ast_generic_list_t, any+0);

    args = v_std_any_get_pointer(v_ast_expr_t, any+1);
    type = v_std_any_get_pointer(v_ast_expr_t, any+2);

    lst = v_alloca(v_ast_generic_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_list_append(lst, q_si, (args: *v_ast_base_t));
    v_list_append(lst, lst,  (type: *v_ast_base_t));

    v_std_any_set_pointer(ret, lst);
}

//---------------------------------------------------------------------
private
mk_unit_spec_fun_renm_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    qexpr = v_std_any_get_pointer(v_ast_expr_t,   any+0);
    fname = v_std_any_get_pointer(v_std_string_t, any+1);

    ast = v_alloca(v_ast_base_t);
    v_initialize(ast);
    defer v_terminate(ast);

    v_ast_make_expr_identifier((ast: *v_ast_expr_t), v_std_string_get(fname));

    lst = v_alloca(v_ast_generic_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_make_list(lst, unit_spec_fun_renm_q, (qexpr: *v_ast_base_t));

    v_list_append(lst, lst, ast);

    v_std_any_set_pointer(ret, (lst: *v_ast_base_t));
}

//---------------------------------------------------------------------
private
mk_stmt_spec_fun_decl_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    qexpr = v_std_any_get_pointer(v_ast_expr_t, any+0);
    args  = v_std_any_get_pointer(v_ast_expr_t, any+1);
    type  = v_std_any_get_pointer(v_ast_expr_t, any+2);

    lst = v_alloca(v_ast_expr_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_make_list(lst, qexpr);

    v_list_append(lst, lst, args);
    v_list_append(lst, lst, type);

    etmp = v_alloca(v_ast_expr_t);
    v_initialize(etmp);
    defer v_terminate(etmp);

    v_ast_make_expr_identifier_q(etmp, q_internal_spec_fun_decl);

    v_ast_make_expr_call(etmp, etmp, lst);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);
    defer v_terminate(stmt);

    v_ast_make_stmt_q(stmt, 0, etmp);

    v_std_any_set_pointer(ret, stmt);
}

//---------------------------------------------------------------------
private
mk_stmt_spec_fun_renm_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    qexpr = v_std_any_get_pointer(v_ast_expr_t, any+0);
    expr  = v_std_any_get_pointer(v_ast_expr_t, any+1);

    lst = v_alloca(v_ast_expr_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_make_list(lst, qexpr);

    v_list_append(lst, lst, expr);

    etmp = v_alloca(v_ast_expr_t);
    v_initialize(etmp);
    defer v_terminate(etmp);

    v_ast_make_expr_identifier_q(etmp, q_internal_spec_fun_renm);

    v_ast_make_expr_call(etmp, etmp, lst);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);
    defer v_terminate(stmt);

    v_ast_make_stmt_q(stmt, 0, etmp);

    v_std_any_set_pointer(ret, stmt);
}


//---------------------------------------------------------------------
private
type_is_initializable: (t: *v_type_t) ~> bool
{
    switch(v_kind(t))
    {
    case v_type_kind_array:
        v_return(type_is_initializable(v_type_array_get_element_type(t)));

    case v_type_kind_struct:
    case v_type_kind_generic:
        v_break();

    default:
        v_return(false);        //- Sic!!!
    }

    v_return(v_get_overload_q(q_initialize, t) != 0);
}


//---------------------------------------------------------------------
private
register_special_function_name: (unit: bool, fn: *const char, q: v_quark_t, t: *v_type_t) ~> void
{
    qname = v_quark_from_string(fn);

    v_export_overload_q(q, t, qname);

    //-------------------------------------------------------------
    stmt_list: &*v_ast_stmt_list_t := 0;

    if (unit) stmt_list := voidc_definitions_context_get_stmt_list();

    expr = v_alloca(v_ast_expr_t, 3);
    elst = v_alloca(v_ast_expr_list_t);
    stmt = v_alloca(v_ast_stmt_t);

    if (stmt_list)
    {
        v_initialize(expr, 3);
        v_initialize(elst);
        v_initialize(stmt);

        v_ast_make_expr_integer(expr+0, q);

        v_ast_make_stmt_call(stmt, q_quark, voidc_compile_quark_q, expr, 1);

        v_list_append(stmt_list, stmt_list, stmt);

        v_ast_make_expr_identifier_q(expr+0, q_quark);

        v_ast_make_expr_integer(expr+1, (t: intptr_t));         //- Sic!!!

        v_make_list(elst, expr+1, 1);

        v_ast_make_expr_identifier_q(expr+1, voidc_compile_type_q);

        v_ast_make_expr_call(expr+1, expr+1, elst);

        v_ast_make_expr_integer(expr+2, qname);

        v_ast_make_stmt_call(stmt, qname_q, voidc_compile_quark_q, expr+2, 1);

        v_list_append(stmt_list, stmt_list, stmt);

        v_ast_make_expr_identifier_q(expr+2, qname_q);

        v_ast_make_stmt_call(stmt, 0, q_export_overload_q, expr, 3);

        v_list_append(stmt_list, stmt_list, stmt);
    }

    //-------------------------------------------------------------
    block                               //- TODO !!!!!!!!!!!!!!!!!!
    {
        rt: &*v_type_t := v_undef();

        if (v_type_is_reference(t))
        {
            et = v_type_refptr_get_element_type(t);

            if (v_type_is_struct(et)  &&  v_type_struct_is_opaque(et))  v_break();      //- !?!?!?!?!?!

            if (type_is_initializable(et))  v_break();

            if (v_get_overload_q(q, et))  v_break();

            rt := et;
        }
        else
        {
            if (!v_type_get_llvm_type(t))   v_break();      //- ???

            rt := v_reference_type(t, 0);           //- "const ..." ?!?!?!?
        }

        v_export_overload_q(q, rt, qname);

        if (stmt_list)
        {
            v_ast_make_expr_integer(expr+1, (rt: intptr_t));        //- Sic!!!

            v_make_list(elst, expr+1, 1);

            v_ast_make_expr_identifier_q(expr+1, voidc_compile_type_q);

            v_ast_make_expr_call(expr+1, expr+1, elst);

            v_ast_make_stmt_call(stmt, 0, q_export_overload_q, expr, 3);

            v_list_append(stmt_list, stmt_list, stmt);
        }
    }

    if (stmt_list)
    {
        v_terminate(stmt);
        v_terminate(elst);
        v_terminate(expr, 3);
    }
}

//---------------------------------------------------------------------
private
compute_key_quark_type: (aux: *void,
                         ft: *v_type_t, q: &v_quark_t
                        ) ~> *v_type_t
{
//printf("compute_key_quark_type: start\n");
//defer printf("compute_key_quark_type: stop\n");

    types = v_type_function_get_param_types(ft);

    str = v_quark_to_string(q);
    ssz = v_quark_to_string_size(q);

    strcmp: (*const char, *const char) ~> int;

    if (strcmp(str+ssz-6, ".right") == 0)   v_return(types[1]);
    else                                    v_return(types[0]);
}

//---------------------------------------------------------------------
#do (v_make_handler(v_compute_key_quark_type, compute_key_quark_type))


//---------------------------------------------------------------------
private
register_mangled_function_name: (unit: bool,
                                 sstr: *v_std_string_t, q: &v_quark_t, ft: *v_type_t) ~> void
{
    t = v_compute_key_quark_type(ft, q);

    v_std_string_set(sstr, "v__");

    append_mangle(sstr, q, t);

    fun_name = v_std_string_get(sstr);

    register_special_function_name(unit, fun_name, q, t);
}

//---------------------------------------------------------------------
private
compile_unit_spec_fun_defn: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("compile_unit_spec_fun_defn: start\n");
//defer printf("compile_unit_spec_fun_defn: stop\n");

    list = (self: *v_ast_generic_list_t);

    ast0 = v_list_get_item(list, 0);
    ast1 = v_list_get_item(list, 1);

    //-------------------------------------------------------------
    qualif = v_ast_expr_integer_get_number((ast0: *v_ast_expr_t));
    quark  = v_ast_expr_identifier_get_name_q((ast1: *v_ast_expr_t));

    params   = v_list_get_item(list, 2);
    ret_type = v_list_get_item(list, 3);
    body     = v_list_get_item(list, 4);

    //-------------------------------------------------------------
    args = v_ast_expr_call_get_arg_list((params: *v_ast_expr_t));

    args = (v_list_get_item(args, 1) : *v_ast_generic_list_t);

    //-------------------------------------------------------------
    {   expr = v_alloca(v_ast_expr_t);
        v_initialize(expr);
        defer v_terminate(expr);

        v_ast_make_expr_op_binary(expr, v_op_infix_tildeto, (params: *v_ast_expr_t), (ret_type: *v_ast_expr_t));

        v_set_result_type(v_find_type_q(q_static_type_t));
        v_set_result_value(0);

        v_ast_accept_visitor((expr: *v_ast_base_t), vis);
    }

    fun_type = (v_get_result_value() : *v_type_t);

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);
    defer v_terminate(sstr);

    register_mangled_function_name(true, sstr, quark, fun_type);

    fun_name = v_std_string_get(sstr);

//printf("%s\n", fun_name);

    voidc_compile_unit_fun_defn_helper(vis, qualif, fun_name, fun_type, args, body);
}

//---------------------------------------------------------------------
private
compile_unit_spec_fun_renm: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("compile_unit_spec_fun_renm: start\n");
//defer printf("compile_unit_spec_fun_renm: stop\n");

    list = (self: *v_ast_generic_list_t);

    ast0 = v_list_get_item(list, 0);
    ast1 = v_list_get_item(list, 1);

    //-------------------------------------------------------------
    q = v_ast_expr_identifier_get_name_q((ast0: *v_ast_expr_t));

    fun_name = v_ast_expr_identifier_get_name((ast1: *v_ast_expr_t));

    //-------------------------------------------------------------
    raw_name = v_lookup_alias(fun_name);

    //-------------------------------------------------------------
    ft: &*v_type_t := v_find_symbol_type(raw_name);

    if (v_type_is_pointer(ft))  ft := v_type_refptr_get_element_type(ft);

    q: &v_quark_t := q;

    t = v_compute_key_quark_type(ft, q);

    register_special_function_name(true, raw_name, q, t);
}


//---------------------------------------------------------------------
private
v_internal_spec_fun_decl_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    call = (self: *v_ast_expr_t);

    arg_list = v_ast_expr_call_get_arg_list(call);

    arg0 = v_list_get_item(arg_list, 0);

    //-------------------------------------------------------------
    quark = v_ast_expr_identifier_get_name_q(arg0);

    params   = v_list_get_item(arg_list, 1);
    ret_type = v_list_get_item(arg_list, 2);

    //-------------------------------------------------------------
    {   expr = v_alloca(v_ast_expr_t);
        v_initialize(expr);
        defer v_terminate(expr);

        v_ast_make_expr_op_binary(expr, v_op_infix_tildeto, (params: *v_ast_expr_t), (ret_type: *v_ast_expr_t));

        v_set_result_type(v_find_type_q(q_static_type_t));
        v_set_result_value(0);

        v_ast_accept_visitor((expr: *v_ast_base_t), vis);
    }

    fun_type = (v_get_result_value() : *v_type_t);

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);
    defer v_terminate(sstr);

    register_mangled_function_name(false, sstr, quark, fun_type);

    fun_name = v_std_string_get(sstr);

//printf("%s\n", fun_name);

    v_add_symbol(fun_name, fun_type, 0);
}

//---------------------------------------------------------------------
private
v_internal_spec_fun_renm_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("v_internal_spec_fun_renm_intrinsic: start\n");
//defer printf("v_internal_spec_fun_renm_intrinsic: stop\n");

    call = (self: *v_ast_expr_t);

    arg_list = v_ast_expr_call_get_arg_list(call);

    arg0 = v_list_get_item(arg_list, 0);

    //-------------------------------------------------------------
    quark = v_ast_expr_identifier_get_name_q(arg0);

    expr = v_list_get_item(arg_list, 1);

    //-------------------------------------------------------------
    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor((expr: *v_ast_base_t), vis);

    fun_type  = v_get_result_type();
    fun_value = v_get_result_value();

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);
    defer v_terminate(sstr);

    register_mangled_function_name(false, sstr, quark, v_type_refptr_get_element_type(fun_type));     //- Sic!

    fun_name = v_std_string_get(sstr);

//printf("%s\n", fun_name);

    v_add_variable(fun_name, fun_type, fun_value);
}


//---------------------------------------------------------------------
//- Enable mangling
//---------------------------------------------------------------------
export
voidc_enable_mangling_compiler: () ~> void
{
    vis = v_get_compiler();

    v_return_if(voidc_visitor_get_method(vis, unit_spec_fun_defn_q, 0));

    //-------------------------------------------------------------
    voidc_visitor_set_method(vis, vis, unit_spec_fun_defn_q, compile_unit_spec_fun_defn, 0);
    voidc_visitor_set_method(vis, vis, unit_spec_fun_renm_q, compile_unit_spec_fun_renm, 0);

    q = v_quark_from_string;

    v_add_intrinsic_q(q("v.internal.spec_fun_decl"), v_internal_spec_fun_decl_intrinsic, 0);
    v_add_intrinsic_q(q("v.internal.spec_fun_renm"), v_internal_spec_fun_renm_intrinsic, 0);

    //-------------------------------------------------------------
    v_set_handler(v_compute_key_quark_type, compute_key_quark_type, 0);
}

//---------------------------------------------------------------------
//- Enable mangling
//---------------------------------------------------------------------
export
voidc_enable_mangling: () ~> void
{
    voidc_enable_mangling_compiler();

    v_return_if_not(voidc_has_grammar());
    v_return_if(voidc_grammar_has_parser("spec_ident"));

    gr0 = v_alloca(v_peg_grammar_t);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    actions:
        mk_spec_ident_infix       = mk_spec_ident_infix_grammar_action;
        mk_spec_ident_infix_right = mk_spec_ident_infix_right_grammar_action;
        mk_spec_ident_postfix     = mk_spec_ident_postfix_grammar_action;
        mk_spec_ident_prefix      = mk_spec_ident_prefix_grammar_action;
        mk_qlf_spec_ident         = mk_qlf_spec_ident_grammar_action;
        mk_unit_spec_fun_defn_hdr = mk_unit_spec_fun_defn_hdr_grammar_action;
        mk_unit_spec_fun_renm     = mk_unit_spec_fun_renm_grammar_action;
        mk_stmt_spec_fun_decl     = mk_stmt_spec_fun_decl_grammar_action;
        mk_stmt_spec_fun_renm     = mk_stmt_spec_fun_renm_grammar_action;

    parsers:

        spec_ident = '(' _ '_' !ident_cont _ op:infix _ '_' _ ')'       { mk_spec_ident_infix(op) }
                   / '(' _ '_' !ident_cont _ op:infix _ "__" _ ')'      { mk_spec_ident_infix_right(op) }
                   / '(' _ '_' !ident_cont _ op:postfix _ ')'           { mk_spec_ident_postfix(op) }
                   / '(' _ '_' _ "->" _ ')'                             { mk_spec_ident_postfix(op_postfix_to) }
                   / '(' _ op:prefix _ '_' _ ')'                        { mk_spec_ident_prefix(op) }
                   ;


        qlf_spec_ident = q:qualif_flags _ si:spec_ident      { mk_qlf_spec_ident(q, si) };


        unit_spec_fun_defn_hdr = qf:qlf_spec_ident _':'_ a:bracketed _"~>"_ r:expr    { mk_unit_spec_fun_defn_hdr(qf, a, r) };

        unit_spec_fun_defn = h:unit_spec_fun_defn_hdr _';'                      { mk_unit_fun_defn(h, 0) }
                           / h:unit_spec_fun_defn_hdr _'{'_ l:stmt_list _'}'    { mk_unit_fun_defn(h, l) }
                           / h:unit_spec_fun_defn_hdr _'='_ e:expr _';'         { mk_unit_fun_expr(h, e) }
                           ;

        unit_defn += unit_spec_fun_defn
                   / si:spec_ident _'='_ fn:identifier _';'                 { mk_unit_spec_fun_renm(si, fn) }
                   ;


        stmt_defn += si:spec_ident _':'_ a:bracketed _"~>"_ r:expr _';'     { mk_stmt_spec_fun_decl(si, a, r) }
                   / si:spec_ident _'='_ f:expr _';'                        { mk_stmt_spec_fun_renm(si, f) }
                   ;
    }

    v_peg_set_grammar(gr0);
}


//=====================================================================
{   voidc_unit_end_module(); }


