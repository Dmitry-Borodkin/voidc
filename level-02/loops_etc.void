//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("loops_etc.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");

    v_import("llvm-c/Core.void");

//  v_import("printf.void");
}

{   v_enable_level_01(); }


//---------------------------------------------------------------------
{   v_add_type("void_ptr", v_pointer_type(void, 0));

    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("q_break", q_ref, q("v_break"));

    v_add_symbol("q_internal_copy_variable", q_ref, q("v.internal.copy_variable"));

    v_add_symbol("nil_q",  q_ref, q(""));
    v_add_symbol("true_q", q_ref, q("true"));

    v_add_symbol("e_break_for_var_q", q_ref, q("voidc.internal_branch_target_break_for_variable"));
    v_add_symbol("e_break_for_q",     q_ref, q("voidc.internal_branch_target_break_for"));
    v_add_symbol("e_break_var_q",     q_ref, q("voidc.internal_branch_target_break_variable"));
    v_add_symbol("e_break_q",         q_ref, q("voidc.internal_branch_target_break"));
    v_add_symbol("e_continue_var_q",  q_ref, q("voidc.internal_branch_target_continue_variable"));
    v_add_symbol("e_continue_q",      q_ref, q("voidc.internal_branch_target_continue"));
}


//=====================================================================
{   voidc_unit_begin_module("loops_etc_module"); }


//---------------------------------------------------------------------
mk_stmt_while_grammar_action: (ret: v_std_any_ptr, *void, any: v_std_any_ptr, size_t) ~> void
{
    cond = v_std_any_get_pointer(v_ast_stmt_list_t, any+0);
    stmt = v_std_any_get_pointer(v_ast_stmt_t,      any+1);

    //- loop
    //- {
    //-     <cond>...
    //-
    //-     if (<cond>)     //- Kinda...
    //-     <stmt>
    //-     else  v_break();
    //- }


    cond_len: &size_t := v_list_get_size(cond);

    cstm = v_list_get_item(cond, cond_len-1);


    cexp = v_alloca(v_ast_expr_t);
    v_initialize(cexp);
    defer v_terminate(cexp);

    qname = v_ast_stmt_get_name_q(cstm);

    if (qname  &&  qname != nil_q)
    {
        v_ast_make_expr_identifier_q(cexp, qname);
    }
    else
    {
        v_copy(cexp, v_ast_stmt_get_expr(cstm));

        --cond_len;
    }


    stmp_len = cond_len + 1;

    stmp = v_alloca(v_ast_stmt_t, stmp_len);
    v_initialize(stmp, stmp_len);
    defer v_terminate(stmp, stmp_len);


    //- stmp_cond - if

    stmp_cond = stmp + cond_len;

    v_ast_make_stmt_call(stmp_cond, 0, q_break, 0, 0);

    v_ast_make_stmt_if_then_else(stmp_cond, cexp, stmt, stmp_cond);


    //- stmp+0 - loop

    if (cond_len)
    {
        //- stmp+0 - block

        i: &size_t := 0;

        loop
        {
            if (i == cond_len)  v_break();

            v_copy(stmp+i, v_list_get_item(cond, i));

            ++i;
        }

        slst = v_alloca(v_ast_stmt_list_t);
        v_initialize(slst);
        defer v_terminate(slst);

        v_make_list(slst, stmp+0, stmp_len);

        v_ast_make_stmt_block(stmp+0, slst, false);
    }


    v_ast_make_stmt_loop(stmp+0, stmp+0);

    v_std_any_set_pointer(ret, stmp+0);
}


//---------------------------------------------------------------------
v_internal_copy_variable_intrinsic: (*void, vis: voidc_visitor_ptr,
                                     self: v_ast_base_ptr) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: v_ast_expr_ptr));

    expr0 = v_list_get_item(args, 0);
    expr1 = v_list_get_item(args, 1);

    qname_dst = v_ast_expr_identifier_get_name_q(expr0);
    qname_src = v_ast_expr_identifier_get_name_q(expr1);

    src_type:  &*v_type_t    := v_undef();
    src_value: &LLVMValueRef := v_undef();

    v_get_variable_q(qname_src, &src_type, &src_value);

    v_add_variable_q(qname_dst, src_type, src_value);
}

//---------------------------------------------------------------------
mk_stmt_for_grammar_action: (ret: v_std_any_ptr, *void, any: v_std_any_ptr, size_t) ~> void
{
    init = v_std_any_get_pointer(v_ast_stmt_list_t, any+0);
    cond = v_std_any_get_pointer(v_ast_stmt_list_t, any+1);
    incr = v_std_any_get_pointer(v_ast_stmt_list_t, any+2);
    stmt = v_std_any_get_pointer(v_ast_stmt_t,      any+3);

    //- {   <init>...
    //-
    //-     loop
    //-     {
    //-         v.internal.copy_variable(voidc.internal_branch_target_break_for_variable,
    //-                                  voidc.internal_branch_target_break_variable);
    //-
    //-         v.internal.copy_variable(voidc.internal_branch_target_break_for,
    //-                                  voidc.internal_branch_target_break);
    //-
    //-         <cond>...
    //-
    //-         if (<cond>)     //- Kinda...
    //-         block
    //-         {
    //-             v.internal.copy_variable(voidc.internal_branch_target_continue_variable,
    //-                                      voidc.internal_branch_target_break_variable);
    //-
    //-             v.internal.copy_variable(voidc.internal_branch_target_continue,
    //-                                      voidc.internal_branch_target_break);
    //-
    //-             v.internal.copy_variable(voidc.internal_branch_target_break_variable,
    //-                                      voidc.internal_branch_target_break_for_variable);
    //-
    //-             v.internal.copy_variable(voidc.internal_branch_target_break,
    //-                                      voidc.internal_branch_target_break_for);
    //-
    //-             <stmt>
    //-         }
    //-         else v_break();
    //-
    //-         <incr>...
    //-     }
    //- }

    etmp = v_alloca(v_ast_expr_t, 9);
    v_initialize(etmp, 9);
    defer v_terminate(etmp, 9);

    e_break_for_var = etmp+2;
    e_break_for     = etmp+3;
    e_break_var     = etmp+4;
    e_break         = etmp+5;
    e_continue_var  = etmp+6;
    e_continue      = etmp+7;
    e_cond          = etmp+8;

    v_ast_make_expr_identifier_q(e_break_for_var, e_break_for_var_q);
    v_ast_make_expr_identifier_q(e_break_for,     e_break_for_q);
    v_ast_make_expr_identifier_q(e_break_var,     e_break_var_q);
    v_ast_make_expr_identifier_q(e_break,         e_break_q);
    v_ast_make_expr_identifier_q(e_continue_var,  e_continue_var_q);
    v_ast_make_expr_identifier_q(e_continue,      e_continue_q);


    init_len = v_list_get_size(init);

    cond_len: &size_t := v_list_get_size(cond);

    if (cond_len)
    {
        cstm = v_list_get_item(cond, cond_len-1);

        qname = v_ast_stmt_get_name_q(cstm);

        if (qname  &&  qname != nil_q)
        {
            v_ast_make_expr_identifier_q(e_cond, qname);
        }
        else
        {
            v_copy(e_cond, v_ast_stmt_get_expr(cstm));

            --cond_len;
        }
    }
    else
    {
        v_ast_make_expr_identifier_q(e_cond, true_q);
    }


    incr_len = v_list_get_size(incr);


    stmp_len: &size_t := 4 + 1;         //- Inner block ("if then")

    {   l = 2 + cond_len + 1 + incr_len;

        if (stmp_len < l)   stmp_len := l;      //- Loop's block

        l = init_len + 1;

        if (stmp_len < l)   stmp_len := l;      //- Outer block
    }


    stmp = v_alloca(v_ast_stmt_t, stmp_len);
    v_initialize(stmp, stmp_len);
    defer v_terminate(stmp, stmp_len);


    //- stmp_cond+0 - if

    stmp_cond = stmp + 2 + cond_len;


    v_copy(etmp+0, e_continue_var);
    v_copy(etmp+1, e_break_var);

    v_ast_make_stmt_call(stmp+0, 0, q_internal_copy_variable, etmp+0, 2);

    v_copy(etmp+0, e_continue);
    v_copy(etmp+1, e_break);

    v_ast_make_stmt_call(stmp+1, 0, q_internal_copy_variable, etmp+0, 2);

    v_copy(etmp+0, e_break_var);
    v_copy(etmp+1, e_break_for_var);

    v_ast_make_stmt_call(stmp+2, 0, q_internal_copy_variable, etmp+0, 2);

    v_copy(etmp+0, e_break);
    v_copy(etmp+1, e_break_for);

    v_ast_make_stmt_call(stmp+3, 0, q_internal_copy_variable, etmp+0, 2);


    v_copy(stmp+4, stmt);


    slst = v_alloca(v_ast_stmt_list_t);
    v_initialize(slst);
    defer v_terminate(slst);

    v_make_list(slst, stmp+0, 5);

    v_ast_make_stmt_block(stmp+0, slst, true);

    v_ast_make_stmt_call(stmp_cond, 0, q_break, 0, 0);

    v_ast_make_stmt_if_then_else(stmp_cond+0, e_cond, stmp+0, stmp_cond);


    //- stmp_init+0 - loop

    stmp_init = stmp + init_len;


    v_copy(etmp+0, e_break_for_var);
    v_copy(etmp+1, e_break_var);

    v_ast_make_stmt_call(stmp+0, 0, q_internal_copy_variable, etmp+0, 2);

    v_copy(etmp+0, e_break_for);
    v_copy(etmp+1, e_break);

    v_ast_make_stmt_call(stmp+1, 0, q_internal_copy_variable, etmp+0, 2);


    if (cond_len)
    {
        i: &size_t := 0;

        loop
        {
            if (i == cond_len)  v_break();

            v_copy(stmp+2+i, v_list_get_item(cond, i));

            ++i;
        }
    }

    if (incr_len)
    {
        i: &size_t := 0;

        loop
        {
            if (i == incr_len)  v_break();

            v_copy(stmp_cond+1+i, v_list_get_item(incr, i));

            ++i;
        }
    }


    v_make_list(slst, stmp+0, 2+cond_len+1+incr_len);

    v_ast_make_stmt_block(stmp+0, slst, false);

    v_ast_make_stmt_loop(stmp_init+0, stmp+0);


    if (init_len)
    {
        i: &size_t := 0;

        loop
        {
            if (i == init_len)  v_break();

            v_copy(stmp+i, v_list_get_item(init, i));

            ++i;
        }
    }


    v_make_list(slst, stmp+0, init_len+1);

    v_ast_make_stmt_block(stmp+0, slst, false);


    v_std_any_set_pointer(ret, stmp+0);
}


//---------------------------------------------------------------------
mk_stmt_if_then_else_2_grammar_action: (ret: v_std_any_ptr, *void, any: v_std_any_ptr, size_t) ~> void
{
    cond = v_std_any_get_pointer(v_ast_stmt_list_t, any+0);
    tstm = v_std_any_get_pointer(v_ast_stmt_t,      any+1);
    estm = v_std_any_get_pointer(v_ast_stmt_t,      any+2);

    //- {   <cond>...
    //-
    //-     if (<cond>)     //- Kinda...
    //-     <tstm>
    //-     else <estm>
    //- }


    cond_len: &size_t := v_list_get_size(cond);

    cstm = v_list_get_item(cond, cond_len-1);


    cexp = v_alloca(v_ast_expr_t);
    v_initialize(cexp);
    defer v_terminate(cexp);

    qname = v_ast_stmt_get_name_q(cstm);

    if (qname  &&  qname != nil_q)
    {
        v_ast_make_expr_identifier_q(cexp, qname);
    }
    else
    {
        v_copy(cexp, v_ast_stmt_get_expr(cstm));

        --cond_len;
    }


    stmp_len = cond_len + 1;


    stmp = v_alloca(v_ast_stmt_t, stmp_len);
    v_initialize(stmp, stmp_len);
    defer v_terminate(stmp, stmp_len);


    //- stmp_cond+0 - if

    stmp_cond = stmp + cond_len;


    else_stmt = stmp_cond+0;    //- Temporary...

    if (estm)   v_copy(else_stmt, estm);

    v_ast_make_stmt_if_then_else(stmp_cond+0, cexp, tstm, else_stmt);


    {   i: &size_t := 0;

        loop
        {
            if (i == cond_len)  v_break();

            v_copy(stmp+i, v_list_get_item(cond, i));

            ++i;
        }
    }

    slst = v_alloca(v_ast_stmt_list_t);
    v_initialize(slst);
    defer v_terminate(slst);

    v_make_list(slst, stmp+0, cond_len+1);

    v_ast_make_stmt_block(stmp+0, slst, false);


    v_std_any_set_pointer(ret, stmp+0);
}


//---------------------------------------------------------------------
mk_stmt_switch_2_grammar_action: (ret: v_std_any_ptr, *void, any: v_std_any_ptr, size_t) ~> void
{
    estm = v_std_any_get_pointer(v_ast_stmt_list_t,    any+0);
    glst = v_std_any_get_pointer(v_ast_generic_list_t, any+1);

    //- {   <estm>...
    //-
    //-     switch (<estm>)     //- Kinda...
    //-     <glst>
    //- }


    estm_len: &size_t := v_list_get_size(estm);

    etmp = v_alloca(v_ast_expr_t);
    v_initialize(etmp);
    defer v_terminate(etmp);

    {   stmt = v_list_get_item(estm, estm_len-1);

        qname = v_ast_stmt_get_name_q(stmt);

        if (qname  &&  qname != nil_q)
        {
            v_ast_make_expr_identifier_q(etmp, qname);
        }
        else
        {
            v_copy(etmp, v_ast_stmt_get_expr(stmt));

            --estm_len;
        }
    }


    stmp_len = estm_len + 1;


    stmp = v_alloca(v_ast_stmt_t, stmp_len);
    v_initialize(stmp, stmp_len);
    defer v_terminate(stmp, stmp_len);


    //- stmp_estm+0 - switch

    stmp_estm = stmp + estm_len;


    v_ast_make_stmt_switch(stmp_estm+0, etmp, glst);


    if (estm_len)       //- if?
    {
        i: &size_t := 0;

        loop
        {
            if (i == estm_len)  v_break();

            v_copy(stmp+i, v_list_get_item(estm, i));

            ++i;
        }
    }


    slst = v_alloca(v_ast_stmt_list_t);
    v_initialize(slst);
    defer v_terminate(slst);

    v_make_list(slst, stmp+0, stmp_len);

    v_ast_make_stmt_block(stmp+0, slst, false);


    v_std_any_set_pointer(ret, stmp+0);
}


//---------------------------------------------------------------------
//- Intrinsics table ...
//---------------------------------------------------------------------
{   v_add_symbol("voidc_loops_etc_intrinsics_table", v_reference_type(v_array_type(void_ptr, 2), 0), 0);
}

{   module = v_get_module();

    intrinsics_table = v_obtain_global("voidc_loops_etc_intrinsics_table", 0);

    void_ptr_ = v_type_get_llvm_type(void_ptr);

    vp_0 = LLVMConstNull(void_ptr_);

    val = v_alloca(LLVMValueRef, 2);

    val[0] := v_obtain_function("v_internal_copy_variable_intrinsic", 0);
    val[1] := vp_0;

    LLVMSetInitializer(intrinsics_table, LLVMConstArray2(void_ptr_, val, 2));

    //-----------------------------------------------------------------
    voidc_skip_unit_save(1);
}


//---------------------------------------------------------------------
//- Enable loops etc
//---------------------------------------------------------------------
export
voidc_enable_loops_etc_compiler: () ~> void
{
    copy_variable_q = v_quark_from_string("v.internal.copy_variable");

    v_return_if(v_get_intrinsic_q(copy_variable_q));

    v_add_intrinsic_q(copy_variable_q, &voidc_loops_etc_intrinsics_table[0]);

    voidc_enable_statement_block_compiler();
    voidc_enable_statement_loop_compiler();

    voidc_enable_statement_if_then_else_compiler();
    voidc_enable_statement_switch_compiler();
}


//---------------------------------------------------------------------
//- Enable loops etc
//---------------------------------------------------------------------
export
voidc_enable_loops_etc: () ~> void
{
    voidc_enable_loops_etc_compiler();


    v_return_if_not(voidc_has_grammar());
    v_return_if(voidc_grammar_has_parser("stmt_while"));


    voidc_enable_statement_block();
    voidc_enable_statement_loop();

    voidc_enable_statement_if_then_else();
    voidc_enable_statement_switch();


    gr0 = v_alloca(v_peg_grammar_t);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    grammar gr0
    {
    actions:
        mk_stmt_while = mk_stmt_while_grammar_action;
        mk_stmt_for   = mk_stmt_for_grammar_action;

        mk_stmt_if_then_else_2 = mk_stmt_if_then_else_2_grammar_action;
        mk_stmt_switch_2       = mk_stmt_switch_2_grammar_action;

    parsers:
        simple_stmt = i:identifier _':'_ t: expr _'='_ v:expr       { mk_stmt_val_defn(i, t, v) }
                    / i:identifier _':'_ tv: expr                   { mk_stmt_var_defn(i, tv) }         //- Sic!!!
                    / i:identifier _ '=' _ v:expr                   { mk_stmt(i, v) }
                    / v:expr                                        { mk_stmt(0, v) }
                    ;

        simple_stmt_list_lr = l:simple_stmt_list_lr _','_ s:simple_stmt     { mk_stmt_list(l, s) }
                            / s:simple_stmt                                 { mk_stmt_list(0, s) }
                            ;

        simple_stmt_list_lr is left-recursive;

        simple_stmt_list = simple_stmt_list_lr
                         /                          { mk_stmt_list(0, 0) }
                         ;


        stmt_while = "while" _'('_ c:simple_stmt_list_lr _')'_ s:stmt   { mk_stmt_while(c, s) };


        stmt_for = "for" _'('_ i:simple_stmt_list _';'_
                               c:simple_stmt_list _';'_
                               r:simple_stmt_list
                         _')'_ s:stmt                       { mk_stmt_for(i, c, r, s) }
                 ;

        stmt += stmt_while / stmt_for;


        stmt_if_then_else =+ "if" _'('_ c:simple_stmt_list_lr _')'_ t:stmt
                             e:(_ "else" !ident_cont _ stmt)?           { mk_stmt_if_then_else_2(c, t, e) };


        stmt_switch =+ "switch" _'('_ e:simple_stmt_list_lr _')'_
                       '{'_ l:case_list _'}'    { mk_stmt_switch_2(e, l) };
    }

    v_peg_set_grammar(gr0);
}


//=====================================================================
{   voidc_unit_end_module(); }


