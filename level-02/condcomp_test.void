{   v_import("level-00");
    v_import("level-01");

    v_import("loops_etc.void");
    v_import("condcomp.void");

    v_import("printf.void");
}

{   v_enable_level_01();

    voidc_enable_loops_etc();
    voidc_enable_condcomp();
}


//---------------------------------------------------------------------
{ v_debug_print_module(1); }
{
    printf("here 0\n");

    a = 3;

    #if   (a == 0)  printf("0 a: %d\n", a);
    #elif (a == 1)  printf("1 a: %d\n", a);
    #elif (a == 2)  printf("2 a: %d\n", a);
    #elif (a == 3)  printf("3 a: %d\n", a);
    #elif (a == 4)  printf("4 a: %d\n", a);
    #else           printf("? a: %d\n", a);
    #endif

    printf("here 1\n");

    #if (v_defined(true))   printf("true defined\n");
    #else                   printf("true unknown\n");
    #endif

    #if (v_defined(True))   printf("True defined\n");
    #else                   printf("True unknown\n");
    #endif
}


//---------------------------------------------------------------------
{ v_debug_print_module(1); }

A = 3;

#if   (A == 0)  B = 0;
#elif (A == 1)  B = 1;
#elif (A == 2)  B = 2;
#elif (A == 3)  B = 3;
#elif (A == 4)  B = 4;
#else           B = -1;
#endif

{
    printf("A: %d, B: %d\n", A, B);
}


//---------------------------------------------------------------------
{ v_debug_print_module(1); }

#if (true  &&  2*2 == 4)    Q = "Sic!";
#endif

#if (2*2 == 5  ||  true)    R = "Sic!!";
#endif

#if (3 < 2*2 < 5)           S = "Sic!!!";
#endif

{
    printf("Q: %s\n", Q);
    printf("R: %s\n", R);
    printf("S: %s\n", S);
}


//---------------------------------------------------------------------
#if (0) #endif
#if (1) #endif

{
    #if (0) #endif
    #if (1) #endif
}

//---------------------------------------------------------------------
{
    v_assert(2 * 2 == 4);
//  v_assert(2 * 2 == 5  &&  "Hello!");
}

//---------------------------------------------------------------------

#note ("Hello 0")

{
    printf("aaaaaa\n");

#note ("Hello 1")

    printf("bbbbbb\n");
}


#warning ("just test...")


//---------------------------------------------------------------------
echo_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    call = (self: *v_ast_expr_t);

    args = v_ast_expr_call_get_arg_list(call);

    sstr = v_alloca(v_std_string_t);
    v_initialize(sstr);
    defer v_terminate(sstr);

    pos_start_q = v_quark_from_string("pos_start");
    pos_end_q   = v_quark_from_string("pos_end");

    n = v_list_get_size(args);

    for (i: &int := 0; i < n; ++i)
    {
        arg = v_list_get_item(args, i);

        line:   &size_t := v_undef();
        column: &size_t := v_undef();

        ps = v_std_any_get_value(size_t, v_ast_get_property((arg: *v_ast_base_t), pos_start_q));
        pe = v_std_any_get_value(size_t, v_ast_get_property((arg: *v_ast_base_t), pos_end_q));

        v_peg_get_line_column(ps, line, column);

        v_peg_take_string(sstr, ps, pe);

        if (i)  printf(" ");

        printf(v_std_string_get(sstr));
    }

    if (n)  printf("...\n");
}

{   v_add_intrinsic("echo", echo_intrinsic, 0);
}

#do (echo(Hello, world), echo(Hello, again))

{ #do (echo(Hello, one, more, time)) }


//---------------------------------------------------------------------

#error ("AAAAAAAAAAAAAAAAAAAAA!!!")


