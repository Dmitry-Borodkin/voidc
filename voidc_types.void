//---------------------------------------------------------------------
//- Copyright (C) 2020-2021 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_import("voidc_types.void"); }

{   v_import("voidc_target.void");
}

{   type = v_struct_type_named("struct.LLVMOpaqueType");
    v_add_symbol("LLVMOpaqueType", voidc_opaque_type, type);

    type = v_pointer_type(type, 0);
    v_add_symbol("LLVMTypeRef", voidc_opaque_type, type);
}

{   typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    type_ptr = v_pointer_type(v_type_ptr, 0);
    char_ptr = v_pointer_type(char, 0);

    //-----------------------------------------------------------------
    v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(LLVMTypeRef, typ0, 1, false);
    v_add_symbol_type("v_type_get_llvm_type", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_add_symbol_type("v_type_get_scalar_type", ft);

    //-----------------------------------------------------------------
    ft = v_function_type(v_type_ptr, 0, 0, false);
    v_add_symbol_type("v_f16_type",  ft);
    v_add_symbol_type("v_f32_type",  ft);
    v_add_symbol_type("v_f64_type",  ft);
    v_add_symbol_type("v_f128_type", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(bool, typ0, 1, false);
    v_add_symbol_type("v_type_is_floating_point", ft);

    //-----------------------------------------------------------------
    v_store(unsigned, typ0);            //- Width

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_add_symbol_type("v_sint_type", ft);
    v_add_symbol_type("v_uint_type", ft);

    v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(bool, typ0, 1, false);
    v_add_symbol_type("v_type_is_integer", ft);
    v_add_symbol_type("v_type_integer_is_signed", ft);

    ft = v_function_type(unsigned, typ0, 1, false);
    v_add_symbol_type("v_type_integer_get_width", ft);

    //-----------------------------------------------------------------
//  v_store(v_type_ptr, typ0);          //- Return type
//  v_store(type_ptr,   typ1);          //- Parameter types
//  v_store(unsigned,   typ2);          //- Parameter count
//  v_store(bool,       typ3);          //- Is var arg
//
//  ft = v_function_type(v_type_ptr, typ0, 4, false);
//  v_add_symbol_type("v_function_type", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(bool, typ0, 1, false);
    v_add_symbol_type("v_type_is_function", ft);
    v_add_symbol_type("v_type_function_is_var_arg", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_add_symbol_type("v_type_function_get_return_type", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(unsigned, typ0, 1, false);
    v_add_symbol_type("v_type_function_get_param_count", ft);

//  v_store(v_type_ptr, typ0);          //-
    v_store(type_ptr,   typ1);          //- Parameter types (out)

    ft = v_function_type(void, typ0, 2, false);
    v_add_symbol_type("v_type_function_get_param_types", ft);

    //-----------------------------------------------------------------
    v_store(v_type_ptr, typ0);          //- Element type
    v_store(unsigned,   typ1);          //- Address space

    ft = v_function_type(v_type_ptr, typ0, 2, false);
//  v_add_symbol_type("v_pointer_type",   ft);
    v_add_symbol_type("v_reference_type", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(bool, typ0, 1, false);
    v_add_symbol_type("v_type_is_pointer",   ft);
    v_add_symbol_type("v_type_is_ptrerence", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_add_symbol_type("v_type_ptrptr_get_element_type", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(unsigned, typ0, 1, false);
    v_add_symbol_type("v_type_ptrptr_get_address_space", ft);

    //-----------------------------------------------------------------
//  v_store(char_ptr, typ0);            //- Struct name
//
//  ft = v_function_type(v_type_ptr, typ0, 1, false);
//  v_add_symbol_type("v_struct_type_named", ft);

    v_store(type_ptr, typ0);            //- Element types
    v_store(unsigned, typ1);            //- Element count
    v_store(bool,     typ2);            //- Is packed

    ft = v_function_type(v_type_ptr, typ0, 3, false);
    v_add_symbol_type("v_struct_type", ft);

    v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(bool, typ0, 1, false);
    v_add_symbol_type("v_type_is_struct", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(char_ptr, typ0, 1, false);
    v_add_symbol_type("v_type_struct_get_name", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(bool, typ0, 1, false);
    v_add_symbol_type("v_type_struct is_opaque", ft);

//  v_store(v_type_ptr, typ0);          //-
    v_store(type_ptr,   typ1);          //- Element types
    v_store(unsigned,   typ2);          //- Element count
    v_store(bool,       typ3);          //- Is packed

    ft = v_function_type(v_type_ptr, typ0, 4, false);
    v_add_symbol_type("v_type_struct_set_body", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(unsigned, typ0, 1, false);
    v_add_symbol_type("v_type_struct_get_element_count", ft);

//  v_store(v_type_ptr, typ0);          //-
    v_store(type_ptr,   typ1);          //- Element types (out)

    ft = v_function_type(void, typ0, 2, false);
    v_add_symbol_type("v_type_struct_get_element_types", ft);

//  v_store(v_type_ptr, typ0);          //-
    v_store(unsigned,   typ1);          //- Index

    ft = v_function_type(v_type_ptr, typ0, 2, false);
    v_add_symbol_type("v_type_struct_get_type_at_index", ft);

    //-----------------------------------------------------------------
//  v_store(v_type_ptr, typ0);          //- Element type
    v_store(uint64_t,   typ1);          //- Array length

    ft = v_function_type(v_type_ptr, typ0, 2, false);
    v_add_symbol_type("v_array_type", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(bool, typ0, 1, false);
    v_add_symbol_type("v_type_is_array", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_add_symbol_type("v_type_array_get_element_type", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(uint64_t, typ0, 1, false);
    v_add_symbol_type("v_type_array_get_length", ft);

    //-----------------------------------------------------------------
//  v_store(v_type_ptr, typ0);          //- Element type
    v_store(unsigned,   typ1);          //- Vector size

    ft = v_function_type(v_type_ptr, typ0, 2, false);
    v_add_symbol_type("v_fvector_type", ft);
    v_add_symbol_type("v_svector_type", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(bool, typ0, 1, false);
    v_add_symbol_type("v_type_is_vector", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_add_symbol_type("v_type_vector_get_element_type", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(unsigned, typ0, 1, false);
    v_add_symbol_type("v_type_vector_get_size", ft);

//  v_store(v_type_ptr, typ0);          //-

    ft = v_function_type(bool, typ0, 1, false);
    v_add_symbol_type("v_type_vector_is_scalable", ft);
}


{   typ0 = v_alloca(v_type_ptr, 7);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);
    typ4 = v_getelementptr(typ0, 4);
    typ5 = v_getelementptr(typ0, 5);
    typ6 = v_getelementptr(typ0, 6);

    type_ptr = v_pointer_type(v_type_ptr, 0);
    char_ptr = v_pointer_type(char, 0);

    void_ptr  = v_pointer_type(void, 0);
    void_ptrs = v_pointer_type(void_ptr, 0);

    visitor_ptr = v_pointer_type(voidc_opaque_visitor_sptr, 0);

    quark_t = v_uint_type(32);


    //-------------------------------------------------------------
    //- Generics ...
    //-------------------------------------------------------------
    generic_vtable = v_struct_type_named("struct.v_type_generic_vtable");

    v_store(void_ptrs, typ0);                       //- elements
    v_store(unsigned,  typ1);                       //- count

    destroy_ft = v_function_type(void, typ0, 2, false);
    destroy_p  = v_pointer_type(destroy_ft, 0);

//  v_store(void_ptrs,   typ0);                     //- elements
//  v_store(unsigned,    typ1);                     //- count
    v_store(visitor_ptr, typ2);                     //- visitor
    v_store(void_ptr,    typ3);                     //- aux

    accept_ft = v_function_type(void, typ0, 4, false);
    accept_p  = v_pointer_type(accept_ft, 0);

    v_store(destroy_p, typ0);                       //-
    v_store(accept_p,  typ1);                       //-
    v_store(quark_t,   typ2);                       //-

    v_type_struct_set_body(generic_vtable, typ0, 3, 0);
    v_add_symbol("v_type_generic_vtable", voidc_opaque_type, generic_vtable);

    v_add_symbol("v_type_generic_destroy_fun_t", voidc_opaque_type, destroy_ft);
    v_add_symbol("v_type_generic_accept_fun_t",  voidc_opaque_type, accept_ft);

    generic_vtable_ptr = v_pointer_type(generic_vtable, 0);

    //-------------------------------------------------------------
    v_store(generic_vtable_ptr, typ0);              //- vtable
    v_store(void_ptrs,          typ1);              //- elements
    v_store(unsigned,           typ2);              //- count

    ft = v_function_type(v_type_ptr, typ0, 3, false);
    v_add_symbol_type("v_generic_type", ft);

    //-------------------------------------------------------------
    v_store(v_type_ptr, typ0);                      //-

    ft = v_function_type(generic_vtable_ptr, typ0, 1, false);
    v_add_symbol_type("v_type_generic_get_vtable", ft);

//  v_store(v_type_ptr, typ0);                      //-

    ft = v_function_type(unsigned, typ0, 1, false);
    v_add_symbol_type("v_type_generic_get_element_count", ft);

//  v_store(v_type_ptr, typ0);                      //-
    v_store(void_ptrs,  typ1);                      //- (out)

    ft = v_function_type(void, typ0, 2, false);
    v_add_symbol_type("v_type_generic_get_elements", ft);

//  v_store(v_type_ptr, typ0);                      //-
    v_store(unsigned,   typ1);                      //- index

    ft = v_function_type(void_ptr, typ0, 2, false);
    v_add_symbol_type("v_type_generic_get_element_at_index", ft);


    //-------------------------------------------------------------
    //- Visitors ...
    //-------------------------------------------------------------
    v_store(v_type_ptr, typ0);                      //-

    ft = v_function_type(quark_t, typ0, 1, false);
    v_add_symbol_type("v_type_get_method_tag", ft);


    //-------------------------------------------------------------
    v_store(visitor_ptr, typ0);                     //- visitor
    v_store(void_ptr,    typ1);                     //- aux

    ft = v_function_type(void, typ0, 2, false);
    v_add_symbol("v_type_void_visitor_method_t", voidc_opaque_type, ft);
    v_add_symbol("v_type_f16_visitor_method_t",  voidc_opaque_type, ft);
    v_add_symbol("v_type_f32_visitor_method_t",  voidc_opaque_type, ft);
    v_add_symbol("v_type_f64_visitor_method_t",  voidc_opaque_type, ft);
    v_add_symbol("v_type_f128_visitor_method_t", voidc_opaque_type, ft);

    fun_ptr = v_pointer_type(ft, 0);

//  v_store(visitor_ptr, typ0);                     //- (out)
    v_store(visitor_ptr, typ1);                     //- (in)
    v_store(fun_ptr,     typ2);                     //-

    ft = v_function_type(void, typ0, 3, false);
    v_add_symbol_type("v_visitor_set_method_type_void_t", ft);
    v_add_symbol_type("v_visitor_set_method_type_f16_t",  ft);
    v_add_symbol_type("v_visitor_set_method_type_f32_t",  ft);
    v_add_symbol_type("v_visitor_set_method_type_f64_t",  ft);
    v_add_symbol_type("v_visitor_set_method_type_f128_t", ft);

    v_add_symbol_type("v_type_void_visitor_method_tag", quark_t);
    v_add_symbol_type("v_type_f16_visitor_method_tag",  quark_t);
    v_add_symbol_type("v_type_f32_visitor_method_tag",  quark_t);
    v_add_symbol_type("v_type_f64_visitor_method_tag",  quark_t);
    v_add_symbol_type("v_type_f128_visitor_method_tag", quark_t);

    //-------------------------------------------------------------
    v_store(visitor_ptr, typ0);                     //-
    v_store(void_ptr,    typ1);                     //-
    v_store(unsigned,    typ2);                     //- bits
    v_store(bool,        typ3);                     //- signed

    ft = v_function_type(void, typ0, 4, false);
    v_add_symbol("v_type_sint_visitor_method_t", voidc_opaque_type, ft);
    v_add_symbol("v_type_uint_visitor_method_t", voidc_opaque_type, ft);

    fun_ptr = v_pointer_type(ft, 0);

//  v_store(visitor_ptr, typ0);                     //- (out)
    v_store(visitor_ptr, typ1);                     //- (in)
    v_store(fun_ptr,     typ2);                     //-

    ft = v_function_type(void, typ0, 3, false);
    v_add_symbol_type("v_visitor_set_method_type_sint_t", ft);
    v_add_symbol_type("v_visitor_set_method_type_uint_t", ft);

    v_add_symbol_type("v_type_sint_visitor_method_tag", quark_t);
    v_add_symbol_type("v_type_uint_visitor_method_tag", quark_t);

    //-------------------------------------------------------------
    v_store(visitor_ptr, typ0);                     //-
    v_store(void_ptr,    typ1);                     //-
    v_store(v_type_ptr,  typ2);                     //- return type
    v_store(type_ptr,    typ3);                     //- param types
    v_store(unsigned,    typ4);                     //- param count
    v_store(bool,        typ5);                     //- var arg

    ft = v_function_type(void, typ0, 6, false);
    v_add_symbol("v_type_function_visitor_method_t", voidc_opaque_type, ft);

    fun_ptr = v_pointer_type(ft, 0);

//  v_store(visitor_ptr, typ0);                     //- (out)
    v_store(visitor_ptr, typ1);                     //- (in)
    v_store(fun_ptr,     typ2);                     //-

    ft = v_function_type(void, typ0, 3, false);
    v_add_symbol_type("v_visitor_set_method_type_function_t", ft);

    v_add_symbol_type("v_type_function_visitor_method_tag", quark_t);

    //-------------------------------------------------------------
    v_store(visitor_ptr, typ0);                     //-
    v_store(void_ptr,    typ1);                     //-
    v_store(v_type_ptr,  typ2);                     //- element type
    v_store(unsigned,    typ3);                     //- address space
    v_store(bool,        typ4);                     //- reference

    ft = v_function_type(void, typ0, 5, false);
    v_add_symbol("v_type_pointer_visitor_method_t",   voidc_opaque_type, ft);
    v_add_symbol("v_type_ptrerence_visitor_method_t", voidc_opaque_type, ft);

    fun_ptr = v_pointer_type(ft, 0);

//  v_store(visitor_ptr, typ0);                     //- (out)
    v_store(visitor_ptr, typ1);                     //- (in)
    v_store(fun_ptr,     typ2);                     //-

    ft = v_function_type(void, typ0, 3, false);
    v_add_symbol_type("v_visitor_set_method_type_pointer_t",   ft);
    v_add_symbol_type("v_visitor_set_method_type_ptrerence_t", ft);

    v_add_symbol_type("v_type_pointer_visitor_method_tag",   quark_t);
    v_add_symbol_type("v_type_ptrerence_visitor_method_tag", quark_t);

    //-------------------------------------------------------------
    v_store(visitor_ptr, typ0);                     //-
    v_store(void_ptr,    typ1);                     //-
    v_store(char_ptr,    typ2);                     //- name
    v_store(bool,        typ3);                     //- opaque
    v_store(type_ptr,    typ4);                     //- element types
    v_store(unsigned,    typ5);                     //- element count
    v_store(bool,        typ6);                     //- packed

    ft = v_function_type(void, typ0, 7, false);
    v_add_symbol("v_type_struct_visitor_method_t", voidc_opaque_type, ft);

    fun_ptr = v_pointer_type(ft, 0);

//  v_store(visitor_ptr, typ0);                     //- (out)
    v_store(visitor_ptr, typ1);                     //- (in)
    v_store(fun_ptr,     typ2);                     //-

    ft = v_function_type(void, typ0, 3, false);
    v_add_symbol_type("v_visitor_set_method_type_struct_t", ft);

    v_add_symbol_type("v_type_struct_visitor_method_tag", quark_t);

    //-------------------------------------------------------------
    v_store(visitor_ptr, typ0);                     //-
    v_store(void_ptr,    typ1);                     //-
    v_store(v_type_ptr,  typ2);                     //- element type
    v_store(uint64_t,    typ3);                     //- length

    ft = v_function_type(void, typ0, 4, false);
    v_add_symbol("v_type_array_visitor_method_t", voidc_opaque_type, ft);

    fun_ptr = v_pointer_type(ft, 0);

//  v_store(visitor_ptr, typ0);                     //- (out)
    v_store(visitor_ptr, typ1);                     //- (in)
    v_store(fun_ptr,     typ2);                     //-

    ft = v_function_type(void, typ0, 3, false);
    v_add_symbol_type("v_visitor_set_method_type_array_t", ft);

    v_add_symbol_type("v_type_array_visitor_method_tag", quark_t);

    //-------------------------------------------------------------
    v_store(visitor_ptr, typ0);                     //-
    v_store(void_ptr,    typ1);                     //-
    v_store(v_type_ptr,  typ2);                     //- element type
    v_store(unsigned,    typ3);                     //- size
    v_store(bool,        typ4);                     //- scalable

    ft = v_function_type(void, typ0, 5, false);
    v_add_symbol("v_type_fvector_visitor_method_t", voidc_opaque_type, ft);
    v_add_symbol("v_type_svector_visitor_method_t", voidc_opaque_type, ft);

    fun_ptr = v_pointer_type(ft, 0);

//  v_store(visitor_ptr, typ0);                     //- (out)
    v_store(visitor_ptr, typ1);                     //- (in)
    v_store(fun_ptr,     typ2);                     //-

    ft = v_function_type(void, typ0, 3, false);
    v_add_symbol_type("v_visitor_set_method_type_fvector_t", ft);
    v_add_symbol_type("v_visitor_set_method_type_svector_t", ft);

    v_add_symbol_type("v_type_fvector_visitor_method_tag", quark_t);
    v_add_symbol_type("v_type_svector_visitor_method_tag", quark_t);


    //-------------------------------------------------------------
    v_store(v_type_ptr,  typ0);                     //- type
    v_store(visitor_ptr, typ1);                     //- visitor
    v_store(void_ptr,    typ2);                     //- aux

    ft = v_function_type(void, typ0, 3, false);
    v_add_symbol_type("v_type_accept_visitor", ft);


    //-------------------------------------------------------------
    v_add_symbol_type("voidc_llvm_type_visitor", voidc_opaque_visitor_sptr);
}


