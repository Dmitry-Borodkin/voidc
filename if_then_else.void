//---------------------------------------------------------------------
//- Copyright (C) 2020-2021 Dmitry Borodkin <borodkin-dn@yandex.ru>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_import("if_then_else.void"); }

{   v_import("vpeg_context.void");
    v_import("voidc_ast.void");
    v_import("function_hack.void");
    v_import("memory.void");
}


//---------------------------------------------------------------------
{   void_ptr = v_pointer_type(void, 0);
    v_add_local_symbol("void_ptr", voidc_opaque_type, void_ptr);
}


//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 5);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);
    typ4 = v_getelementptr(typ0, 4);


    //-----------------------------------------------------------------
    //- quark ...
    //-----------------------------------------------------------------
    quark = v_quark_from_string("v_ast_stmt_if_then_else_t_visitor_method_tag");

    quark_ll = v_cast(quark, long_long);

    v_quark_t_ = v_type_get_llvm_type(v_quark_t);

    quark_v = LLVMConstInt(v_quark_t_, quark_ll, 0);

    v_add_local_constant("quark", v_quark_t, quark_v);

    v_add_local_symbol("quark_v", LLVMOpaqueValue, quark_v);


    //-----------------------------------------------------------------
    //- method ...
    //-----------------------------------------------------------------
    v_store(voidc_visitor_ptr,  typ0);
    v_store(void_ptr,           typ1);
    v_store(v_ast_argument_ptr, typ2);
    v_store(v_ast_stmt_ptr,     typ3);
    v_store(v_ast_stmt_ptr,     typ4);

    method_ft  = v_function_type(void, typ0, 5, false);
    method_ptr = v_pointer_type(method_ft, 0);

    v_add_local_symbol("method_ft",  voidc_opaque_type, method_ft);
    v_add_local_symbol("method_ptr", voidc_opaque_type, method_ptr);


    //-----------------------------------------------------------------
    //- ast_stmt_if_then_else_t ...
    //-----------------------------------------------------------------
    ast_stmt_if_then_else_t = v_struct_type_named("struct.ast_stmt_if_then_else_t");

    v_store(v_ast_opaque_argument_sptr, typ0);
    v_store(v_ast_opaque_stmt_sptr,     typ1);
    v_store(v_ast_opaque_stmt_sptr,     typ2);

    v_type_struct_set_body(ast_stmt_if_then_else_t, typ0, 3, false);

    ast_stmt_if_then_else_ptr = v_pointer_type(ast_stmt_if_then_else_t, 0);

    v_add_local_symbol("ast_stmt_if_then_else_t",   voidc_opaque_type, ast_stmt_if_then_else_t);
    v_add_local_symbol("ast_stmt_if_then_else_ptr", voidc_opaque_type, ast_stmt_if_then_else_ptr);
}


//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("my_stmt_if_then_else_mod");

    v_set_module(module);
}


//---------------------------------------------------------------------
//- destroy ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_if_then_else_destroy", v_ast_generic_destroy_fun_t);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
}
{
    obj = v_cast(void_obj, ast_stmt_if_then_else_ptr);

    condition = v_getelementptr(obj, 0, 0);
    stmt_then = v_getelementptr(obj, 0, 1);
    stmt_else = v_getelementptr(obj, 0, 2);

    v_terminate(condition);
    v_terminate(stmt_then);
    v_terminate(stmt_else);

    v_mfree(obj);
}


//---------------------------------------------------------------------
//- accept ...
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("voidc_ast_stmt_if_then_else_accept", v_ast_generic_accept_fun_t);

    v_add_parameter_name(f, 0, "void_obj", void_ptr);
    v_add_parameter_name(f, 1, "visitor",  voidc_visitor_ptr);
    v_add_parameter_name(f, 2, "aux",      void_ptr);
}
{
    obj = v_cast(void_obj, ast_stmt_if_then_else_ptr);

    condition = v_getelementptr(obj, 0, 0);
    stmt_then = v_getelementptr(obj, 0, 1);
    stmt_else = v_getelementptr(obj, 0, 2);

    void_method = voidc_visitor_get_void_method(visitor, quark);

    method = v_cast(void_method, method_ptr);

    method(visitor, aux, condition, stmt_then, stmt_else);
}


//-----------------------------------------------------------------------
//- vtable ...
//-------------------------------------------------------------------
{
    module = v_get_module();

    val0 = v_alloca(LLVMValueRef, 3);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);

    destroy_f = v_obtain_function("voidc_ast_stmt_if_then_else_destroy");
    accept_f  = v_obtain_function("voidc_ast_stmt_if_then_else_accept");

    v_store(destroy_f, val0);
    v_store(accept_f,  val1);
    v_store(quark_v,   val2);

    v_ast_generic_vtable_ = v_type_get_llvm_type(v_ast_generic_vtable);

    vtable_v = LLVMConstNamedStruct(v_ast_generic_vtable_, val0, 3);

    vtable_g = LLVMAddGlobal(module, v_ast_generic_vtable_, "voidc_ast_stmt_if_then_else_vtable");

    LLVMSetInitializer(vtable_g, vtable_v);

    v_add_local_symbol("voidc_ast_stmt_if_then_else_vtable", v_ast_generic_vtable, 0);      //- Sic!
}


//---------------------------------------------------------------------
//- v_ast_make_stmt_if_then_else - ...
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(v_ast_stmt_ptr,     typ0);
    v_store(v_ast_argument_ptr, typ1);
    v_store(v_ast_stmt_ptr,     typ2);
    v_store(v_ast_stmt_ptr,     typ3);

    ft = v_function_type(void, typ0, 4, false);

    //-----------------------------------------------------------------
    f = v_function_hack("v_ast_make_stmt_if_then_else", ft);

    v_add_parameter_name(f, 0, "ret",       v_ast_stmt_ptr);
    v_add_parameter_name(f, 1, "condition", v_ast_argument_ptr);
    v_add_parameter_name(f, 2, "stmt_then", v_ast_stmt_ptr);
    v_add_parameter_name(f, 3, "stmt_else", v_ast_stmt_ptr);
}
{
    obj = v_malloc(ast_stmt_if_then_else_t);

    obj_condition = v_getelementptr(obj, 0, 0);
    obj_stmt_then = v_getelementptr(obj, 0, 1);
    obj_stmt_else = v_getelementptr(obj, 0, 2);

    v_initialize(obj_condition);
    v_initialize(obj_stmt_then);
    v_initialize(obj_stmt_else);

    v_copy(obj_condition, condition);
    v_copy(obj_stmt_then, stmt_then);
    v_copy(obj_stmt_else, stmt_else);

    v_ast_make_stmt_generic(ret, voidc_ast_stmt_if_then_else_vtable, obj);
}


//---------------------------------------------------------------------
//- mk_stmt_if_then_else - grammar action
//---------------------------------------------------------------------
//- fun mk_stmt_if_then_else_grammar_action(ret:       v_util_std_any_ptr,
//-                                         any0:      v_util_std_any_ptr,
//-                                         any_count: size_t
//-                                        )
//- {
//-     par_else = v_getelementptr(any0, 2);
//-
//-     stmt_else_ptr = v_util_std_any_get_pointer(v_ast_opaque_stmt_sptr, par_else);
//-
//-     stmt_else_v = v_alloca(v_ast_stmt_ptr);
//-
//-     stmt = v_alloca(v_ast_opaque_stmt_sptr);
//-
//-     v_initialize(stmt);
//-
//-     if (stmt_else_ptr)
//-     {
//-         v_store(stmt_else_ptr, stmt_else_v);
//-     }
//-     else
//-     {
//-         v_store(stmt, stmt_else_v);     //- empty...
//-     }
//-
//-     ...
//-
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("mk_stmt_if_then_else_grammar_action", v_peg_grammar_action_fun_t);

    ret       = v_add_parameter_name(f, 0, "ret",       v_util_std_any_ptr);
    any0      = v_add_parameter_name(f, 1, "any0",      v_util_std_any_ptr);
    any_count = v_add_parameter_name(f, 2, "any_count", size_t);


    val0 = v_alloca(LLVMValueRef, 3);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);

    int_ = v_type_get_llvm_type(int);

    n1 = LLVMConstInt(int_, 1, 0);
    n2 = LLVMConstInt(int_, 2, 0);

    builder = v_target_get_voidc_builder();


    v_store(n2, val0);

    par_else = LLVMBuildGEP(builder, any0, val0, 1, "par_else");


    get_arg_f = v_obtain_dict_function(v_util_std_any_get_pointer_dict, v_ast_opaque_stmt_sptr);

    v_store(par_else, val0);

    stmt_else_ptr = LLVMBuildCall(builder, get_arg_f, val0, 1, "stmt_else_ptr");


    v_ast_stmt_ptr_ = v_type_get_llvm_type(v_ast_stmt_ptr);

    stmt_else_v = LLVMBuildAlloca(builder, v_ast_stmt_ptr_, "stmt_else_v");


    v_ast_opaque_stmt_sptr_ = v_type_get_llvm_type(v_ast_opaque_stmt_sptr);

    stmt = LLVMBuildAlloca(builder, v_ast_opaque_stmt_sptr_, "stmt");

    stmt_sptr_init_f = v_obtain_dict_function(v_util_initialize_dict, v_ast_opaque_stmt_sptr);

    v_store(stmt, val0);
    v_store(n1,   val1);

    LLVMBuildCall(builder, stmt_sptr_init_f, val0, 2, "");


    then_b = LLVMAppendBasicBlock(f, "then_b");
    else_b = LLVMAppendBasicBlock(f, "else_b");
    cont_b = LLVMAppendBasicBlock(f, "cont_b");


    ok_v = LLVMBuildIsNotNull(builder, stmt_else_ptr, "ok_v");

    LLVMBuildCondBr(builder, ok_v, then_b, else_b);


    LLVMPositionBuilderAtEnd(builder, then_b);

    LLVMBuildStore(builder, stmt_else_ptr, stmt_else_v);

    LLVMBuildBr(builder, cont_b);


    LLVMPositionBuilderAtEnd(builder, else_b);

    LLVMBuildStore(builder, stmt, stmt_else_v);

    LLVMBuildBr(builder, cont_b);


    LLVMPositionBuilderAtEnd(builder, cont_b);


    stmt_ptr_ptr = v_pointer_type(v_ast_stmt_ptr, 0);

    v_add_variable("stmt",        v_ast_stmt_ptr, stmt);
    v_add_variable("stmt_else_v", stmt_ptr_ptr,   stmt_else_v);
}
{
    par_then = v_getelementptr(any0, 1);

    condition = v_std_any_get_pointer(v_ast_opaque_argument_sptr, any0);
    stmt_then = v_std_any_get_pointer(v_ast_opaque_stmt_sptr,     par_then);
    stmt_else = v_load(stmt_else_v);

    v_ast_make_stmt_if_then_else(stmt, condition, stmt_then, stmt_else);

    v_std_any_set_pointer(ret, stmt);

    v_terminate(stmt);
}


//---------------------------------------------------------------------
//- compile_ast_stmt_if_then_else_branch_helper
//---------------------------------------------------------------------
//- fun compile_ast_stmt_if_then_else_branch_helper(visitor:  voidc_visitor_ptr,
//-                                                 aux,      void_ptr,
//-                                                 stmt:     v_ast_stmt_ptr,
//-                                                 bblock_v: bblock_ptr
//-                                                )
//- {
//-     builder = v_target_get_builder();
//-
//-     no_stmt = v_empty(stmt);
//-
//-     if (no_stmt) {}
//-     else
//-     {
//-         base_ast = v_cast(stmt, v_ast_base_ptr);
//-
//-         v_ast_accept_visitor(base_ast, visitor, aux);
//-
//-         cur_b = LLVMGetInsertBlock(builder);
//-
//-         term = LLVMGetBasicBlockTerminator(cur_b);
//-
//-         if (term)   v_return();
//-     }
//-
//-     bblock = v_load(bblock_v);
//-
//-     if (bblock) {}
//-     else
//-     {
//-         cur_b = LLVMGetInsertBlock(builder);
//-
//-         fun = LLVMGetBasicBlockParent(cur_b);
//-
//-         fin_bb = LLVMAppendBasickBlock(fun, "fin_bb");
//-
//-         v_store(fin_bb, bblock_v);
//-     }
//-
//-     ...
//-
//---------------------------------------------------------------------
{
    typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    bblock_ptr = v_pointer_type(LLVMBasicBlockRef, 0);

    v_store(voidc_visitor_ptr,  typ0);
    v_store(void_ptr,           typ1);
    v_store(v_ast_stmt_ptr,     typ2);
    v_store(bblock_ptr,         typ3);

    ft = v_function_type(void, typ0, 4, false);

    //-----------------------------------------------------------------
    f = v_function_hack("compile_ast_stmt_if_then_else_branch_helper", ft);

    visitor  = LLVMGetParam(f, 0);
    aux      = LLVMGetParam(f, 1);
    stmt     = LLVMGetParam(f, 2);
    bblock_v = LLVMGetParam(f, 3);


    val0 = v_alloca(LLVMValueRef, 3);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);

    builder = v_target_get_voidc_builder();


    get_builder_f = v_obtain_function("v_target_get_builder");

    builder_v = LLVMBuildCall(builder, get_builder_f, val0, 0, "builder_v");


    stmt_empty_f = v_obtain_dict_function(v_util_empty_dict, v_ast_opaque_stmt_sptr);

    v_store(stmt, val0);

    no_stmt = LLVMBuildCall(builder, stmt_empty_f, val0, 1, "no_stmt");


    stmt_b = LLVMAppendBasicBlock(f, "stmt_b");
    term_b = LLVMAppendBasicBlock(f, "term_b");
    cont_b = LLVMAppendBasicBlock(f, "cont_b");

    LLVMBuildCondBr(builder, no_stmt, cont_b, stmt_b);


    LLVMPositionBuilderAtEnd(builder, stmt_b);

    v_ast_base_ptr_ = v_type_get_llvm_type(v_ast_base_ptr);

    base_ast = LLVMBuildBitCast(builder, stmt, v_ast_base_ptr_, "base_ast");

    v_store(base_ast, val0);
    v_store(visitor,  val1);
    v_store(aux,      val2);

    accept_visitor_f = v_obtain_function("v_ast_accept_visitor");

    LLVMBuildCall(builder, accept_visitor_f, val0, 3, "");


    v_store(builder_v, val0);

    llvm_get_insert_block_f = v_obtain_function("LLVMGetInsertBlock");

    cur_bv = LLVMBuildCall(builder, llvm_get_insert_block_f, val0, 1, "cur_bv");


    v_store(cur_bv, val0);

    llvm_get_basic_block_terminator_f = v_obtain_function("LLVMGetBasicBlockTerminator");

    term_v = LLVMBuildCall(builder, llvm_get_basic_block_terminator_f, val0, 1, "term_v");


    ok_v = LLVMBuildIsNotNull(builder, term_v, "ok_v");

    LLVMBuildCondBr(builder, ok_v, term_b, cont_b);


    LLVMPositionBuilderAtEnd(builder, term_b);


    LLVMBuildRetVoid(builder);


    LLVMPositionBuilderAtEnd(builder, cont_b);


    bbl_b = LLVMAppendBasicBlock(f, "bbl_b");
    fin_b = LLVMAppendBasicBlock(f, "fin_b");


    bblock = LLVMBuildLoad(builder, bblock_v, "bblock");

    bb_v = LLVMBuildIsNotNull(builder, bblock, "bb_v");

    LLVMBuildCondBr(builder, bb_v, fin_b, bbl_b);


    LLVMPositionBuilderAtEnd(builder, bbl_b);


    v_store(builder_v, val0);

    cur_bv = LLVMBuildCall(builder, llvm_get_insert_block_f, val0, 1, "cur_bv");


    llvm_get_basic_block_parent_f = v_obtain_function("LLVMGetBasicBlockParent");

    v_store(cur_bv, val0);

    fun_v = LLVMBuildCall(builder, llvm_get_basic_block_parent_f, val0, 1, "fun_v");


    llvm_append_basic_block_f = v_obtain_function("LLVMAppendBasicBlock");

    fin_bb_str = LLVMBuildGlobalStringPtr(builder, "fin_bb", "fin_bb_str");

    v_store(fun_v,      val0);
    v_store(fin_bb_str, val1);

    fin_bb_v = LLVMBuildCall(builder, llvm_append_basic_block_f, val0, 2, "fin_bb_v");

    LLVMBuildStore(builder, fin_bb_v, bblock_v);


    LLVMBuildBr(builder, fin_b);


    LLVMPositionBuilderAtEnd(builder, fin_b);

    v_add_variable("builder",  LLVMBuilderRef, builder_v);
    v_add_variable("bblock_v", bblock_ptr,     bblock_v);
}
{
    bblock = v_load(bblock_v);

    LLVMBuildBr(builder, bblock);
}


//---------------------------------------------------------------------
//- compile_ast_stmt_if_then_else_join_helper
//---------------------------------------------------------------------
//- fun compile_ast_stmt_if_then_else_join_helper(bblock: LLVMBasicBlockRef)
//- {
//-     if (bblock) {}
//-     else
//-     {
//-         v_return();
//-     }
//-
//-     ...
//-
//---------------------------------------------------------------------
{
    typ = v_alloca(v_type_ptr);

    v_store(LLVMBasicBlockRef, typ);

    ft = v_function_type(void, typ, 1, false);

    //-----------------------------------------------------------------
    f = v_function_hack("compile_ast_stmt_if_then_else_join_helper", ft);

    bblock = v_add_parameter_name(f, 0, "bblock", LLVMBasicBlockRef);


    builder = v_target_get_voidc_builder();


    then_b = LLVMAppendBasicBlock(f, "then_b");
    else_b = LLVMAppendBasicBlock(f, "else_b");


    ok_v = LLVMBuildIsNull(builder, bblock, "ok_v");

    LLVMBuildCondBr(builder, ok_v, then_b, else_b);


    LLVMPositionBuilderAtEnd(builder, then_b);

    LLVMBuildRetVoid(builder);


    LLVMPositionBuilderAtEnd(builder, else_b);
}
{
    builder = v_target_get_builder();

    LLVMPositionBuilderAtEnd(builder, bblock);
}


//---------------------------------------------------------------------
//- compile_ast_stmt_if_then_else_t - visitor method
//---------------------------------------------------------------------
{
    //-----------------------------------------------------------------
    f = v_function_hack("compile_ast_stmt_if_then_else_t", method_ft);

    v_add_parameter_name(f, 0, "visitor",   voidc_visitor_ptr);
    v_add_parameter_name(f, 1, "aux",       void_ptr);
    v_add_parameter_name(f, 2, "condition", v_ast_argument_ptr);
    v_add_parameter_name(f, 3, "stmt_then", v_ast_stmt_ptr);
    v_add_parameter_name(f, 4, "stmt_else", v_ast_stmt_ptr);
}
{
    builder = v_target_get_builder();

    base_cond = v_cast(condition, v_ast_base_ptr);

    v_ast_accept_visitor(base_cond, visitor, aux);

    cond_a = v_get_argument_value(0);

    cond = LLVMBuildIsNotNull(builder, cond_a, "cond");

    cur_b = LLVMGetInsertBlock(builder);
    fun_v = LLVMGetBasicBlockParent(cur_b);

    then_b = LLVMAppendBasicBlock(fun_v, "then_b");
    else_b = LLVMAppendBasicBlock(fun_v, "else_b");

    LLVMBuildCondBr(builder, cond, then_b, else_b);

    v_clear_arguments();

    bblock_v = v_alloca(LLVMBasicBlockRef);
    v_store(0, bblock_v);

    LLVMPositionBuilderAtEnd(builder, then_b);

    compile_ast_stmt_if_then_else_branch_helper(visitor, aux, stmt_then, bblock_v);

    LLVMPositionBuilderAtEnd(builder, else_b);

    compile_ast_stmt_if_then_else_branch_helper(visitor, aux, stmt_else, bblock_v);

    bblock = v_load(bblock_v);

    compile_ast_stmt_if_then_else_join_helper(bblock);
}


//---------------------------------------------------------------------
//- Enable statement if_then_else
//---------------------------------------------------------------------
//- fun voidc_enable_statement_if_then_else()
//- {
//-     vhg = voidc_has_grammar();
//-
//-     if (vhg)
//-     {
//-         ghp = voidc_grammar_has_parser("stmt_if_then_else");
//-
//-         if (ghp)  v_return();
//-     }
//-     else
//-     {
//-         v_return();
//-     }
//-
//-     ...
//-
//---------------------------------------------------------------------
{
    ft = v_function_type(void, 0, 0, false);

    //-----------------------------------------------------------------
    f = v_function_hack("voidc_enable_statement_if_then_else", ft);


    builder = v_target_get_voidc_builder();


    has_grammar_f = v_obtain_function("voidc_has_grammar");

    vhg_v = LLVMBuildCall(builder, has_grammar_f, 0, 0, "vhg_v");

    return_b = LLVMAppendBasicBlock(f, "return_b");
    vhg_ok_b = LLVMAppendBasicBlock(f, "vhg_ok_b");

    LLVMBuildCondBr(builder, vhg_v, vhg_ok_b, return_b);


    LLVMPositionBuilderAtEnd(builder, return_b);

    LLVMBuildRetVoid(builder);


    LLVMPositionBuilderAtEnd(builder, vhg_ok_b);


    has_parser_f = v_obtain_function("voidc_grammar_has_parser");

    val0 = v_alloca(LLVMValueRef);

    name = LLVMBuildGlobalStringPtr(builder, "stmt_if_then_else", "name");

    v_store(name, val0);

    ghp_v = LLVMBuildCall(builder, has_parser_f, val0, 1, "ghp_v");

    work_b = LLVMAppendBasicBlock(f, "work_b");

    LLVMBuildCondBr(builder, ghp_v, return_b, work_b);


    LLVMPositionBuilderAtEnd(builder, work_b);
}
{
    pp0 = v_alloca(v_peg_opaque_parser_sptr, 16);
    v_initialize(pp0, 16);

    pp1 = v_getelementptr(pp0, 1);
    pp2 = v_getelementptr(pp0, 2);
    pp3 = v_getelementptr(pp0, 3);
    pp4 = v_getelementptr(pp0, 4);
    pp5 = v_getelementptr(pp0, 5);
    pp6 = v_getelementptr(pp0, 6);
    pp7 = v_getelementptr(pp0, 7);
    pp8 = v_getelementptr(pp0, 8);
    pp9 = v_getelementptr(pp0, 9);
    pp10 = v_getelementptr(pp0, 10);
    pp11 = v_getelementptr(pp0, 11);
    pp12 = v_getelementptr(pp0, 12);
    pp13 = v_getelementptr(pp0, 13);
    pp14 = v_getelementptr(pp0, 14);
    pp15 = v_getelementptr(pp0, 15);


    //-----------------------------------------------------------------
    //- stmt_if_then_else <- "if" _ '(' _ cond:arg _ ')' _ then:stmt _
    //-                      "else" !ident_cont _ else:stmt             { mk_stmt_if_then_else(cond, then, else) }
    //-                    / "if" _ '(' _ cond:arg _ ')' _ then:stmt    { mk_stmt_if_then_else(cond, then, 0) }

    v_peg_make_literal_parser(pp1, "if");

    v_peg_make_identifier_parser(pp2, "_");
    v_peg_make_character_parser(pp3, '(');
    v_peg_make_identifier_parser(pp4, "_");

    v_peg_make_identifier_parser(pp5, "arg");
    v_peg_make_catch_variable_parser(pp5, "cond", pp5);

    v_peg_make_identifier_parser(pp6, "_");
    v_peg_make_character_parser(pp7, ')');
    v_peg_make_identifier_parser(pp8, "_");

    v_peg_make_identifier_parser(pp9, "stmt");
    v_peg_make_catch_variable_parser(pp9, "then", pp9);


    v_peg_make_identifier_parser(pp10, "_");
    v_peg_make_literal_parser(pp11, "else");
    v_peg_make_identifier_parser(pp12, "ident_cont");
    v_peg_make_not_parser(pp12, pp12);
    v_peg_make_identifier_parser(pp13, "_");

    v_peg_make_identifier_parser(pp14, "stmt");
    v_peg_make_catch_variable_parser(pp14, "else", pp14);


    ar0 = v_alloca(v_peg_opaque_argument_sptr, 3);
    v_initialize(ar0, 3);

    ar1 = v_getelementptr(ar0, 1);
    ar2 = v_getelementptr(ar0, 2);

    v_peg_make_identifier_argument(ar0, "cond");
    v_peg_make_identifier_argument(ar1, "then");
    v_peg_make_identifier_argument(ar2, "else");


    act = v_alloca(v_peg_opaque_action_sptr);
    v_initialize(act);

    v_peg_make_call_action(act, "mk_stmt_if_then_else", ar0, 3);

    v_peg_make_action_parser(pp15, act);


    v_peg_make_sequence_parser(pp0, pp1, 15);


    v_peg_make_integer_argument(ar2, 0);

    v_peg_make_call_action(act, "mk_stmt_if_then_else", ar0, 3);

    v_peg_make_action_parser(pp10, act);


    v_peg_make_sequence_parser(pp1, pp1, 10);


    v_peg_make_choice_parser(pp0, pp0, 2);


    gr0 = v_alloca(v_peg_opaque_grammar_sptr);
    v_initialize(gr0);

    v_peg_get_grammar(gr0);


    v_peg_grammar_set_action(gr0, gr0, "mk_stmt_if_then_else", mk_stmt_if_then_else_grammar_action);

    v_peg_grammar_set_parser(gr0, gr0, "stmt_if_then_else", pp0, 0);


    v_peg_make_identifier_parser(pp0, "stmt_if_then_else");


    v_peg_grammar_get_parser(gr0, "stmt", pp1, 0);

    v_peg_choice_parser_concat(pp0, pp0, pp1);

    v_peg_grammar_set_parser(gr0, gr0, "stmt", pp0, 0);


    v_peg_set_grammar(gr0);


    void_method = v_cast(compile_ast_stmt_if_then_else_t, void_ptr);

    voidc_visitor_set_void_method(voidc_compiler, voidc_compiler, quark, void_method);

    v_terminate(gr0);
    v_terminate(act);
    v_terminate(ar0, 3);
    v_terminate(pp0, 16);
}


//---------------------------------------------------------------------
{
    v_make_function_private("voidc_ast_stmt_if_then_else_destroy");
    v_make_function_private("voidc_ast_stmt_if_then_else_accept");
    v_make_global_private("voidc_ast_stmt_if_then_else_vtable");
    v_make_function_private("mk_stmt_if_then_else_grammar_action");
    v_make_function_private("compile_ast_stmt_if_then_else_branch_helper");
    v_make_function_private("compile_ast_stmt_if_then_else_join_helper");
    v_make_function_private("compile_ast_stmt_if_then_else_t");
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{
    module = v_get_module();

    //-----------------------------------------------------------------
//  v_debug_print_module();

    voidc_prepare_module_for_jit(module);

    //-----------------------------------------------------------------
    PH = v_alloca(LLVMOrcModuleHandle);

    LLVMOrcAddEagerlyCompiledIR(voidc_jit, PH, module,
                                voidc_resolver, 0
                               );

    //-----------------------------------------------------------------
    v_set_module(0);
}


//---------------------------------------------------------------------
{
    v_make_symbol_global("v_ast_make_stmt_if_then_else");
    v_make_symbol_global("voidc_enable_statement_if_then_else");
}


