//---------------------------------------------------------------------
//- Copyright (C) 2020-2025 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------

//- Imports ------------------------------------------------
{
    voidc_import("prelude.void");

    v_export_import("Types.void");
}

//- Values -------------------------------------------------
{
    _int = v_find_type("int");
    llvm_int = v_type_get_llvm_type(_int);

    val = LLVMConstInt(llvm_int, 0, 0);
    v_export_constant("LLVMAbortProcessAction", _int, val);

    val = LLVMConstInt(llvm_int, 1, 0);
    v_export_constant("LLVMPrintMessageAction", _int, val);

    val = LLVMConstInt(llvm_int, 2, 0);
    v_export_constant("LLVMReturnStatusAction", _int, val);

}

//- Types --------------------------------------------------
{
    v0_int = v_find_type("int");
    v_export_type("LLVMVerifierFailureAction", v0_int);

}

//- Functions ----------------------------------------------
{
    arg0 = v_alloca(v_type_ptr, 3);
    arg1 = v_getelementptr(arg0, 1);
    arg2 = v_getelementptr(arg0, 2);

    v0_LLVMModuleRef = v_find_type("LLVMModuleRef");
    v_store(v0_LLVMModuleRef, arg0);
    v1_LLVMVerifierFailureAction = v_find_type("LLVMVerifierFailureAction");
    v_store(v1_LLVMVerifierFailureAction, arg1);
    v2_char = v_find_type("char");
    v3 = v_pointer_type(v2_char, 0);
    v4 = v_pointer_type(v3, 0);
    v_store(v4, arg2);
    v5_LLVMBool = v_find_type("LLVMBool");
    v6 = v_function_type(v5_LLVMBool, arg0, 3, false);
    v_export_symbol_type("LLVMVerifyModule", v6);

    v7_LLVMValueRef = v_find_type("LLVMValueRef");
    v_store(v7_LLVMValueRef, arg0);
    v_store(v1_LLVMVerifierFailureAction, arg1);
    v8 = v_function_type(v5_LLVMBool, arg0, 2, false);
    v_export_symbol_type("LLVMVerifyFunction", v8);

    v_store(v7_LLVMValueRef, arg0);
    v9_void = v_find_type("void");
    v10 = v_function_type(v9_void, arg0, 1, false);
    v_export_symbol_type("LLVMViewFunctionCFG", v10);

    v_store(v7_LLVMValueRef, arg0);
    v11 = v_function_type(v9_void, arg0, 1, false);
    v_export_symbol_type("LLVMViewFunctionCFGOnly", v11);

}

