{   v_import("voidc_target.void");
    v_import("voidc_types.void");
    v_import("voidc_util.void");
    v_import("voidc_ast.void");
    v_import("voidc_quark.void");
    v_import("voidc_visitor.void");
    v_import("vpeg_parser.void");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{
    pp0 = v_alloca(v_peg_parser_t, 2);
    v_initialize(pp0, 2);

    pp1 = v_getelementptr(pp0, 1);

    v_peg_make_dot_parser(pp0);

    v_peg_make_not_parser(pp0, pp0);

    v_copy(pp1, pp0);
    v_move(pp0, pp1);

    v_terminate(pp0);
}

{   a = v_alloca(v_std_any_t);
    v_initialize(a);

    v_std_any_set_value(a, 13);

    p = v_std_any_get_pointer(int, a);

    v = v_load(p);

    printf("v: %d\n", v);

    p = v_alloca(intptr_t);
    v_store(17, p);

    v_std_any_set_pointer(a, p);

    p = v_std_any_get_pointer(intptr_t, a);

    v = v_load(p);

    printf("v: %ld\n", v);

    v_terminate(a);
}

{   a = v_alloca(v_std_any_t);
    v_initialize(a);

    p = v_alloca(char32_t);
    v_store('Ы', p);

    v_std_any_set_pointer(a, p);

    v_terminate(a);
}

{   str0 = v_alloca(v_std_string_t, 2);
    v_initialize(str0, 2);

    str1 = v_getelementptr(str0, 1);

    v_std_string_set(str0, "Превед ");

    v_std_string_append(str0, "медвед!");

    s = v_std_string_get(str0);

    printf("s: %s\n", s);

    v_copy(str1, str0);

    s = v_std_string_get(str1);

    printf("s: %s\n", s);

    v_terminate(str0, 2);
}

{   ft = v_function_type(uint64_t, 0, 0, false);
    v_export_symbol_type("llvm.readcyclecounter", ft);

    v_export_alias("llvm_readcyclecounter", "llvm.readcyclecounter");
}

{ v_debug_print_module(1);}
{   v0 = llvm_readcyclecounter();
    v1 = llvm_readcyclecounter();

    printf("\n%llu\n%llu\n", v0, v1);
}


//---------------------------------------------------------------------
//- AST generic...
//---------------------------------------------------------------------
{   v_add_symbol("init_f",   v_ast_generic_init_fun_t,   0);
    v_add_symbol("term_f",   v_ast_generic_term_fun_t,   0);
    v_add_symbol("vtable_g", v_ast_generic_vtable,       0);
}

//---------------------------------------------------------------------
{   module = LLVMModuleCreateWithName("ast_tests_mod");

    v_set_module(module);

    builder = v_target_get_voidc_builder();

    val0 = v_alloca(LLVMValueRef, 4);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);
    val3 = v_getelementptr(val0, 3);


    init_f = v_obtain_function("init_f");
    LLVMSetLinkage(init_f, LLVMPrivateLinkage);

    entry = LLVMAppendBasicBlock(init_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);

    printf_ft_ = v_type_get_llvm_type(v_find_symbol_type("printf"));
    printf_f   = v_obtain_function("printf");

    str = LLVMBuildGlobalStringPtr(builder, "init!\n", "str");

    v_store(str, val0);

    LLVMBuildCall2(builder, printf_ft_, printf_f, val0, 1, "");

    LLVMBuildRetVoid(builder);


    term_f = v_obtain_function("term_f");
    LLVMSetLinkage(term_f, LLVMPrivateLinkage);

    entry = LLVMAppendBasicBlock(term_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);

    printf_f = v_obtain_function("printf");

    str = LLVMBuildGlobalStringPtr(builder, "term!\n", "str");

    v_store(str, val0);

    LLVMBuildCall2(builder, printf_ft_, printf_f, val0, 1, "");

    LLVMBuildRetVoid(builder);


    //-------------------------------------------------------------
    LLVMClearInsertionPosition(builder);


    //-------------------------------------------------------------
    quark = v_quark_from_string("Just test");

    quark_v = LLVMConstInt(v_type_get_llvm_type(v_quark_t), quark, 0);

    v_store(init_f,   val0);
    v_store(term_f,   val1);
    v_store(quark_v,  val2);

    v_ast_generic_vtable_ = v_type_get_llvm_type(v_ast_generic_vtable);

    vtable_v = LLVMConstNamedStruct(v_ast_generic_vtable_, val0, 3);

    vtable_g = v_obtain_global("vtable_g");

    LLVMSetInitializer(vtable_g, vtable_v);


    //-------------------------------------------------------------
    msg = LLVMPrintModuleToString(module);

    printf("\n%s\n", msg);

    LLVMDisposeMessage(msg);

    voidc_add_module_to_jit(module);

    LLVMDisposeModule(module);
    v_set_module(0);
}

{   printf("\n");

    gen = v_alloca(v_ast_base_t);
    v_initialize(gen);

    v_ast_make_generic(gen, vtable_g, 0);


    vis = v_alloca(voidc_visitor_t);
    v_initialize(vis);


//  v_ast_accept_visitor(gen, vis);



    //- ...

    v_terminate(vis);
    v_terminate(gen);
}


//---------------------------------------------------------------------
//- Quarks
//---------------------------------------------------------------------
{   printf("\n");

    q = v_quark_from_string("");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);

    q = v_quark_from_string("Some string");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);

    q = v_quark_from_string("Another string");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);

}

{   printf("\n");

    q = v_quark_from_string("Another string");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);

    q = v_quark_from_string("Some string");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);

    q = v_quark_from_string("");
    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);

}

{   printf("\n");

    q = v_cast(v_ast_expr_identifier_visitor_method_tag, v_quark_t);

    s = v_quark_to_string(q);

    printf("quark: %d - [%s] %p\n", q, s, s);
}


{   printf("\n");

    str = "Some test string";

    printf("try: %d = [%s] %p\n", v_quark_try_string(str), str, v_intern_try_string(str));

    s = v_intern_string(str);

    printf("intern: [%s] %p\n", s, s);

    printf("try: %d = [%s] %p\n", v_quark_try_string(s), s, v_intern_try_string(s));
}


