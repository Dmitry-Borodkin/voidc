{   v_import("voidc_target.void");
    v_import("voidc_types.void");
    v_import("voidc_util.void");
    v_import("vpeg_parser.void");
    v_import("vpeg_grammar.void");
    v_import("vpeg_context.void");

    v_import("llvm-c/Core.void");
    v_import("llvm-c/Analysis.void");
}

{   v_import("printf.void"); }


{   typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(v_std_any_ptr, typ0);
    v_store(v_std_any_ptr, typ1);
    v_store(size_t,        typ2);

    my_echo_ft = v_function_type(void, typ0, 3, false);

    v_export_symbol_type("my_echo_grammar_action", my_echo_ft);
}


{   module = LLVMModuleCreateWithName("my_echo_mod");

    v_set_module(module);

    bool_ = v_type_get_llvm_type(bool);

    builder = v_target_get_voidc_builder();

    my_echo_f = v_obtain_function("my_echo_grammar_action");

    entry = LLVMAppendBasicBlock(my_echo_f, "entry");

    LLVMPositionBuilderAtEnd(builder, entry);


    get_string_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_util_std_any_get_pointer_std_string_impl"));
    get_string_f   = v_obtain_function("v_util_std_any_get_pointer_std_string_impl");

    par1 = LLVMGetParam(my_echo_f, 1);

    val0 = v_alloca(LLVMValueRef, 2);
    val1 = v_getelementptr(val0, 1);

    v_store(par1, val0);

    pstr = LLVMBuildCall2(builder, get_string_ft_, get_string_f, val0, 1, "pstr");


    get_c_str_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_std_string_get"));
    get_c_str_f   = v_obtain_function("v_std_string_get");

    v_store(pstr, val0);

    str = LLVMBuildCall2(builder, get_c_str_ft_, get_c_str_f, val0, 1, "str");


    printf_ft_ = v_type_get_llvm_type(v_find_symbol_type("printf"));
    printf_f   = v_obtain_function("printf");

    str0 = LLVMBuildGlobalStringPtr(builder, "my_echo: %s", "str0");

    v_store(str0, val0);
    v_store(str,  val1);

    LLVMBuildCall2(builder, printf_ft_, printf_f, val0, 2, "");


    set_value_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_util_std_any_set_value_bool_impl"));
    set_value_f   = v_obtain_function("v_util_std_any_set_value_bool_impl");

    par0 = LLVMGetParam(my_echo_f, 0);

    v_store(par0, val0);

    true_ = LLVMConstInt(bool_, 1, 0);

    v_store(true_, val1);

    LLVMBuildCall2(builder, set_value_ft_, set_value_f, val0, 2, "");


    LLVMBuildRetVoid(builder);

    LLVMClearInsertionPosition(builder);

    //-----------------------------------------------------------------
//    msg = LLVMPrintModuleToString(module);
//
//    printf("\n%s\n", msg);
//
//    LLVMDisposeMessage(msg);

    voidc_unit_load_module_to_jit(module);
    voidc_add_module_to_jit(module);

    LLVMDisposeModule(module);
    v_set_module(0);
}

{   gr0 = v_alloca(v_peg_opaque_grammar_sptr);
    v_initialize(gr0);

    v_peg_get_grammar(gr0);


    v_peg_grammar_set_action(gr0, gr0, "my_echo", my_echo_grammar_action);


    pp0 = v_alloca(v_peg_opaque_parser_sptr, 2);
    v_initialize(pp0, 2);

    pp1 = v_getelementptr(pp0, 1);

    v_peg_grammar_get_parser(gr0, "comment", pp0, 0);


    arg = v_alloca(v_peg_opaque_argument_sptr);
    v_initialize(arg);

    v_peg_make_backref_argument(arg, 0, v_peg_backref_argument_kind_string);


    act = v_alloca(v_peg_opaque_action_sptr);
    v_initialize(act);

    v_peg_make_call_action(act, "my_echo", arg, 1);

    v_peg_make_action_parser(pp1, act);


    v_peg_make_sequence_parser(pp0, pp0, 2);


    v_peg_grammar_set_parser(gr0, gr0, "comment", pp0, 0);


    v_peg_set_grammar(gr0);


    v_terminate(act);
    v_terminate(arg);
    v_terminate(pp0, 2);
    v_terminate(gr0);
}


//---------------------------------------------------------------------
//- It works !!!
//---------------------------------------------------------------------

{   printf("\nHello world!\n\n"); }

//═════════════════════════════════════════════════════════════════════
//- And now for something completely different!
//═════════════════════════════════════════════════════════════════════






