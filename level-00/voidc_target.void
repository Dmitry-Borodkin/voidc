//---------------------------------------------------------------------
//- Copyright (C) 2020-2023 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("voidc_target.void  must be imported into the voidc target only!"); }

//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 2);
    typ1 = v_getelementptr(typ0, 1);

    v_store(v_type_ptr, typ0);              //- Element type
    v_store(unsigned,   typ1);              //- Address space

    ft = v_function_type(v_type_ptr, typ0, 2, false);
    v_add_symbol("v_pointer_type", ft, 0);
}

{   typ0 = v_alloca(v_type_ptr, 2);
    typ1 = v_getelementptr(typ0, 1);

    char_ptr = v_pointer_type(char, 0);

    v_store(char_ptr,   typ0);              //- Symbol name
    v_store(v_type_ptr, typ1);              //- Symbol type

    ft = v_function_type(void, typ0, 2, false);
    v_add_symbol("v_export_symbol_type", ft, 0);
}

{   typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    void_ptr = v_pointer_type(void, 0);
    char_ptr = v_pointer_type(char, 0);

    v_store(char_ptr,   typ0);              //- Symbol name
    v_store(v_type_ptr, typ1);              //- Symbol type

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_export_symbol_type", ft);

//  v_store(char_ptr, typ0);                //- Symbol name
    v_store(void_ptr, typ1);                //- Symbol value (for "linker")

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_export_symbol_value", ft);

//  v_store(char_ptr,    typ0);             //- Symbol name
    v_store(v_type_ptr,  typ1);             //- Symbol type
    v_store(void_ptr,    typ2);             //- Symbol value

    ft = v_function_type(void, typ0, 3, false);
    v_export_symbol_type("v_export_symbol", ft);
//  v_export_symbol_type("v_add_symbol", ft);

//  v_store(char_ptr,    typ0);             //- Type name
//  v_store(v_type_ptr,  typ1);             //- Type

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_export_type", ft);
    v_export_symbol_type("v_add_type", ft);

//  v_store(char_ptr, typ0);                //- Struct name

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_add_symbol("v_struct_type_named", ft, 0);
}


//---------------------------------------------------------------------
{   typ = v_alloca(v_type_ptr);

    v_store(unsigned, typ);                 //- Width

    ft = v_function_type(v_type_ptr, typ, 1, false);
    v_add_symbol("v_uint_type", ft, 0);
}

{   v_add_type("void_ptr", v_pointer_type(void, 0));
    v_add_type("char_ptr", v_pointer_type(char, 0));
}


//---------------------------------------------------------------------
{   voidc_visitor_ptr = v_pointer_type(voidc_visitor_t, 0);

    ft = v_function_type(voidc_visitor_ptr, 0, 0, false);
    v_export_symbol_type("v_get_compiler", ft);
}


//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(v_quark_t,  typ0);              //- Symbol name quark
    v_store(v_type_ptr, typ1);              //- Symbol type
    v_store(void_ptr,   typ2);              //- Symbol value

    ft = v_function_type(void, typ0, 3, false);
    v_export_symbol_type("v_export_symbol_q", ft);
    v_export_symbol_type("v_add_symbol_q", ft);

//  v_store(v_quark_t,  typ0);              //- Symbol name quark
//  v_store(v_type_ptr, typ1);              //- Symbol type

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_export_symbol_type_q", ft);

//  v_store(v_quark_t, typ0);               //- Symbol name quark
    v_store(void_ptr,  typ1);               //- Symbol value (for "linker")

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_export_symbol_value_q", ft);

//  v_store(v_quark_t,  typ0);              //- Type name quark
    v_store(v_type_ptr, typ1);              //- Type

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_export_type_q", ft);
    v_export_symbol_type("v_add_type_q", ft);
}


//---------------------------------------------------------------------
{   opaque_value_t = v_struct_type_named("struct.LLVMOpaqueValue");
    value_ref = v_pointer_type(opaque_value_t, 0);
    v_export_type("LLVMValueRef", value_ref);

    opaque_context_t = v_struct_type_named("struct.LLVMOpaqueContext");
    context_ref = v_pointer_type(opaque_context_t, 0);
    v_export_type("LLVMContextRef", context_ref);

    opaque_module_t = v_struct_type_named("struct.LLVMOpaqueModule");
    module_ref = v_pointer_type(opaque_module_t, 0);
    v_export_type("LLVMModuleRef", module_ref);

    opaque_builder_t = v_struct_type_named("struct.LLVMOpaqueBuilder");
    builder_ref = v_pointer_type(opaque_builder_t, 0);
    v_export_type("LLVMBuilderRef", builder_ref);

    opaque_membuf_t = v_struct_type_named("struct.LLVMOpaqueMemoryBuffer");
    membuf_ref = v_pointer_type(opaque_membuf_t, 0);
    v_export_type("LLVMMemoryBufferRef", membuf_ref);

    opaque_layout_t = v_struct_type_named("struct.LLVMOpaqueTargetData");
    layout_ref = v_pointer_type(opaque_layout_t, 0);
    v_export_type("LLVMTargetDataRef", layout_ref);
}

{   typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(void_ptr, typ0);                //- ctx

    om_ft = v_function_type(LLVMModuleRef, typ0, 1, false);

    void_ptr_ptr = v_pointer_type(void_ptr, 0);
    om_ft_ptr    = v_pointer_type(om_ft, 0);

    v_store(void_ptr_ptr, typ0);            //- ctx

    ft = v_function_type(om_ft_ptr, typ0, 1, false);
    v_export_symbol_type("v_get_obtain_module", ft);

    v_store(om_ft_ptr, typ0);               //- fun
    v_store(void_ptr,  typ1);               //- ctx

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_set_obtain_module", ft);

    ft = v_function_type(LLVMModuleRef, typ0, 0, false);
    v_export_symbol_type("v_obtain_module", ft);

    v_store(void_ptr,      typ0);           //- ctx
    v_store(LLVMModuleRef, typ1);           //- module

    fm_ft = v_function_type(void, typ0, 2, false);

    fm_ft_ptr = v_pointer_type(fm_ft, 0);

    v_store(void_ptr_ptr, typ0);            //- ctx

    ft = v_function_type(fm_ft_ptr, typ0, 1, false);
    v_export_symbol_type("v_get_finish_module", ft);

    v_store(fm_ft_ptr, typ0);               //- fun
    v_store(void_ptr,  typ1);               //- ctx

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_set_finish_module", ft);

    v_store(LLVMModuleRef, typ0);           //- module

    ft = v_function_type(void, typ0, 1, false);
    v_export_symbol_type("v_finish_module", ft);

    v_type_ptr_ptr   = v_pointer_type(v_type_ptr, 0);
    LLVMValueRef_ptr = v_pointer_type(LLVMValueRef, 0);

    v_store(char_ptr,         typ0);        //- Name
    v_store(v_type_ptr_ptr,   typ1);        //- Type
    v_store(LLVMValueRef_ptr, typ2);        //- Value

    ft = v_function_type(bool, typ0, 3, false);
    v_export_symbol_type("v_obtain_identifier", ft);

    v_store(v_quark_t,        typ0);        //- Name quark
//  v_store(v_type_ptr_ptr,   typ1);        //- Type
//  v_store(LLVMValueRef_ptr, typ2);        //- Value

    ft = v_function_type(bool, typ0, 3, false);
    v_export_symbol_type("v_obtain_identifier_q", ft);

    v_store(v_type_ptr,   typ0);            //- Source type
    v_store(LLVMValueRef, typ1);            //- Source value
    v_store(v_type_ptr,   typ2);            //- Destination type

    ft = v_function_type(LLVMValueRef, typ0, 3, false);
    v_export_symbol_type("v_convert_to_type", ft);

    v_store(void_ptr,     typ0);            //- Context
    v_store(v_type_ptr,   typ1);            //- Source type
    v_store(LLVMValueRef, typ2);            //- Source value
    v_store(v_type_ptr,   typ3);            //- Destination type

    ctt_ft = v_function_type(LLVMValueRef, typ0, 4, false);

    ctt_ft_ptr = v_pointer_type(ctt_ft, 0);

    v_store(void_ptr_ptr, typ0);            //- ctx

    ft = v_function_type(ctt_ft_ptr, typ0, 1, false);
    v_export_symbol_type("v_get_convert_to_type", ft);

    v_store(ctt_ft_ptr,   typ0);            //- fun
    v_store(void_ptr,     typ1);            //- ctx

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_set_convert_to_type", ft);

    v_store(char_ptr,     typ0);            //- Constant/variable name
    v_store(v_type_ptr,   typ1);            //- Constant/variable type
    v_store(LLVMValueRef, typ2);            //- Constant/variable value

    ft = v_function_type(void, typ0, 3, false);
    v_export_symbol_type("v_export_constant", ft);
    v_export_symbol_type("v_add_constant",    ft);
    v_export_symbol_type("v_add_variable",    ft);

//  v_store(char_ptr, typ0);                //- Constant/variable name

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_export_symbol_type("v_get_variable_type", ft);
    v_export_symbol_type("v_find_constant_type", ft);

//  v_store(char_ptr, typ0);                //- Constant/variable name

    ft = v_function_type(LLVMValueRef, typ0, 1, false);
    v_export_symbol_type("v_get_variable_value", ft);
    v_export_symbol_type("v_find_constant_value", ft);

    v_store(v_quark_t,    typ0);            //- Constant/variable name quark
//  v_store(v_type_ptr,   typ1);            //- Constant/variable type
//  v_store(LLVMValueRef, typ2);            //- Constant/variable value

    ft = v_function_type(void, typ0, 3, false);
    v_export_symbol_type("v_export_constant_q", ft);
    v_export_symbol_type("v_add_constant_q",    ft);
    v_export_symbol_type("v_add_variable_q",    ft);

//  v_store(v_quark_t, typ0);               //- Constant/variable name quark

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_export_symbol_type("v_get_variable_type_q", ft);
    v_export_symbol_type("v_find_constant_type_q", ft);

//  v_store(v_quark_t, typ0);               //- Constant/variable name quark

    ft = v_function_type(LLVMValueRef, typ0, 1, false);
    v_export_symbol_type("v_get_variable_value_q", ft);
    v_export_symbol_type("v_find_constant_value_q", ft);

    t_ptr = v_pointer_type(v_type_ptr, 0);
    v_ptr = v_pointer_type(LLVMValueRef, 0);

    v_store(char_ptr, typ0);                //- Constant/variable name
    v_store(t_ptr,    typ1);                //- For type
    v_store(v_ptr,    typ2);                //- For value

    ft = v_function_type(bool, typ0, 3, false);
    v_export_symbol_type("v_get_variable", ft);
    v_export_symbol_type("v_find_constant", ft);

//  v_store(char_ptr, typ0);                //- Symbol name

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_export_symbol_type("v_find_symbol_type", ft);

    ft = v_function_type(void_ptr, typ0, 1, false);
    v_export_symbol_type("v_find_symbol_value", ft);

//  v_store(char_ptr, typ0);                //- Type(!) name

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_export_symbol_type("v_find_type", ft);

    v_store(v_quark_t, typ0);               //- Constant/variable name quark
//  v_store(t_ptr,     typ1);               //- For type
//  v_store(v_ptr,     typ2);               //- For value

    ft = v_function_type(bool, typ0, 3, false);
    v_export_symbol_type("v_get_variable_q", ft);
    v_export_symbol_type("v_find_constant_q", ft);

//  v_store(v_quark_t, typ0);               //- Symbol name quark

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_export_symbol_type("v_find_symbol_type_q", ft);

    ft = v_function_type(void_ptr, typ0, 1, false);
    v_export_symbol_type("v_find_symbol_value_q", ft);

//  v_store(v_quark_t, typ0);               //- Type(!) name quark

    ft = v_function_type(v_type_ptr, typ0, 1, false);
    v_export_symbol_type("v_find_type_q", ft);

    v_store(char_ptr, typ0);                //- Alias name
    v_store(char_ptr, typ1);                //- Aliasee

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_export_alias", ft);
    v_export_symbol_type("v_add_alias",    ft);

    v_store(v_quark_t, typ0);               //- Alias name quark
    v_store(v_quark_t, typ1);               //- Aliasee quark

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_export_alias_q", ft);
    v_export_symbol_type("v_add_alias_q",    ft);

    v_store(v_type_ptr,   typ0);            //- type
    v_store(LLVMValueRef, typ1);            //- value

    ft = v_function_type(LLVMValueRef, typ0, 2, false);
    v_export_symbol_type("v_make_temporary", ft);

    v_store(void_ptr,     typ0);            //- Context
    v_store(v_type_ptr,   typ1);            //- type
    v_store(LLVMValueRef, typ2);            //- value

    mt_ft = v_function_type(LLVMValueRef, typ0, 3, false);

    mt_ft_ptr = v_pointer_type(mt_ft, 0);

    v_store(void_ptr_ptr, typ0);            //- ctx

    ft = v_function_type(mt_ft_ptr, typ0, 1, false);
    v_export_symbol_type("v_get_make_temporary", ft);

    v_store(mt_ft_ptr,    typ0);            //- fun
    v_store(void_ptr,     typ1);            //- ctx

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_set_make_temporary", ft);

    v_store(int, typ0);                     //- Number of prints/modules...

    ft = v_function_type(void, typ0, 1, false);
    v_export_symbol_type("v_debug_print_module", ft);

    v_store(bool, typ0);                    //- ...

    ft = v_function_type(void, typ0, 1, false);
    v_export_symbol_type("voidc_verify_jit_module_optimized", ft);

    v_store(int, typ0);                     //- line
    v_store(int, typ1);                     //- column

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("voidc_prepare_unit_action", ft);

    v_store(char_ptr,   typ0);              //- Function name
    v_store(v_type_ptr, typ1);              //- Function type

    ft = v_function_type(LLVMValueRef, typ0, 2, false);
    v_export_symbol_type("v_prepare_function", ft);

    ft = v_function_type(void, 0, 0, false);
    v_export_symbol_type("voidc_finish_unit_action", ft);
    v_export_symbol_type("voidc_flush_unit_symbols", ft);
    v_export_symbol_type("v_clear_variables", ft);
    v_export_symbol_type("v_save_variables", ft);
    v_export_symbol_type("v_restore_variables", ft);
    v_export_symbol_type("v_push_temporaries", ft);
    v_export_symbol_type("v_pop_temporaries", ft);
    v_export_symbol_type("v_finish_function", ft);
    v_export_symbol_type("v_save_builder_ip", ft);
    v_export_symbol_type("v_restore_builder_ip", ft);

    ft = v_function_type(LLVMValueRef, 0, 0, false);
    v_export_symbol_type("v_get_temporaries_front", ft);

    ft = v_function_type(size_t, 0, 0, false);
    v_export_symbol_type("v_get_variables_size", ft);

    ft = v_function_type(LLVMModuleRef, 0, 0, false);
    v_export_symbol_type("v_get_module", ft);

    v_store(LLVMModuleRef, typ0);           //-

    ft = v_function_type(void, typ0, 1, false);
    v_export_symbol_type("v_set_module", ft);
    v_export_symbol_type("v_verify_module", ft);
    v_export_symbol_type("voidc_prepare_module_for_jit", ft);
    v_export_symbol_type("voidc_add_module_to_jit", ft);
    v_export_symbol_type("voidc_add_local_module_to_jit", ft);

//  v_store(LLVMModuleRef, typ0);           //-
    v_store(bool,          typ1);           //- do_load

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("voidc_unit_load_module_to_jit", ft);
    v_export_symbol_type("voidc_unit_load_local_module_to_jit", ft);

//  v_store(LLVMModuleRef, typ0);           //-
//  v_store(bool,          typ1);           //- is_local
    v_store(bool,          typ2);           //- do_load

    ft = v_function_type(void, typ0, 3, false);
    v_export_symbol_type("voidc_compile_load_module_to_jit", ft);

    v_store(LLVMMemoryBufferRef, typ0);     //-

    ft = v_function_type(void, typ0, 1, false);
    v_export_symbol_type("voidc_add_object_file_to_jit", ft);
    v_export_symbol_type("voidc_add_local_object_file_to_jit", ft);
    v_export_symbol_type("voidc_set_unit_buffer", ft);

//  v_store(LLVMMemoryBufferRef, typ0);     //-
//  v_store(bool,                typ1);     //- do_load

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("voidc_unit_load_object_file_to_jit", ft);
    v_export_symbol_type("voidc_unit_load_local_object_file_to_jit", ft);

//  v_store(LLVMModuleRef, typ0);           //-
//  v_store(bool,          typ1);           //- is_local
//  v_store(bool,          typ2);           //- do_load

    ft = v_function_type(void, typ0, 3, false);
    v_export_symbol_type("voidc_compile_load_object_file_to_jit", ft);


    ft = v_function_type(LLVMMemoryBufferRef, 0, 0, false);
    v_export_symbol_type("voidc_get_unit_buffer", ft);

    ft = v_function_type(v_type_ptr, 0, 0, false);
    v_export_symbol_type("v_get_result_type", ft);

    ft = v_function_type(LLVMValueRef, 0, 0, false);
    v_export_symbol_type("v_get_result_value", ft);

    v_store(v_type_ptr, typ0);              //-

    ft = v_function_type(void, typ0, 1, false);
    v_export_symbol_type("v_set_result_type", ft);

    v_store(LLVMValueRef, typ0);            //-

    ft = v_function_type(void, typ0, 1, false);
    v_export_symbol_type("v_set_result_value", ft);

    v_store(v_type_ptr,   typ0);            //-
    v_store(LLVMValueRef, typ1);            //-

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_adopt_result", ft);

    v_store(void_ptr,     typ0);            //- Context
    v_store(v_type_ptr,   typ1);            //- Type
    v_store(LLVMValueRef, typ2);            //- Value

    ar_ft = v_function_type(void, typ0, 3, false);

    ar_ft_ptr = v_pointer_type(ar_ft, 0);

    v_store(void_ptr_ptr, typ0);            //- ctx

    ft = v_function_type(ar_ft_ptr, typ0, 1, false);
    v_export_symbol_type("v_get_adopt_result", ft);

    v_store(ar_ft_ptr,    typ0);            //- fun
    v_store(void_ptr,     typ1);            //- ctx

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_set_adopt_result", ft);
}


//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    visitor_ptr = v_pointer_type(voidc_visitor_t, 0);
    base_ptr    = v_pointer_type(v_ast_base_t, 0);

    v_store(visitor_ptr, typ0);             //- visitor
    v_store(void_ptr,    typ1);             //- aux
    v_store(base_ptr,    typ2);             //- self (AST)

    intrinsic_t = v_function_type(void, typ0, 3, false);
    v_export_type("voidc_intrinsic_t", intrinsic_t);
    v_export_type("voidc_visitor_method_t", intrinsic_t);       //- Sic!?!

    v_store(char_ptr, typ0);                //- Intrinsic name
    v_store(void_ptr, typ1);                //- Intrinsic function
    v_store(void_ptr, typ2);                //- aux

    ft = v_function_type(void, typ0, 3, false);
    v_export_symbol_type("v_export_intrinsic", ft);
    v_export_symbol_type("v_add_intrinsic",    ft);

    v_store(v_quark_t, typ0);               //- Intrinsic name quark
//  v_store(void_ptr,  typ1);               //- Intrinsic function
//  v_store(void_ptr,  typ2);               //- aux

    ft = v_function_type(void, typ0, 3, false);
    v_export_symbol_type("v_export_intrinsic_q", ft);
    v_export_symbol_type("v_add_intrinsic_q",    ft);

    void_ptr_ptr = v_pointer_type(void_ptr, 0);

    v_store(char_ptr,     typ0);            //- Intrinsic name
    v_store(void_ptr_ptr, typ1);            //- aux

    ft = v_function_type(void_ptr, typ0, 2, false);
    v_export_symbol_type("v_get_intrinsic", ft);

    v_store(v_quark_t,    typ0);            //- Intrinsic name quark
//  v_store(void_ptr_ptr, typ1);            //- aux

    ft = v_function_type(void_ptr, typ0, 2, false);
    v_export_symbol_type("v_get_intrinsic_q", ft);
}


//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 2);
    typ1 = v_getelementptr(typ0, 1);

    v_store(void_ptr, typ0);

    fun_t = v_function_type(void, typ0, 1, false);

    fun_ptr = v_pointer_type(fun_t, 0);

    v_store(fun_ptr,  typ0);
    v_store(void_ptr, typ1);

    ft = v_function_type(void, typ0, 2, false);

    v_export_symbol_type("v_add_cleaner", ft);
    v_export_symbol_type("v_add_local_cleaner", ft);
    v_export_symbol_type("v_add_temporary_cleaner", ft);
}


//---------------------------------------------------------------------
{   ft = v_function_type(LLVMContextRef, 0, 0, false);
    v_export_symbol_type("v_target_get_voidc_llvm_ctx", ft);
    v_export_symbol_type("v_target_get_llvm_ctx", ft);
}

{   g_ctx = v_struct_type_named("v_target_global_ctx_t");
    l_ctx = v_struct_type_named("v_target_local_ctx_t");

    v_export_type("v_target_global_ctx_t", g_ctx);
    v_export_type("v_target_local_ctx_t",  l_ctx);

    g_ptr = v_pointer_type(g_ctx, 0);
    l_ptr = v_pointer_type(l_ctx, 0);

    v_export_type("v_target_global_ctx_ptr", g_ptr);
    v_export_type("v_target_local_ctx_ptr",  l_ptr);
}

{   typ0 = v_alloca(v_type_ptr, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    ft = v_function_type(v_target_global_ctx_ptr, 0, 0, false);
    v_export_symbol_type("v_target_get_voidc_global_ctx", ft);
    v_export_symbol_type("v_target_get_global_ctx", ft);

    v_store(v_target_global_ctx_ptr, typ0);         //-

    ft = v_function_type(void, typ0, 1, false);
    v_export_symbol_type("v_target_set_global_ctx", ft);
    v_export_symbol_type("v_target_destroy_global_ctx", ft);

    v_store(size_t, typ0);                          //- sizeof(int)
    v_store(size_t, typ1);                          //- sizeof(long)
    v_store(size_t, typ2);                          //- sizeof(intptr_t)

    ft = v_function_type(v_target_global_ctx_ptr, typ0, 3, false);
    v_export_symbol_type("v_target_create_global_ctx", ft);

    v_store(char_ptr,                typ0);         //- Source file name (kind of...)
    v_store(v_target_global_ctx_ptr, typ1);         //- Parent global context

    ft = v_function_type(v_target_local_ctx_ptr, typ0, 2, false);
    v_export_symbol_type("v_target_create_local_ctx", ft);

    ft = v_function_type(v_target_local_ctx_ptr, 0, 0, false);
    v_export_symbol_type("v_target_get_local_ctx", ft);
    v_export_symbol_type("v_target_get_voidc_local_ctx", ft);

    v_store(v_target_local_ctx_ptr, typ0);          //-

    ft = v_function_type(void, typ0, 1, false);
    v_export_symbol_type("v_target_destroy_local_ctx", ft);

    ft = v_function_type(char_ptr, typ0, 1, false);
    v_export_symbol_type("v_target_local_ctx_get_filename", ft);

    ft = v_function_type(LLVMBuilderRef, 0, 0, false);
    v_export_symbol_type("v_target_get_voidc_builder", ft);
    v_export_symbol_type("v_target_get_builder", ft);

    ft = v_function_type(LLVMTargetDataRef, 0, 0, false);
    v_export_symbol_type("v_target_get_voidc_data_layout", ft);
    v_export_symbol_type("v_target_get_data_layout", ft);

    v_store(LLVMTargetDataRef, typ0);               //-

    ft = v_function_type(void, typ0, 1, false);
    v_export_symbol_type("v_target_set_data_layout", ft);

    ft = v_function_type(bool, 0, 0, false);
    v_export_symbol_type("v_target_local_ctx_has_parent", ft);
}

{   type = v_struct_type_named("struct.LLVMOpaqueTargetMachine");
    v_export_symbol_type("voidc_target_machine", type);

    type = v_struct_type_named("struct.LLVMOpaquePassManager");
    v_export_symbol_type("voidc_pass_manager", type);
}


