//---------------------------------------------------------------------
//- Copyright (C) 2020-2023 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("vpeg_context.void  must be imported into the voidc target only!");

    v_import("voidc_target.void");
    v_import("voidc_types.void");
    v_import("voidc_util.void");
    v_import("voidc_quark.void");

    v_import("vpeg_parser.void");
    v_import("vpeg_grammar.void");

    v_import("llvm-c/Core.void");
}


//---------------------------------------------------------------------
{   v_util_register_itcmep_impl(v_peg_context_t, "v_peg", "context");
}

//---------------------------------------------------------------------
{   context_ptr = v_pointer_type(v_peg_context_t, 0);
    v_export_type("v_peg_context_ptr", context_ptr);
}

//---------------------------------------------------------------------
{   typ0 = v_alloca(v_type_ptr, 4);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);
    typ3 = v_getelementptr(typ0, 3);

    v_store(v_peg_grammar_ptr, typ0);

    ft = v_function_type(void, typ0, 1, false);
    v_export_symbol_type("v_peg_get_grammar", ft);
    v_export_symbol_type("v_peg_set_grammar", ft);

    v_store(v_peg_context_ptr, typ0);

    ft = v_function_type(void, typ0, 1, false);
    v_export_symbol_type("v_peg_get_context", ft);
    v_export_symbol_type("v_peg_set_context", ft);

    void_ptr = v_pointer_type(void, 0);

    v_store(void_ptr, typ0);

    fgetc_fun_t   = v_function_type(int, typ0, 1, false);
    fgetc_fun_ptr = v_pointer_type(fgetc_fun_t, 0);

    v_store(v_peg_context_ptr, typ0);
    v_store(fgetc_fun_ptr,     typ1);
    v_store(void_ptr,          typ2);
    v_store(v_peg_grammar_ptr, typ3);

    ft = v_function_type(void, typ0, 4, false);
    v_export_symbol_type("v_peg_make_context", ft);

    v_store(v_std_any_ptr, typ0);
    v_store(v_quark_t,     typ1);

    ft = v_function_type(void, typ0, 2, false);
    v_export_symbol_type("v_peg_parse", ft);

    size_t_ref = v_reference_type(size_t, 0);

    v_store(size_t,     typ0);
    v_store(size_t_ref, typ1);
    v_store(size_t_ref, typ2);

    ft = v_function_type(void, typ0, 3, false);
    v_export_symbol_type("v_peg_get_line_column", ft);
}

//---------------------------------------------------------------------
{   has_grammar_ft = v_function_type(bool, 0, 0, false);

    typ = v_alloca(v_type_ptr);

    char_ptr = v_pointer_type(char, 0);

    v_store(char_ptr, typ);

    has_parser_ft = v_function_type(bool, typ, 1, false);

    v_export_symbol_type("voidc_has_grammar",        has_grammar_ft);
    v_export_symbol_type("voidc_grammar_has_parser", has_parser_ft);
}


//---------------------------------------------------------------------
//- vpeg_context.void support module
//---------------------------------------------------------------------
{
    module = LLVMModuleCreateWithName("vpeg_context_void_module");

    v_set_module(module);

    val0 = v_alloca(LLVMValueRef, 4);
    val1 = v_getelementptr(val0, 1);
    val2 = v_getelementptr(val0, 2);
    val3 = v_getelementptr(val0, 3);

    char_ptr = v_pointer_type(char, 0);
    int_ptr  = v_pointer_type(int,  0);

    int_ = v_type_get_llvm_type(int);

    n1 = LLVMConstInt(int_, 1, 0);

    int_ptr_ = v_type_get_llvm_type(int_ptr);

    v_peg_grammar_t_ = v_type_get_llvm_type(v_peg_grammar_t);
    v_peg_parser_t_  = v_type_get_llvm_type(v_peg_parser_t);

    //-----------------------------------------------------------------
    builder = v_target_get_voidc_builder();


    //-----------------------------------------------------------------
    //- bool voidc_has_grammar(void)
    //-----------------------------------------------------------------
    has_grammar_f = v_obtain_function("voidc_has_grammar");

    entry = LLVMAppendBasicBlock(has_grammar_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);

    grm = LLVMBuildAlloca(builder, v_peg_grammar_t_, "grm");

    grammar_init_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_peg_initialize_grammar_impl"));
    grammar_init_f   = v_obtain_function("v_peg_initialize_grammar_impl");

    v_store(grm, val0);
    v_store(n1,  val1);

    LLVMBuildCall2(builder, grammar_init_ft_, grammar_init_f, val0, 2, "");

    get_grammar_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_peg_get_grammar"));
    get_grammar_f   = v_obtain_function("v_peg_get_grammar");

    LLVMBuildCall2(builder, get_grammar_ft_, get_grammar_f, val0, 1, "");

    grammar_empty_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_peg_empty_grammar_impl"));
    grammar_empty_f   = v_obtain_function("v_peg_empty_grammar_impl");

    nok = LLVMBuildCall2(builder, grammar_empty_ft_, grammar_empty_f, val0, 1, "nok");

    ok = LLVMBuildNot(builder, nok, "ok");

    grammar_term_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_peg_terminate_grammar_impl"));
    grammar_term_f   = v_obtain_function("v_peg_terminate_grammar_impl");

//  v_store(grm, val0);
//  v_store(n1,  val1);

    LLVMBuildCall2(builder, grammar_term_ft_, grammar_term_f, val0, 2, "");

    LLVMBuildRet(builder, ok);


    //-----------------------------------------------------------------
    //- bool voidc_grammar_has_parser(const char *name)
    //-----------------------------------------------------------------
    has_parser_f = v_obtain_function("voidc_grammar_has_parser");

    name = LLVMGetParam(has_parser_f, 0);

    entry = LLVMAppendBasicBlock(has_parser_f, "entry");
    LLVMPositionBuilderAtEnd(builder, entry);


    gr0 = LLVMBuildAlloca(builder, v_peg_grammar_t_, "gr0");

    v_store(gr0, val0);
    v_store(n1,  val1);

    LLVMBuildCall2(builder, grammar_init_ft_, grammar_init_f, val0, 2, "");

    LLVMBuildCall2(builder, get_grammar_ft_, get_grammar_f, val0, 1, "");


    get_parser_ft_ = v_type_get_llvm_type(v_find_symbol_type("v_peg_grammar_get_parser"));
    get_parser_f   = v_obtain_function("v_peg_grammar_get_parser");

    ip0 = LLVMConstNull(int_ptr_);

    v_store(gr0,  val0);
    v_store(name, val1);
    v_store(ip0,  val2);


    pp = LLVMBuildCall2(builder, get_parser_ft_, get_parser_f, val0, 3, "");


    ok = LLVMBuildIsNotNull(builder, pp, "ok");


    v_store(gr0, val0);
    v_store(n1,  val1);

    LLVMBuildCall2(builder, grammar_term_ft_, grammar_term_f, val0, 2, "");


    LLVMBuildRet(builder, ok);


    //-----------------------------------------------------------------
//  v_debug_print_module(1);

    voidc_unit_load_module_to_jit(module, true);

    LLVMDisposeModule(module);
    v_set_module(0);
}


