{   v_import("voidc_target.void");
    v_import("voidc_types.void");

    v_import("if_then_else.void");
    v_import("block.void");
    v_import("loop.void");
    v_import("expression.void");

    v_import("definitions.void");
}

{   voidc_enable_statement_if_then_else();
    voidc_enable_statement_block();
    voidc_enable_statement_loop();
    voidc_enable_expression();

    voidc_enable_definitions();
}

{   v_import("printf.void"); }


{   v_import("def_import_test.void"); }



//---------------------------------------------------------------------
{   buf = v_alloca(char, 100);

    N = 20;

    i: &int := 0;

    loop
    {
        if (i >= N) v_break();

        sprintf(buf, "sin(%d): %g", i, sin(i));

        printf("buf: \"%s\"\n", buf);

        ++i;
    }


    j: &int := 0;

    i := 0;

    loop
    {
        if (i >= N) v_break();

        foo(qwerty, i, j);

        printf("qwerty - i: %d, j: %d\n", i, j);

        ++i;
    }
}


//---------------------------------------------------------------------
//double = float(64);         //- Sic!

{   v: &int := 1;

    d = (2*v : double);

    q = d/7 + v;

    printf("\nq: %.99g\n", q);
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    printf("\n%d\n", (2+2));

    v: & * char := "a";

    printf("v: %s\n", v);
}


//---------------------------------------------------------------------
{
    printf("\n");

    printf("c0: %d\n", c0);
    printf("c1: %d\n", c1);

    printf("c2: %ld\n", c2);

    printf("c3: %d == %d\n", c3, 'Ы');
}


//---------------------------------------------------------------------
{ v_debug_print_module(1); }
{
    printf("\n");

    t: int = True;          //- WTF ?!?!?!?
    f: int = False;         //- WTF ?!?!?!?

    printf("t: %d\n", t);
    printf("f: %d\n", f);
}


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    printf("\n");

    printf("v0: %d\n", v0);


    a0[1] += 2;

    printf("a0[0]: %d\n", a0[0]);
    printf("a0[1]: %d\n", a0[1]);


    printf("s0: %s\n", s0);


    t0[0] := 888;

    printf("t0[0]: %d\n", t0[0]);


    z0v = z0[5][4][3][2][1][0];

    i: &int := 0;

    loop
    {
        if (i >= 512)   v_break();

        z0v[i] += i;

        ++i;
    }

    printf("z0[5][4][3][2][1][0][511]: %d\n", (z0[5][4][3][2][1][0][511]: int));


//  printf("zz: %f\n", zz);
}


//---------------------------------------------------------------------
utf8_symbols: &char[4][2][2] := v_undef();

strncpy: (dst: *char, src: *const char, count: size_t) -> *char;


//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    strncpy(&utf8_symbols[0][0][0], " ", 2);        //- space

    strncpy(&utf8_symbols[0][1][0], "▀", 4);        //- upper half

    strncpy(&utf8_symbols[1][0][0], "▄", 4);        //- lower half

    strncpy(&utf8_symbols[1][1][0], "█", 4);        //- full block
}


//---------------------------------------------------------------------
LLEN = 128;
NUMS = 2 + 1*2*3*4*5*6;

f_buf: &bool[2][LLEN] := v_undef();

//---------------------------------------------------------------------
//{ v_debug_print_module(1); }
{
    n: &int := 1;
    i: &int := v_undef();

    loop
    {
        if (n > NUMS)   v_break();

        p = n & 1;

        i := 0;

        loop
        {
            if (i >= LLEN)  v_break();
            if (i > n)      v_break();

            f_buf[i][p] := (n%(i+1) == 0);

            ++i;
        }

        if (p)
        {
            i := 0;

            loop
            {
                if (i >= LLEN)  v_break();
                if (i > n)      v_break();

                f0: int(2) = f_buf[i][0];       //- WTF?
                f1: int(2) = f_buf[i][1];       //- WTF?

                s = &utf8_symbols[f1][f0][0];

                printf("%s", s);

                ++i;
            }

            printf("\n");
        }

        ++n;
    }
}


