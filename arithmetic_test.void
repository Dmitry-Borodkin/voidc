{   v_import("arithmetic.void");

    v_import("block.void");
    v_import("if_then_else.void");
}

{   voidc_enable_statement_block();
    voidc_enable_statement_if_then_else();
}


{
    v = v_binop(LLVMAdd, 1, 1);
    v = v_binop(LLVMMul, v, v);

    printf("%d\n", v);

    c = v_icmp(LLVMIntUGT, v, 5);

    vc = v_cast(LLVMZExt, c, int);

    printf("%d\n", vc);
}


{   double = LLVMDoubleType();

    v_add_local_symbol("double", LLVMOpaqueType, double);
}

{   f1 = v_cast(LLVMUIToFP, 1, double);

    v = v_binop(LLVMFAdd, f1, f1);
    v = v_binop(LLVMFMul, v, v);

    printf("%f\n", v);

    c = v_fcmp(LLVMRealUGT, v, f1);

    vc = v_cast(LLVMZExt, c, int);

    printf("%d\n", vc);


}


//---------------------------------------------------------------------
//- int fib_helper(int v0, int v1, int n);
//---------------------------------------------------------------------
{   typ0 = v_alloca(LLVMTypeRef, 3);
    typ1 = v_getelementptr(typ0, 1);
    typ2 = v_getelementptr(typ0, 2);

    v_store(int, typ0);
    v_store(int, typ1);
    v_store(int, typ2);

    ft = LLVMFunctionType(int, typ0, 3, 0);

    f = v_function_hack("fib_helper", ft);

    p0 = LLVMGetParam(f, 0);    v_add_variable("v0", p0);
    p1 = LLVMGetParam(f, 1);    v_add_variable("v1", p1);
    p2 = LLVMGetParam(f, 2);    v_add_variable("n",  p2);
}
{
    if (n)
    {
        v2 = v_binop(LLVMAdd, v0, v1);

        n1 = v_binop(LLVMSub, n, 1);

        ret = fib_helper(v1, v2, n1);

        v_return(ret);
    }
    else
    {
        v_return(v1);
    }
}

//---------------------------------------------------------------------
//- int fib(int n);
//---------------------------------------------------------------------
{   typ0 = v_alloca(LLVMTypeRef);

    v_store(int, typ0);

    ft = LLVMFunctionType(int, typ0, 1, 0);

    f = v_function_hack("fib", ft);

    p0 = LLVMGetParam(f, 0);    v_add_variable("n", p0);
}
{
    ret = fib_helper(1, 0, n);      //- Sic!

    v_return(ret);
}


//---------------------------------------------------------------------
{
    n = v_cast(LLVMZExt, 46, int);

    v = fib(n);

    printf("fib(%d): %d\n", n, v);
}



