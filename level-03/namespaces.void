//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("namespaces.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("intrinsics_derive.void");
    v_import("local_objects.void");
    v_import("heap_objects.void");
    v_import("global_objects.void");
    v_import("coercions.void");

//  v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();

    voidc_enable_intrinsics_derive();
    voidc_enable_local_objects();
    voidc_enable_heap_objects();
    voidc_enable_global_objects();
    voidc_enable_coercions();
}


//=====================================================================
qf_export  = voidc_definitions_internal_qf_export;      //- 1 << 0
qf_private = voidc_definitions_internal_qf_private;     //- 1 << 1

NAMESPACE_SEPARATOR: char32_t = 0x1F;       //- "Unit Separator"...

//---------------------------------------------------------------------
{
    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("enabled_q", q_ref, q("voidc.internal.namespaces_enabled"));

    v_add_symbol("unit_namespace_open_q", q_ref, q("unit_namespace_open"));
    v_add_symbol("unit_defn_close_q",     q_ref, q("unit_defn_close"));
    v_add_symbol("unit_defn_using_q",     q_ref, q("unit_defn_using"));
    v_add_symbol("q_stmt_using",          q_ref, q("v.stmt_using"));
    v_add_symbol("unit_fun_defn_q",       q_ref, q("unit_fun_defn"));
    v_add_symbol("unit_var_defn_q",       q_ref, q("unit_var_defn"));
    v_add_symbol("unit_val_defn_q",       q_ref, q("unit_val_defn"));
    v_add_symbol("expr_struct_q",         q_ref, q("expr_struct"));
    v_add_symbol("expr_union_q",          q_ref, q("expr_union"));

    v_add_symbol("q_op_postfix_dot", q_ref, q("v.op_postfix_dot"));

    v_add_symbol("q_current_namespace_list",  q_ref, q("v.current_namespace_list"));
    v_add_symbol("q_current_namespace_stack", q_ref, q("v.current_namespace_stack"));
    v_add_symbol("q_current_namespace_used",  q_ref, q("v.current_namespace_used"));

    v_add_symbol("voidc_compile_quark_q", q_ref, q("voidc.compile_quark"));

    v_add_symbol("q_static_namespace_t", q_ref, q("v_static_namespace_t"));

    v_add_symbol("q_find_constant_value_q", q_ref, q("v_find_constant_value_q"));
    v_add_symbol("q_export_constant_q",     q_ref, q("v_export_constant_q"));
    v_add_symbol("q_add_constant_q",        q_ref, q("v_add_constant_q"));
    v_add_symbol("q_export_effort",         q_ref, q("v_export_effort"));
    v_add_symbol("q_add_effort",            q_ref, q("v_add_effort"));
    v_add_symbol("q_cast",                  q_ref, q("v_cast"));

    v_add_symbol("quark_q", q_ref, q("quark"));
    v_add_symbol("qname_q", q_ref, q("qname"));
    v_add_symbol("value_q", q_ref, q("value"));

    v_add_symbol("voidc_abstract_static_constant_q", q_ref, q("voidc.abstract_static_constant"));

    v_add_symbol("voidc_abstract_static_namespace_intrinsic_q", q_ref, q("voidc.abstract_static_namespace_intrinsic"));

    v_add_type("void_ptr", v_pointer_type(void, 0));
}

//---------------------------------------------------------------------
{   t = v_generic_type(q_static_namespace_t, 0, 0);

    v_export_type_q(q_static_namespace_t, t);
}


//=====================================================================
{   voidc_unit_begin_module("namespaces_module"); }


//---------------------------------------------------------------------
export
struct v_namespace_t
{
    name:   v_quark_t;              //- Own "global" name...

    prefix: v_std_string_t;         //- ...

    list:   v_util_list_t;          //- Names in "textual" order
    map:    v_util_map_t;           //- Names -> "global" names...

    used:   v_util_list_t;          //- Used namespaces
};


//---------------------------------------------------------------------
export
(v_initialize(_)): (p: *v_namespace_t, n: size_t) ~> void
{
    for (i: &size_t := 0; i < n; ++i)
    {
        p_i = p[i];

        v_initialize(&p_i.prefix);
        v_initialize(&p_i.list);
        v_initialize(&p_i.map);
        v_initialize(&p_i.used);

        v_make_list_nil(&p_i.list);
        v_make_map(&p_i.map);
        v_make_list_nil(&p_i.used);
    }
}

export
(v_terminate(_)): (p: *v_namespace_t, n: size_t) ~> void  =  derive;

export
(v_copy(_)): (d: *v_namespace_t, s: *const v_namespace_t, n: size_t) ~> void  =  derive;        //- ?

//---------------------------------------------------------------------
private
namespace_cleaner: (void_ctx: *void) ~> void
{
    delete (void_ctx: *v_namespace_t);
}


//---------------------------------------------------------------------
//- Grammar actions ...
//---------------------------------------------------------------------
private
mk_unit_namespace_open_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    qualif = v_std_any_get_value(intptr_t, any+0);
    expr   = v_std_any_get_pointer(v_ast_expr_t, any+1);

    ast: &v_ast_expr_t := {};

    v_ast_make_expr_integer(&ast, qualif);

    list: &v_ast_generic_list_t := {};

    v_make_list(&list, unit_namespace_open_q, &ast);

    v_list_append(&list, &list, expr);

    v_std_any_set_pointer(ret, (&list: *v_ast_base_t));
}

//---------------------------------------------------------------------
private
mk_unit_defn_close_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    list: &v_ast_generic_list_t := {};

    v_make_list_nil(&list, unit_defn_close_q);

    v_std_any_set_pointer(ret, (&list: *v_ast_base_t));
}

//---------------------------------------------------------------------
private
mk_using_stmt_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    flag = v_std_any_get_value(intptr_t, any+0);
    expr = v_std_any_get_pointer(v_ast_expr_t, any+1);

    elst: &v_ast_expr_list_t := {};

    eflg: &v_ast_expr_t := {};

    v_ast_make_expr_integer(&eflg, flag);

    v_make_list(&elst, &eflg);

    v_list_append(&elst, &elst, expr);

    v_std_any_set_pointer(ret, &elst);
}

//---------------------------------------------------------------------
private
mk_unit_defn_using_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    qualif = v_std_any_get_value(intptr_t, any+0);
    elst   = v_std_any_get_pointer(v_ast_expr_list_t, any+1);

    ast: &v_ast_expr_t := {};

    v_ast_make_expr_integer(&ast, qualif);

    list: &v_ast_generic_list_t := {};

    v_make_list(&list, unit_defn_using_q, &ast);

    v_list_append(&list, &list, v_list_get_item(elst, 0));
    v_list_append(&list, &list, v_list_get_item(elst, 1));

    v_std_any_set_pointer(ret, (&list: *v_ast_base_t));
}

//---------------------------------------------------------------------
private
mk_stmt_using_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    elst = v_std_any_get_pointer(v_ast_expr_list_t, any);

    expr: &v_ast_expr_t := {};

    v_ast_make_expr_identifier_q(&expr, q_stmt_using);

    v_ast_make_expr_call(&expr, &expr, elst);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt(&stmt, "", &expr);

    v_std_any_set_pointer(ret, &stmt);
}

//---------------------------------------------------------------------
private
mk_dot_identifier_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    istr = v_std_any_get_pointer(v_std_string_t, any);

    sstr: &v_std_string_t := {};

    v_std_string_set(&sstr, "v..");

    v_std_string_append(&sstr, v_std_string_get(istr));

    expr: &v_ast_expr_t := {};

    v_ast_make_expr_identifier(&expr, v_std_string_get(&sstr));

    v_std_any_set_pointer(ret, &expr);
}

//---------------------------------------------------------------------
private
mk_qlf_ident_expr_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    qualif = v_std_any_get_value(intptr_t, any+0);

    expr = v_std_any_get_pointer(v_ast_expr_t, any+1);

    ast: &v_ast_base_t[2] := {};

    v_ast_make_expr_integer((ast+0 : *v_ast_expr_t), qualif);

    v_copy(ast+1, expr);

    lst: &v_ast_generic_list_t := {};

    v_make_list(&lst, 0, ast, 2);

    v_std_any_set_pointer(ret, &lst);
}

//---------------------------------------------------------------------
private
mk_stmt_expr_var_decl_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) ~> void
{
    ename = v_std_any_get_pointer(v_ast_expr_t, any+0);
    etype = v_std_any_get_pointer(v_ast_expr_t, any+1);

    elst: &v_ast_expr_list_t := {};

    v_make_list(&elst, ename);

    v_list_append(&elst, &elst, etype);

    etmp: &v_ast_expr_t := {};

    v_ast_make_expr_identifier(&etmp, "v.internal.expr_var_decl");

    v_ast_make_expr_call(&etmp, &etmp, &elst);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_q(&stmt, 0, &etmp);

    v_std_any_set_pointer(ret, &stmt);
}


//---------------------------------------------------------------------
//- Compile methods ...
//---------------------------------------------------------------------

//---------------------------------------------------------------------
export
voidc_unit_namespace_open_block_effort: (*void) ~> void
{
    anss = v_std_any_get_pointer(v_util_list_t, v_get_property_q(q_current_namespace_stack));

    v_list_append(anss, anss, v_get_property_q(q_current_namespace_list));
}

//---------------------------------------------------------------------
export
voidc_unit_namespace_open_item_effort: (aux: *void) ~> void
{
//printf("voidc_unit_namespace_open_item_effort start %s\n", v_quark_to_string((aux: v_quark_t)));
//defer printf("voidc_unit_namespace_open_item_effort stop\n");

    qns = v_lookup_alias_q((aux: v_quark_t));

    ns: &*v_namespace_t := (v_find_constant_value_q(qns) : *v_namespace_t);

    if (!ns)
    {
        ns := new v_namespace_t;

        v_add_local_cleaner(namespace_cleaner, ns);

        pref = &ns->prefix;

        a = v_get_property_q(q_current_namespace_list);

        l = v_std_any_get_pointer(v_util_list_t, a);

        if (s = v_list_get_size(l))
        {
            c = v_list_get_item(l, s-1);

            cur_ns = (v_std_any_get_value(intptr_t, c): *v_namespace_t);

            v_copy(pref, &cur_ns->prefix);

            v_std_string_append_char(pref, NAMESPACE_SEPARATOR);

            v_std_string_append(pref, v_quark_to_string(qns));

            sstr: &v_std_string_t := {};

            v_std_string_set(&sstr, "v__");

            voidc_internal_std_string_append_mangle(&sstr, pref);

            qm = v_quark_from_string(v_std_string_get(&sstr));

            a: &v_std_any_t := {};

            v_std_any_set_value(&a, qns);

            v_list_append(&cur_ns->list, &cur_ns->list, &a);

            v_std_any_set_value(&a, qm);

            v_map_insert(&cur_ns->map, &cur_ns->map, (qns: intptr_t), &a);

            ns->name := qm;
        }
        else
        {
            v_std_string_set(pref, v_quark_to_string(qns));

            ns->name := qns;
        }

        v_add_constant_q(qns, v_static_namespace_t, (ns: LLVMValueRef));
    }

    ansl = v_std_any_get_pointer(v_util_list_t, v_get_property_q(q_current_namespace_list));

    a: &v_std_any_t := {};

    v_std_any_set_value(&a, (ns: intptr_t));

    v_list_append(ansl, ansl, &a);
}

//---------------------------------------------------------------------
private
compile_unit_namespace_open: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("compile_unit_namespace_open start\n");
//defer printf("compile_unit_namespace_open stop\n");

    list = (self: *v_ast_generic_list_t);

    qualif = v_ast_expr_integer_get_number((v_list_get_item(list, 0) : *v_ast_expr_t));
    nsid   = (v_list_get_item(list, 1) : *v_ast_expr_t);

    N: &int := 0;

    for (e: &*v_ast_expr_t := nsid; ; ++N)
    {
        q = v_ast_base_get_visitor_method_tag(e);
        if (q != v_ast_expr_call_visitor_method_tag)  v_break();

        f = v_ast_expr_call_get_fun_expr(e);

        q = v_ast_base_get_visitor_method_tag(f);
        if (q != v_ast_expr_identifier_visitor_method_tag)  v_break();

        q = v_ast_expr_identifier_get_name_q(f);
        if (q != q_op_postfix_dot)  v_break();

        args = v_ast_expr_call_get_arg_list(e);

        e := v_list_get_item(args, 1);
    }

    etmp: &*v_ast_expr_t := nsid;

    qs = new v_quark_t[N+1];
    defer delete[] qs;

    for (i: &int := 0; i < N; ++i)
    {
        args = v_ast_expr_call_get_arg_list(etmp);

        op = v_list_get_item(args, 0);

        void_obj = v_ast_generic_get_object(op);

        obj = *(void_obj: *v_ast_operator_unary_t);

        pay = (&obj[2] : *v_ast_generic_list_t);

        expr = (v_list_get_item(pay, 0) : *v_ast_expr_t);

        qs[N-i] := v_ast_expr_identifier_get_name_q(expr);

        etmp := v_list_get_item(args, 1);
    }

    v_assert(v_ast_base_get_visitor_method_tag(etmp) == v_ast_expr_identifier_visitor_method_tag);      //- ?

    qs[0] := v_ast_expr_identifier_get_name_q(etmp);

    private_flag = v_get_private_flag();
    export_flag  = v_get_export_flag();

    private = private_flag  ||  qualif & qf_private;
    export  = (export_flag  ||  qualif & qf_export)  &&  !private;

    if (export) v_export_effort(voidc_unit_namespace_open_block_effort, 0);
    else        v_add_effort(voidc_unit_namespace_open_block_effort, 0);

    {   anss = v_std_any_get_pointer(v_util_list_t, v_get_property_q(q_current_namespace_stack));

        qfqf: &intptr_t := 0;

        qfqf |= private_flag << 0;      //- 0 - old private
        qfqf |= export_flag  << 1;      //- 1 - old export
        qfqf |= private      << 2;      //- 2 - new private
        qfqf |= export       << 3;      //- 3 - new export

        a: &v_std_any_t := {};

        v_std_any_set_value(&a, qfqf);

        v_list_append(anss, anss, &a);
    }

    for (i: &int := 0; i <= N; ++i)
    {
        q = (qs[i] : *void);

        if (export) v_export_effort(voidc_unit_namespace_open_item_effort, q);
        else        v_add_effort(voidc_unit_namespace_open_item_effort, q);
    }

    v_set_private_flag(private);
    v_set_export_flag(export);

    //-----------------------------------------------------------------
    stmt_list = voidc_definitions_context_get_stmt_list();
    if (!stmt_list)  v_return();

    expr: &v_ast_expr_t[3] := {};

    elst: &v_ast_expr_list_t := {};

    stmt: &v_ast_stmt_t := {};

    v_ast_make_expr_identifier(expr+0, "voidc_unit_namespace_open_block_effort");

    v_ast_make_expr_integer(expr+1, 0);

    if (export) v_ast_make_stmt_call(&stmt, 0, q_export_effort, expr, 2);
    else        v_ast_make_stmt_call(&stmt, 0, q_add_effort, expr, 2);

    v_list_append(stmt_list, stmt_list, &stmt);

    v_ast_make_expr_identifier(expr+0, "voidc_unit_namespace_open_item_effort");

    for (i: &int := 0; i <= N; ++i)
    {
        v_ast_make_expr_integer(expr+1, qs[i]);

        v_make_list(&elst, expr+1);

        v_ast_make_expr_identifier_q(expr+1, voidc_compile_quark_q);

        v_ast_make_expr_call(expr+1, expr+1, &elst);

        v_ast_make_expr_identifier(expr+2, "void");

        v_make_list(&elst, expr+2);

        v_ast_make_expr_integer(expr+2, 0);

        v_list_append(&elst, &elst, expr+2);

        v_ast_make_expr_identifier(expr+2, "v_ptr");

        v_ast_make_expr_call(expr+2, expr+2, &elst);

        v_make_list(&elst, expr+1, 2);

        v_ast_make_expr_identifier(expr+1, "v_cast");

        v_ast_make_expr_call(expr+1, expr+1, &elst);

        if (export) v_ast_make_stmt_call(&stmt, 0, q_export_effort, expr, 2);
        else        v_ast_make_stmt_call(&stmt, 0, q_add_effort, expr, 2);

        v_list_append(stmt_list, stmt_list, &stmt);
    }
}


//---------------------------------------------------------------------
export
voidc_unit_namespace_close_effort: (*void) ~> void
{
    anss = v_std_any_get_pointer(v_util_list_t, v_get_property_q(q_current_namespace_stack));

    i = v_list_get_size(anss) - 1;

    a = v_get_property_q(q_current_namespace_list);

    v_copy(a, v_list_get_item(anss, i));

    v_list_erase(anss, anss, i, 1);
}

//---------------------------------------------------------------------
private
compile_unit_defn_close: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("compile_unit_defn_close start\n");
//defer printf("compile_unit_defn_close stop\n");

    anss = v_std_any_get_pointer(v_util_list_t, v_get_property_q(q_current_namespace_stack));

    i = v_list_get_size(anss) - 1;

    qfqf = v_std_any_get_value(intptr_t, v_list_get_item(anss, i));

    v_list_erase(anss, anss, i, 1);

    private_flag = (qfqf & (1 << 0)) != 0;
    export_flag  = (qfqf & (1 << 1)) != 0;
    private      = (qfqf & (1 << 2)) != 0;
    export       = (qfqf & (1 << 3)) != 0;

    if (export) v_export_effort(voidc_unit_namespace_close_effort, 0);
    else        v_add_effort(voidc_unit_namespace_close_effort, 0);

    v_set_private_flag(private_flag);
    v_set_export_flag(export_flag);

    //-----------------------------------------------------------------
    stmt_list = voidc_definitions_context_get_stmt_list();
    if (!stmt_list)  v_return();

    expr: &v_ast_expr_t[2] := {};

    stmt: &v_ast_stmt_t := {};

    v_ast_make_expr_identifier(expr+0, "voidc_unit_namespace_close_effort");

    v_ast_make_expr_integer(expr+1, 0);

    if (export) v_ast_make_stmt_call(&stmt, 0, q_export_effort, expr, 2);
    else        v_ast_make_stmt_call(&stmt, 0, q_add_effort, expr, 2);

    v_list_append(stmt_list, stmt_list, &stmt);
}


//---------------------------------------------------------------------
export
voidc_unit_defn_using_namespace_effort: (aux: *void) ~> void
{
//printf("voidc_unit_defn_using_namespace_effort start %s\n", v_quark_to_string((aux: v_quark_t)));
//defer printf("voidc_unit_defn_using_namespace_effort stop\n");

    ns = (v_find_constant_value_q((aux: v_quark_t)) : *v_namespace_t);

    a: &v_std_any_t := {};

    v_std_any_set_value(&a, (ns: intptr_t));

    lst: &*v_util_list_t := 0;

    lst := v_std_any_get_pointer(v_util_list_t, v_get_property_q(q_current_namespace_list));

    if (s = v_list_get_size(lst))
    {
        r = v_list_get_item(lst, s-1);

        cur_ns = (v_std_any_get_value(intptr_t, r) : *v_namespace_t);

        lst := &cur_ns->used;
    }
    else
    {
        lst := v_std_any_get_pointer(v_util_list_t, v_get_property_q(q_current_namespace_used));
    }

    v_list_append(lst, lst, &a);
}

//---------------------------------------------------------------------
private
compile_unit_defn_using: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("compile_unit_defn_using start\n");
//defer printf("compile_unit_defn_using stop\n");

    list = (self: *v_ast_generic_list_t);

    qualif = v_ast_expr_integer_get_number((v_list_get_item(list, 0) : *v_ast_expr_t));
    flag   = v_ast_expr_integer_get_number((v_list_get_item(list, 1) : *v_ast_expr_t));
    expr   = (v_list_get_item(list, 2) : *v_ast_expr_t);

    private = v_get_private_flag()  ||  qualif & qf_private;
    export  = (v_get_export_flag()  ||  qualif & qf_export)  &&  !private;

    if (flag)       //- using namespace  <ns-id> ;
    {
        v_set_result_type(INVIOLABLE_TAG);
        v_set_result_value(0);

        v_ast_accept_visitor(expr, vis);

        t = v_get_result_type();
        v = v_get_result_value();

        v_assert(t == v_static_namespace_t);

        qvn = (v: *v_namespace_t)->name;

        if (export) v_export_effort(voidc_unit_defn_using_namespace_effort, (qvn: *void));
        else        v_add_effort(voidc_unit_defn_using_namespace_effort, (qvn: *void));

        //-------------------------------------------------------------
        stmt_list = voidc_definitions_context_get_stmt_list();
        if (!stmt_list)  v_return();

        expr: &v_ast_expr_t[3] := {};

        elst: &v_ast_expr_list_t := {};

        stmt: &v_ast_stmt_t := {};

        v_ast_make_expr_identifier(expr+0, "voidc_unit_defn_using_namespace_effort");

        v_ast_make_expr_integer(expr+1, qvn);

        v_make_list(&elst, expr+1);

        v_ast_make_expr_identifier_q(expr+1, voidc_compile_quark_q);

        v_ast_make_expr_call(expr+1, expr+1, &elst);

        v_ast_make_expr_identifier(expr+2, "void");

        v_make_list(&elst, expr+2);

        v_ast_make_expr_integer(expr+2, 0);

        v_list_append(&elst, &elst, expr+2);

        v_ast_make_expr_identifier(expr+2, "v_ptr");

        v_ast_make_expr_call(expr+2, expr+2, &elst);

        v_make_list(&elst, expr+1, 2);

        v_ast_make_expr_identifier(expr+1, "v_cast");

        v_ast_make_expr_call(expr+1, expr+1, &elst);

        if (export) v_ast_make_stmt_call(&stmt, 0, q_export_effort, expr, 2);
        else        v_ast_make_stmt_call(&stmt, 0, q_add_effort, expr, 2);

        v_list_append(stmt_list, stmt_list, &stmt);

        v_return();
    }

    //- using  <ns-id> . <id> ;

    list = v_ast_expr_call_get_arg_list(expr);

    op = v_list_get_item(list, 0);

    void_obj = v_ast_generic_get_object(op);

    obj = *(void_obj: *v_ast_operator_unary_t);

    pay = (&obj[2] : *v_ast_generic_list_t);

    eid = (v_list_get_item(pay, 0) : *v_ast_expr_t);

    ast: &v_ast_base_t[4] := {};

    qf: &intptr_t := 0;

    if (private)  qf |= qf_private;
    if (export)   qf |= qf_export;

    v_ast_make_expr_integer((ast+0 : *v_ast_expr_t), qf);

    v_copy((ast+1 : *v_ast_expr_t), eid);

    v_copy((ast+3 : *v_ast_expr_t), expr);

    lst: &v_ast_generic_list_t := {};

    v_make_list(&lst, unit_val_defn_q, ast, 4);

    v_ast_accept_visitor(&lst, vis);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
private
v_stmt_using_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("v_stmt_using_intrinsic start\n");
//defer printf("v_stmt_using_intrinsic stop\n");

    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    flag = v_ast_expr_integer_get_number(v_list_get_item(args, 0));
    expr = v_list_get_item(args, 1);

    if (flag)       //- using namespace  <ns-id> ;
    {
        v_push_temporaries();       //- ?

        v_set_result_type(INVIOLABLE_TAG);
        v_set_result_value(0);

        v_ast_accept_visitor(expr, vis);

        t = v_get_result_type();
        v = v_get_result_value();

        v_pop_temporaries();        //- ?

        v_assert(t == v_static_namespace_t);

        ns = (v: *v_namespace_t);

        a: &v_std_any_t := {};

        v_std_any_set_value(&a, (ns: intptr_t));

        lst = v_std_any_get_pointer(v_util_list_t, v_get_property_q(q_current_namespace_used));

        v_list_append(lst, lst, &a);

        v_return();
    }

    //- using  <ns-id> . <id> ;

    list = v_ast_expr_call_get_arg_list(expr);

    op = v_list_get_item(list, 0);

    void_obj = v_ast_generic_get_object(op);

    obj = *(void_obj: *v_ast_operator_unary_t);

    pay = (&obj[2] : *v_ast_generic_list_t);

    eid = (v_list_get_item(pay, 0) : *v_ast_expr_t);

    qname = v_ast_expr_identifier_get_name_q(eid);

    stmt: &v_ast_stmt_t := {};

    v_ast_make_stmt_q(&stmt, qname, expr);

    v_ast_accept_visitor(&stmt, vis);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
private
lookup_in_namespace: (cache: *v_util_map_t, ns: *v_namespace_t, q: v_quark_t) ~> v_quark_t
{
//printf("lookup_in_namespace start %s %s\n", v_quark_to_string(ns->name), v_quark_to_string(q));
//defer printf("lookup_in_namespace stop %s\n", v_quark_to_string(v_get_return_value()));

    if (v_map_find(cache, (ns: intptr_t)))  v_return(0);

    if (a = v_map_find(&ns->map, (q: intptr_t)))
    {
        v_return(v_std_any_get_value(v_quark_t, a));
    }

    a: &v_std_any_t := {};

    v_map_insert(cache, cache, (ns: intptr_t), &a);

    s = v_list_get_size(&ns->used);

    for (i: &int := (s-1 : int); i >= 0; --i)
    {
        r = v_list_get_item(&ns->used, i);

        nsu = (v_std_any_get_value(intptr_t, r) : *v_namespace_t);

        qr = lookup_in_namespace(cache, nsu, q);

        if (qr) v_return(qr);
    }

    v_return(0);
}

//---------------------------------------------------------------------
private
my_obtain_alias_ctx_t = struct
{
    fun: *((*void, v_quark_t, bool) ~> v_quark_t);
    aux: *void;
};

//---------------------------------------------------------------------
export
voidc_obtain_alias_effort: (aux: *void) ~> void
{
//printf("voidc_obtain_alias_effort start %s\n", v_quark_to_string((aux: v_quark_t)));
//defer printf("voidc_obtain_alias_effort stop\n");

    lst = v_std_any_get_pointer(v_util_list_t, v_get_property_q(q_current_namespace_list));

    s = v_list_get_size(lst);
    v_assert(s);

    r = v_list_get_item(lst, s-1);

    cur_ns = (v_std_any_get_value(intptr_t, r) : *v_namespace_t);

    q = (aux: v_quark_t);

    if (v_map_find(&cur_ns->map, (q: intptr_t)))  v_return();       //- Sic !?!

    sstr: &v_std_string_t := {};

    v_copy(&sstr, &cur_ns->prefix);

    v_std_string_append_char(&sstr, NAMESPACE_SEPARATOR);

    v_std_string_append(&sstr, v_quark_to_string(q));

    nstr: &v_std_string_t := {};

    v_std_string_set(&nstr, "v__");

    voidc_internal_std_string_append_mangle(&nstr, &sstr);

    qr = v_quark_from_string(v_std_string_get(&nstr));

    a: &v_std_any_t := {};

    v_std_any_set_value(&a, q);

    v_list_append(&cur_ns->list, &cur_ns->list, &a);

    v_std_any_set_value(&a, qr);

    v_map_insert(&cur_ns->map, &cur_ns->map, (q: intptr_t), &a);
}

//---------------------------------------------------------------------
private
my_obtain_alias: (aux: *void, q: v_quark_t, export: bool) ~> v_quark_t
{
//printf("my_obtain_alias start %s\n", v_quark_to_string(q));
//defer printf("my_obtain_alias stop  %s\n", v_quark_to_string(v_get_return_value()));

    strncmp: (*const char, *const char, size_t) ~> int;

    nm = v_quark_to_string(q);

    if (strncmp(nm, "v__", 3) == 0) v_return(q);                            //- Sic!

    ctx = *(aux: *my_obtain_alias_ctx_t);

    if (strncmp(nm, "v..", 3) == 0) v_return(ctx.fun(ctx.aux, v_quark_from_string(nm+3), export));

    lst = v_std_any_get_pointer(v_util_list_t, v_get_property_q(q_current_namespace_list));

    if (s = v_list_get_size(lst))
    {
        if (export) v_export_effort(voidc_obtain_alias_effort, (q: *void));
        else        v_add_effort(voidc_obtain_alias_effort, (q: *void));

        r = v_list_get_item(lst, s-1);

        cur_ns = (v_std_any_get_value(intptr_t, r) : *v_namespace_t);

        a = v_map_find(&cur_ns->map, (q: intptr_t));
        v_assert(a);

        qr = v_std_any_get_value(v_quark_t, a);

        v_return(qr);
    }

    v_return(ctx.fun(ctx.aux, q, export));
}

//---------------------------------------------------------------------
private
my_lookup_alias_ctx_t = struct
{
    fun: *((*void, v_quark_t) ~> v_quark_t);
    aux: *void;
};

//---------------------------------------------------------------------
private
my_lookup_alias: (aux: *void, q: v_quark_t) ~> v_quark_t
{
//printf("my_lookup_alias start %s\n", v_quark_to_string(q));
//defer printf("my_lookup_alias stop  %s\n", v_quark_to_string(v_get_return_value()));

    strncmp: (*const char, *const char, size_t) ~> int;

    nm = v_quark_to_string(q);

    if (strncmp(nm, "v__", 3) == 0) v_return(q);                            //- Sic!

    ctx = *(aux: *my_lookup_alias_ctx_t);

    if (strncmp(nm, "v..", 3) == 0) v_return(ctx.fun(ctx.aux, v_quark_from_string(nm+3)));

    cache: &v_util_map_t := {};

    v_make_map(&cache);

    lists: &v_quark_t[2] := { q_current_namespace_list, q_current_namespace_used };

    for (l: &int := 0; l < 2; ++l)
    {
        lst = v_std_any_get_pointer(v_util_list_t, v_get_property_q(lists[l]));

        s = v_list_get_size(lst);

        for (i: &int := (s-1 : int); i >= 0; --i)
        {
            r = v_list_get_item(lst, i);

            ns = (v_std_any_get_value(intptr_t, r) : *v_namespace_t);

            qr = lookup_in_namespace(&cache, ns, q);

            if (qr) v_return(qr);
        }
    }

    v_return(ctx.fun(ctx.aux, q));
}


//---------------------------------------------------------------------
private
op_postfix_dot_helper_ctx_t = struct
{
    fun: *((aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
            t0: *v_type_t, v0: LLVMValueRef,
            q0: v_quark_t, q1: v_quark_t,
            alst: *v_ast_expr_list_t
           ) ~> void);

    aux: *void;

    lookup_alias: *my_lookup_alias_ctx_t;       //- WTF !?!
};

//---------------------------------------------------------------------
private
my_op_postfix_dot_helper: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                           t0: *v_type_t, v0: LLVMValueRef,
                           q0: v_quark_t, q1: v_quark_t,
                           alst: *v_ast_expr_list_t
                          ) ~> void
{
//printf("my_op_postfix_dot_helper start %s\n", v_quark_to_string(q0)+1);
//defer printf("my_op_postfix_dot_helper stop\n");

    ctx = *(aux: *op_postfix_dot_helper_ctx_t);

    {   if (t0 != v_static_namespace_t  ||
            v_util_lookup_overload(q1, t0, 0,0, 0,0)  ||
            v_util_lookup_overload(q0, t0, 0,0, 0,0)
           )
        {
            ctx.fun(ctx.aux, vis, self, t0, v0, q0, q1, alst);

            v_return();
        }
    }

    q = v_quark_from_string(v_quark_to_string(q0) + 1);         //- Skip leading '.'

    qr: &v_quark_t := q;

    root_ns = ((-1: intptr_t) : *v_namespace_t);        //- Sic!

    if (ns = (v0: *v_namespace_t), ns != root_ns)       //- Just some "normal" namespace...
    {
        cache: &v_util_map_t := {};

        v_make_map(&cache);

        qr := lookup_in_namespace(&cache, ns, q);

        v_assert(qr);
    }

    cur: &my_lookup_alias_ctx_t := v_undef();

    cur.fun := v_get_lookup_alias_hook(&cur.aux);

    v_set_lookup_alias_hook(ctx.lookup_alias->fun, ctx.lookup_alias->aux);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    {   expr: &v_ast_expr_t := {};

        v_ast_make_expr_identifier_q(&expr, qr);

        v_set_result_type(INVIOLABLE_TAG);
        v_set_result_value(0);

        v_ast_accept_visitor(&expr, vis);
    }

    v_set_lookup_alias_hook(cur.fun, cur.aux);

    tr = v_get_result_type();
    vr = v_get_result_value();

    v_set_result_type(ttag);
    v_set_result_value(vtag);

    if (alst)
    {
        expr: &v_ast_expr_t := {};

        v_ast_make_expr_compiled(&expr, tr, vr);

        v_ast_make_expr_call(&expr, &expr, alst);

        v_ast_accept_visitor(&expr, vis);
    }
    else
    {
        v_adopt_result(tr, vr);
    }
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
private
my_abstract_static_namespace_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                         t: *v_type_t, v: LLVMValueRef,
                                         name: *const char, export: bool
                                        ) ~> void
{
//printf("my_abstract_static_namespace_intrinsic start %s\n", name);
//defer printf("my_abstract_static_namespace_intrinsic stop\n");

    v_assert(t == v_static_namespace_t);

    ns = (v: *v_namespace_t);

    qname = v_quark_from_string(name);

    if (export) v_export_constant_q(qname, t, v);
    else        v_add_constant_q(qname, t, v);

    //-------------------------------------------------------------
    stmt_list = voidc_definitions_context_get_stmt_list();
    if (!stmt_list)  v_return();

    expr: &v_ast_expr_t[3] := {};

    stmt: &v_ast_stmt_t := {};

    v_ast_make_expr_integer(&expr[0], qname);

    v_ast_make_stmt_call(&stmt, qname_q, voidc_compile_quark_q, &expr[0], 1);

    v_list_append(stmt_list, stmt_list, &stmt);

    v_ast_make_expr_integer(&expr[0], ns->name);

    v_ast_make_stmt_call(&stmt, quark_q, voidc_compile_quark_q, &expr[0], 1);

    v_list_append(stmt_list, stmt_list, &stmt);

    v_ast_make_expr_identifier_q(&expr[0], quark_q);

    v_ast_make_stmt_call(&stmt, value_q, q_find_constant_value_q, &expr[0], 1);

    v_list_append(stmt_list, stmt_list, &stmt);

    v_ast_make_expr_identifier_q(&expr[0], qname_q);
    v_ast_make_expr_identifier_q(&expr[1], q_static_namespace_t);
    v_ast_make_expr_identifier_q(&expr[2], value_q);

    if (export) v_ast_make_stmt_call(&stmt, 0, q_export_constant_q, expr, 3);
    else        v_ast_make_stmt_call(&stmt, 0, q_add_constant_q,    expr, 3);

    v_list_append(stmt_list, stmt_list, &stmt);
}


//---------------------------------------------------------------------
private
my_expr_struct_ctx_t = struct
{
    fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void);
    aux: *void;
};

//---------------------------------------------------------------------
private
my_compile_expr_struct: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("my_compile_expr_struct start\n");
//defer printf("my_compile_expr_struct stop\n");

    void_obj = v_ast_generic_get_object((self: *v_ast_expr_t));

    obj = *(void_obj: *v_ast_expr_struct_t);

    name = &obj[0];

    if (!v_empty(name))
    {
        tag = v_ast_base_get_visitor_method_tag(name);

        if (tag == v_ast_expr_identifier_visitor_method_tag)
        {
            q0 = v_ast_expr_identifier_get_name_q(name);

            q1 = v_obtain_alias_q(q0, false);       //- ?

            if (q0 != q1)
            {
                v_ast_make_expr_identifier_q(name, q1);
            }
        }
    }

    ctx = *(aux: *my_expr_struct_ctx_t);

    ctx.fun(ctx.aux, vis, self);
}

//---------------------------------------------------------------------
private
my_compile_expr_union: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("my_compile_expr_union start\n");
//defer printf("my_compile_expr_union stop\n");

    void_obj = v_ast_generic_get_object((self: *v_ast_expr_t));

    obj = *(void_obj: *v_ast_expr_union_t);

    name = &obj[0];

    if (!v_empty(name))
    {
        tag = v_ast_base_get_visitor_method_tag(name);

        if (tag == v_ast_expr_identifier_visitor_method_tag)
        {
            q0 = v_ast_expr_identifier_get_name_q(name);

            q1 = v_obtain_alias_q(q0, false);       //- ?

            if (q0 != q1)
            {
                v_ast_make_expr_identifier_q(name, q1);
            }
        }
    }

    ctx = *(aux: *my_expr_struct_ctx_t);

    ctx.fun(ctx.aux, vis, self);
}


//---------------------------------------------------------------------
private
voidc_compile_unit_defn_effort: (aux: *void) ~> void
{
    qq = (aux: *v_quark_t);

    qnsid = qq[0];
    qname = qq[1];

    ns = (v_find_constant_value_q(qnsid) : *v_namespace_t);

    if (v_map_find(&ns->map, (qname: intptr_t)))  v_return();       //- Sic !?!

    sstr: &v_std_string_t := {};

    v_copy(&sstr, &ns->prefix);

    v_std_string_append_char(&sstr, NAMESPACE_SEPARATOR);

    v_std_string_append(&sstr, v_quark_to_string(qname));

    nstr: &v_std_string_t := {};

    v_std_string_set(&nstr, "v__");

    voidc_internal_std_string_append_mangle(&nstr, &sstr);

    qr = v_quark_from_string(v_std_string_get(&nstr));

    a: &v_std_any_t := {};

    v_std_any_set_value(&a, qname);

    v_list_append(&ns->list, &ns->list, &a);

    v_std_any_set_value(&a, qr);

    v_map_insert(&ns->map, &ns->map, (qname: intptr_t), &a);
}

//---------------------------------------------------------------------
export
voidc_compile_unit_defn_make_effort: (qnsid: v_quark_t, qname: v_quark_t, export: bool) ~> void
{
    if (export)
    {
        qq = v_malloc(v_quark_t, 2);

        qq[0] := qnsid;
        qq[1] := qname;

        v_export_effort(voidc_compile_unit_defn_effort, qq);

        free: (*void) ~> void;

        v_add_cleaner(free, qq);
    }
    else
    {
        qq: &v_quark_t[2] := { qnsid, qname };

        v_add_effort(voidc_compile_unit_defn_effort, qq);
    }
}

//---------------------------------------------------------------------
private
my_visitor_method_ctx_t = struct
{
    fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void);
    aux: *void;
};

private
my_compile_unit_defn: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("my_compile_unit_defn start\n");
//defer printf("my_compile_unit_defn stop\n");

    ctx = *(aux: *my_visitor_method_ctx_t);

    list = (self: *v_ast_generic_list_t);

    ast1 = v_list_get_item(list, 1);            //- Name

    {   tag = v_ast_base_get_visitor_method_tag(ast1);

        if (tag != v_ast_expr_call_visitor_method_tag)
        {
            v_assert(tag == v_ast_expr_identifier_visitor_method_tag);

            ctx.fun(ctx.aux, vis, self);

            v_return();
        }
    }

    //- <ns-id> . <id>

    args = v_ast_expr_call_get_arg_list((ast1: *v_ast_expr_t));

    op = v_list_get_item(args, 0);

    void_obj = v_ast_generic_get_object(op);

    obj = *(void_obj: *v_ast_operator_unary_t);

    pay = (&obj[2] : *v_ast_generic_list_t);

    eid = (v_list_get_item(pay, 0) : *v_ast_expr_t);

    qname = v_ast_expr_identifier_get_name_q(eid);

    nsid = v_list_get_item(args, 1);

    ttag = v_get_result_type();
    vtag = v_get_result_value();

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(nsid, vis);

    ns = (v_get_result_value() : *v_namespace_t);       //- Sic!

    qualif = v_ast_expr_integer_get_number((v_list_get_item(list, 0) : *v_ast_expr_t));

    private_flag = v_get_private_flag();
    export_flag  = v_get_export_flag();

    private = private_flag  ||  qualif & qf_private;
    export  = (export_flag  ||  qualif & qf_export)  &&  !private;

    voidc_compile_unit_defn_make_effort(ns->name, qname, export);

    //-----------------------------------------------------------------
    if (stmt_list = voidc_definitions_context_get_stmt_list())
    {
        expr: &v_ast_expr_t[3] := {};

        elst: &v_ast_expr_list_t := {};

        stmt: &v_ast_stmt_t := {};

        v_ast_make_expr_integer(expr+0, ns->name);

        v_make_list(&elst, expr+0);

        v_ast_make_expr_identifier_q(expr+0, voidc_compile_quark_q);

        v_ast_make_expr_call(expr+0, expr+0, &elst);

        v_ast_make_expr_integer(expr+1, qname);

        v_make_list(&elst, expr+1);

        v_ast_make_expr_identifier_q(expr+1, voidc_compile_quark_q);

        v_ast_make_expr_call(expr+1, expr+1, &elst);

        v_ast_make_expr_integer(expr+2, export);

        v_make_list(&elst, expr, 3);

        v_ast_make_expr_identifier(expr+0, "voidc_compile_unit_defn_make_effort");

        v_ast_make_expr_call(expr+0, expr+0, &elst);

        v_ast_make_stmt(&stmt, 0, expr+0);

        v_list_append(stmt_list, stmt_list, &stmt);
    }

    any = v_map_find(&ns->map, (qname: intptr_t));
    v_assert(any);

    quark = v_std_any_get_value(v_quark_t, any);

    ast: &v_ast_base_t[5] := {};

    n = v_list_get_size(list);

    v_assert(n <= 5);

    v_copy(ast+0, v_list_get_item(list, 0));

    v_ast_make_expr_identifier_q((ast+1 : *v_ast_expr_t), quark);

    for (i: &int := 2; i < n; ++i)
    {
        v_copy(ast+i, v_list_get_item(list, i));
    }

    tag = v_ast_base_get_visitor_method_tag(self);

    lst: &v_ast_generic_list_t := {};

    v_make_list(&lst, tag, ast, n);

    ctx.fun(ctx.aux, vis, &lst);
}

//---------------------------------------------------------------------
private
my_var_decl_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
//printf("my_var_decl_intrinsic start\n");
//defer printf("my_var_decl_intrinsic stop\n");

    arg_list = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    ename = v_list_get_item(arg_list, 0);
    etype = v_list_get_item(arg_list, 1);

    qr: &v_quark_t := v_undef();

    block
    {
        {   tag = v_ast_base_get_visitor_method_tag(ename);

            if (tag != v_ast_expr_call_visitor_method_tag)
            {
                v_assert(tag == v_ast_expr_identifier_visitor_method_tag);

                qr := v_ast_expr_identifier_get_name_q(ename);

                v_break();
            }
        }

        //- <ns-id> . <id>

        args = v_ast_expr_call_get_arg_list(ename);

        op = v_list_get_item(args, 0);

        void_obj = v_ast_generic_get_object(op);

        obj = *(void_obj: *v_ast_operator_unary_t);

        pay = (&obj[2] : *v_ast_generic_list_t);

        eid = (v_list_get_item(pay, 0) : *v_ast_expr_t);

        qname = v_ast_expr_identifier_get_name_q(eid);

        nsid = v_list_get_item(args, 1);

        v_set_result_type(INVIOLABLE_TAG);
        v_set_result_value(0);

        v_ast_accept_visitor(nsid, vis);

        ns = (v_get_result_value() : *v_namespace_t);       //- Sic!

        if (a = v_map_find(&ns->map, (qname: intptr_t)))
        {
            qr := v_std_any_get_value(v_quark_t, a);
        }
        else
        {
            sstr: &v_std_string_t := {};

            v_copy(&sstr, &ns->prefix);

            v_std_string_append_char(&sstr, NAMESPACE_SEPARATOR);

            v_std_string_append(&sstr, v_quark_to_string(qname));

            nstr: &v_std_string_t := {};

            v_std_string_set(&nstr, "v__");

            voidc_internal_std_string_append_mangle(&nstr, &sstr);

            qr := v_quark_from_string(v_std_string_get(&nstr));

            a: &v_std_any_t := {};

            v_std_any_set_value(&a, qname);

            v_list_append(&ns->list, &ns->list, &a);

            v_std_any_set_value(&a, qr);

            v_map_insert(&ns->map, &ns->map, (qname: intptr_t), &a);
        }
    }

    v_set_result_type(INVIOLABLE_TAG);
    v_set_result_value(0);

    v_ast_accept_visitor(etype, vis);

    type: &*v_type_t := (v_get_result_value() : *v_type_t);         //- Sic!

    if (v_type_is_pointer(type))
    {
        type := v_type_refptr_get_element_type(type);       //- Sic!    WTF !?!?!?!
    }

    v_add_symbol_q(qr, type, 0);
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
private
namespaces_ctx_t = struct
{
    o_alias: my_obtain_alias_ctx_t;
    l_alias: my_lookup_alias_ctx_t;

    dot: op_postfix_dot_helper_ctx_t;

    struct: my_expr_struct_ctx_t[2];            //- struct, union

    unit_defn: my_visitor_method_ctx_t[3];      //- fun, var, val
};


//---------------------------------------------------------------------
//- Enable namespaces
//---------------------------------------------------------------------
export
voidc_enable_namespaces_compiler: () ~> void
{
    v_return_if(v_find_constant_q(enabled_q, 0, 0));

    v_add_constant_q(enabled_q, void, 0);

    //--------------------------------------------------------------
    vis = v_get_compiler();

    voidc_visitor_set_method(vis, vis, unit_namespace_open_q, compile_unit_namespace_open, 0);
    voidc_visitor_set_method(vis, vis, unit_defn_close_q,     compile_unit_defn_close,     0);
    voidc_visitor_set_method(vis, vis, unit_defn_using_q,     compile_unit_defn_using,     0);

    v_add_intrinsic_q(q_stmt_using, v_stmt_using_intrinsic, 0);

    //--------------------------------------------------------------
    {   l: &v_util_list_t := {};

        v_make_list_nil(&l);

        a: &v_std_any_t := {};

        v_std_any_set_pointer(&a, &l);

        v_add_property_q(q_current_namespace_list,  &a);
        v_add_property_q(q_current_namespace_stack, &a);
        v_add_property_q(q_current_namespace_used,  &a);
    }

    //-----------------------------------------------------------------
    v_add_intrinsic_q(voidc_abstract_static_namespace_intrinsic_q, my_abstract_static_namespace_intrinsic, 0);

    v_add_overload_q(voidc_abstract_static_constant_q, v_static_namespace_t,
                     voidc_abstract_static_namespace_intrinsic_q);

    //--------------------------------------------------------------
    ctx = *v_malloc(namespaces_ctx_t);

    free: (*void) ~> void;

    v_add_local_cleaner(free, &ctx);

    ctx.o_alias.fun := v_get_obtain_alias_hook(&ctx.o_alias.aux);
    ctx.l_alias.fun := v_get_lookup_alias_hook(&ctx.l_alias.aux);

    v_set_obtain_alias_hook(my_obtain_alias, &ctx.o_alias);
    v_set_lookup_alias_hook(my_lookup_alias, &ctx.l_alias);

    ctx.dot.fun := v_get_handler(v_compile_op_postfix_dot, &ctx.dot.aux);

    v_set_handler(v_compile_op_postfix_dot, my_op_postfix_dot_helper, &ctx.dot);

    ctx.dot.lookup_alias := &ctx.l_alias;

    //--------------------------------------------------------------
    ctx.struct[0].fun := voidc_visitor_get_method(vis, expr_struct_q, &ctx.struct[0].aux);
    ctx.struct[1].fun := voidc_visitor_get_method(vis, expr_union_q,  &ctx.struct[1].aux);

    voidc_visitor_set_method(vis, vis, expr_struct_q, my_compile_expr_struct, &ctx.struct[0]);
    voidc_visitor_set_method(vis, vis, expr_union_q,  my_compile_expr_union,  &ctx.struct[1]);

    //--------------------------------------------------------------
    ctx.unit_defn[0].fun := voidc_visitor_get_method(vis, unit_fun_defn_q, &ctx.unit_defn[0].aux);
    ctx.unit_defn[1].fun := voidc_visitor_get_method(vis, unit_var_defn_q, &ctx.unit_defn[1].aux);
    ctx.unit_defn[2].fun := voidc_visitor_get_method(vis, unit_val_defn_q, &ctx.unit_defn[2].aux);

    voidc_visitor_set_method(vis, vis, unit_fun_defn_q, my_compile_unit_defn, &ctx.unit_defn[0]);
    voidc_visitor_set_method(vis, vis, unit_var_defn_q, my_compile_unit_defn, &ctx.unit_defn[1]);
    voidc_visitor_set_method(vis, vis, unit_val_defn_q, my_compile_unit_defn, &ctx.unit_defn[2]);

    //--------------------------------------------------------------
    v_add_intrinsic("v.internal.expr_var_decl", my_var_decl_intrinsic, 0);
}


//---------------------------------------------------------------------
//- Enable namespaces
//---------------------------------------------------------------------
export
voidc_enable_namespaces: () ~> void
{
    voidc_enable_namespaces_compiler();

    v_return_if_not(voidc_has_grammar());

    gr0: &v_peg_grammar_t := {};    gr0 = &gr0;

    v_peg_get_grammar(gr0);

    //--------------------------------------------------------------
    grammar gr0
    {
    actions:
        mk_unit_namespace_open = mk_unit_namespace_open_grammar_action;
        mk_unit_defn_close     = mk_unit_defn_close_grammar_action;
        mk_using_stmt          = mk_using_stmt_grammar_action;
        mk_unit_defn_using     = mk_unit_defn_using_grammar_action;
        mk_stmt_using          = mk_stmt_using_grammar_action;
        mk_dot_identifier      = mk_dot_identifier_grammar_action;
        mk_qlf_ident_expr      = mk_qlf_ident_expr_grammar_action;
        mk_stmt_expr_var_decl  = mk_stmt_expr_var_decl_grammar_action;

    parsers:
        unit_namespace_open = q:qualif_flags _ "namespace" !ident_cont _ ns:expr _ '{'  { mk_unit_namespace_open(q, ns) };

        unit_defn_close = '}'   { mk_unit_defn_close() };

        using_stmt = "using" !ident_cont _ "namespace" !ident_cont _ e:expr _';'    { mk_using_stmt(1, e) }
                   / "using" !ident_cont _ e:expr _';'                              { mk_using_stmt(0, e) }
                   ;

        unit_defn += unit_namespace_open
                   / unit_defn_close
                   / q:qualif_flags _ u:using_stmt      { mk_unit_defn_using(q, u) }
                   ;

        stmt += u:using_stmt    { mk_stmt_using(u) };


        prim += '.' _ i:identifier      { mk_dot_identifier(i) };

        qlf_ident = q:qualif_flags _ e:expr     { mk_qlf_ident_expr(q, e) };        //- Sic !?!

        stmt_var_defn =+ e:expr _':'_ t:expr _';'       { mk_stmt_expr_var_decl(e, t) };        //- ?!?!?
    }

    v_peg_set_grammar(gr0);
}


//=====================================================================
{   voidc_unit_end_module(); }


