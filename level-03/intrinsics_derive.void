//---------------------------------------------------------------------
//- Copyright (C) 2020-2023 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("intrinsics_derive.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("level-01/arithmetic.void");

    v_import("llvm-c/Core.void");

//  v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();
}


//=====================================================================
{   voidc_unit_begin_module("intrinsics_derive_module"); }


//---------------------------------------------------------------------
private
compute_key_quark_type_ft = (vis: *voidc_visitor_t, aux: *void,
                             ft: *v_type_t,
                             iq: &intptr_t, t: &*v_type_t
                            ) -> void;

private
struct voidc_compute_key_quark_type_ctx_t
{
    fun: *compute_key_quark_type_ft;
    aux: *void;
};

private
compute_key_quark_type_ctx: &voidc_compute_key_quark_type_ctx_t := v_undef();


//---------------------------------------------------------------------
private
struct voidc_intrinsic_quarks_item_t
{
    name:  *const char;
    quark: *v_quark_t;
};

private
intrinsic_quarks: &voidc_intrinsic_quarks_item_t[] :=
{
    { "v_initialize" },                 //- Derivable
    { "v_terminate" },                  //- Derivable

    { "v_copy" },                       //- Derivable
    { "v_move" },                       //- ? ...

    { "v_empty" },                      //- ? ...
    { "v_kind" },                       //- ? ...

    { "v_make_list_nil" },              //- ?..
    { "v_make_list" },                  //- ?..
                                        //- ?..
    { "v_list_append" },                //- ?..
    { "v_list_get_size" },              //- ?..
    { "v_list_get_item" },              //- ?..
                                        //- ?..
    { "v_ast_make_generic" },           //- ?..
    { "v_ast_generic_get_vtable" },     //- ?..
    { "v_ast_generic_get_object" },     //- ?..
};

private
quarks_compare: (void_lhs: *const void, void_rhs: *const void) -> int
{
    lhs = *(void_lhs: *voidc_intrinsic_quarks_item_t);
    rhs = *(void_rhs: *voidc_intrinsic_quarks_item_t);

    v_return((*lhs.quark: int) - (*rhs.quark: int));
}

//---------------------------------------------------------------------
qsort: (ptr: *void, count: size_t, size: size_t, comp: *((*const void, *const void) -> int)) -> void;

bsearch: (key: *const void, ptr: *const void, count: size_t, size: size_t, comp: *((*const void, *const void) -> int)) -> *void;

//---------------------------------------------------------------------
voidc_intrinsic_quarks_ctor: () -> void
{
    t = v_find_symbol_type("intrinsic_quarks");

    t = v_type_refptr_get_element_type(t);

    l = v_type_array_get_length(t);

    for (i: &int := 0; i < l; ++i)
    {
        intrinsic_quarks[i].quark := v_quark_ptr_from_string(intrinsic_quarks[i].name);
    }

    qsort(intrinsic_quarks, l, voidc_intrinsic_quarks_item_t.size, quarks_compare);
}

//---------------------------------------------------------------------
{
    t = v_find_symbol_type("intrinsic_quarks");

    t = v_type_refptr_get_element_type(t);

    l = v_type_array_get_length(t);

    v_add_constant("quarks_count", int, LLVMConstInt(v_type_get_llvm_type(int), l, 0));

    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("voidc_internal_function_type_q", q_ref, q("voidc.internal_function_type"));

    v_add_symbol("q_internal_spec_fun_derive", q_ref, q("v.internal.spec_fun_derive"));

    v_add_symbol("q_initialize", q_ref, q("v_initialize"));
    v_add_symbol("q_terminate",  q_ref, q("v_terminate"));
    v_add_symbol("q_copy",       q_ref, q("v_copy"));

    v_add_symbol("q_alloca",        q_ref, q("v_alloca"));
    v_add_symbol("q_getelementptr", q_ref, q("v_getelementptr"));
    v_add_symbol("q_load",          q_ref, q("v_load"));
    v_add_symbol("q_store",         q_ref, q("v_store"));
    v_add_symbol("q_break",         q_ref, q("v_break"));
    v_add_symbol("q_icmp",          q_ref, q("v_icmp"));
    v_add_symbol("q_binop",         q_ref, q("v_binop"));

    v_add_symbol("q_idx",   q_ref, q("v.idx"));
    v_add_symbol("q_idx_v", q_ref, q("v.idx.v"));
}

//---------------------------------------------------------------------
private
compute_key_quark_type: (vis: *voidc_visitor_t, aux: *void,
                         ft: *v_type_t,
                         iq: &intptr_t, t: &*v_type_t
                        ) -> void
{
    if (iq > 0)
    {
        q: &v_quark_t := (iq: v_quark_t);

        key: &voidc_intrinsic_quarks_item_t := { 0, &q };

        if (bsearch(&key, intrinsic_quarks, quarks_count, voidc_intrinsic_quarks_item_t.size, quarks_compare))
        {
            type = v_type_function_get_param_types(ft)[0];

            t := v_type_refptr_get_element_type(type);

            v_return();
        }
    }

    ctx = *(aux: *voidc_compute_key_quark_type_ctx_t);

    ctx.fun(vis, ctx.aux, ft, iq, t);
}

//---------------------------------------------------------------------
private
mk_spec_ident_identifier_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) -> void
{
    id = v_std_any_get_pointer(v_std_string_t, any);

    quark = v_quark_from_string(v_std_string_get(id));

    v_std_any_set_value(ret, (quark: intptr_t));
}

//---------------------------------------------------------------------
private
mk_unit_spec_fun_derive_grammar_action: (ret: *v_std_any_t, *void, any: *v_std_any_t, size_t) -> void
{
    head = v_std_any_get_pointer(v_ast_generic_list_t, any+0);

    expr_quark = (v_list_get_item(head, 1) : *v_ast_expr_t);

    lst = v_alloca(v_ast_expr_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_make_list(lst, expr_quark, 1);

    etmp = v_alloca(v_ast_expr_t);
    v_initialize(etmp);
    defer v_terminate(etmp);

    v_ast_make_expr_identifier_q(etmp, q_internal_spec_fun_derive);

    v_ast_make_expr_call(etmp, etmp, lst);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);
    defer v_terminate(stmt);

    v_ast_make_stmt_q(stmt, 0, etmp);

    body = v_alloca(v_ast_stmt_list_t);
    v_initialize(body);
    defer v_terminate(body);

    v_make_list(body, stmt, 1);

    lst = v_alloca(v_ast_generic_list_t);
    v_initialize(lst);
    defer v_terminate(lst);

    v_list_append(lst, head, (body: *v_ast_base_t), 1);

    v_std_any_set_pointer(ret, lst);
}

//---------------------------------------------------------------------
private
spec_fun_derive_intrinsic: (vis: *voidc_visitor_t, aux: *void, self: *v_ast_base_t) -> void
{
    call = (self: *v_ast_expr_t);

    arg_list = v_ast_expr_call_get_arg_list(call);

    arg0 = v_list_get_item(arg_list, 0);

    //-------------------------------------------------------------
    quark = (v_ast_expr_integer_get_number(arg0) : v_quark_t);

    is_copy = (quark == q_copy);

    //- assert(is_copy  ||  quark == q_initialize  ||  quark == q_terminate);

    //-------------------------------------------------------------
    builder = v_target_get_builder();

    cur_b = LLVMGetInsertBlock(builder);

    fun = LLVMGetBasicBlockParent(cur_b);

    fun_type = v_get_variable_type_q(voidc_internal_function_type_q);

    params = v_type_function_get_param_types(fun_type);

    //-------------------------------------------------------------
    {   v_add_parameter_name(fun, 0, "v.dst", params[0]);

        i: &int := 1;

        if (is_copy)
        {
            v_add_parameter_name(fun, 1, "v.src", params[1]);

            i := 2;
        }

        v_add_parameter_name(fun, i, "v.count", params[i]);
    }

    //-------------------------------------------------------------
    expr = v_alloca(v_ast_expr_t, 4);
    v_initialize(expr, 4);
    defer v_terminate(expr, 4);

    stmt = v_alloca(v_ast_stmt_t, 2);
    v_initialize(stmt, 2);
    defer v_terminate(stmt, 2);

    expr_list = v_alloca(v_ast_expr_list_t, 4);
    v_initialize(expr_list, 4);
    defer v_terminate(expr_list, 4);

    stmt_list = v_alloca(v_ast_stmt_list_t, 2);
    v_initialize(stmt_list, 2);
    defer v_terminate(stmt_list, 2);

    v_make_list_nil(stmt_list+0);
    v_make_list_nil(stmt_list+1);

    v_ast_make_expr_identifier(expr+0, "size_t");

    v_ast_make_stmt_call(stmt+0, q_idx, q_alloca, expr+0, 1);
    v_list_append(stmt_list+0, stmt_list+0, stmt+0);

    v_ast_make_expr_integer(expr+0, 0);
    v_ast_make_expr_identifier_q(expr+1, q_idx);

    v_ast_make_stmt_call(stmt+0, 0, q_store, expr, 2);
    v_list_append(stmt_list+0, stmt_list+0, stmt+0);

    //-------------------------------------------------------------
    v_ast_make_expr_identifier_q(expr+0, q_idx);

    v_ast_make_stmt_call(stmt+0, q_idx_v, q_load, expr+0, 1);
    v_list_append(stmt_list+1, stmt_list+1, stmt+0);

    //-------------------------------------------------------------
    v_ast_make_expr_identifier(expr+0, "LLVMIntSGE");

    v_ast_make_expr_identifier_q(expr+1, q_idx_v);

    v_ast_make_expr_identifier(expr+2, "v.count");

    v_make_list(expr_list+0, expr, 3);

    v_ast_make_expr_identifier_q(expr+0, q_icmp);

    v_ast_make_expr_call(expr+0, expr+0, expr_list+0);

    v_ast_make_stmt_call(stmt+0, 0, q_break, 0, 0);

    //- assert(v_empty(stmt+1));

    v_ast_make_stmt_if_then_else(stmt+0, expr+0, stmt+0, stmt+1);
    v_list_append(stmt_list+1, stmt_list+1, stmt+0);

    //-------------------------------------------------------------
    type = v_type_refptr_get_element_type(params[0]);

    //- assert(v_type_is_struct(type));

    count = v_type_struct_get_element_count(type);
    types = v_type_struct_get_element_types(type);

    void_fun: &*void := v_undef();
    void_aux: &*void := v_undef();

    ft: &v_type_ptr   := v_undef();
    fv: &LLVMValueRef := v_undef();

    for (n: &unsigned := 0; n < count; ++n)
    {
        v_ast_make_expr_identifier(expr+0, "v.dst");

        v_ast_make_expr_identifier_q(expr+1, q_idx_v);

        v_ast_make_expr_integer(expr+2, n);

        v_make_list(expr_list+0, expr+0, 3);

        v_copy(expr_list+2, expr_list+0);

        if (is_copy)
        {
            v_ast_make_expr_identifier(expr+0, "v.src");

            v_make_list(expr_list+1, expr+0, 3);

            v_copy(expr_list+3, expr_list+1);
        }

        v_ast_make_expr_integer(expr+0, 0);

        et: &v_type_ptr := types[n];

        length: &uint64_t := 1;

        loop
        {
            if (!v_type_is_array(et))   v_break();

            length *= v_type_array_get_length(et);

            v_list_append(expr_list+0, expr_list+0, expr+0, 1);

            if (is_copy)  v_list_append(expr_list+1, expr_list+1, expr+0, 1);

            et := v_type_array_get_element_type(et);
        }

        if (length == 0)  v_continue();     //- WTF?

        v_ast_make_expr_identifier_q(expr+2, q_getelementptr);

        if (v_util_lookup_function_dict(vis, et, quark, void_fun, void_aux, ft, fv))
        {
            v_ast_make_expr_call(expr+0, expr+2, expr_list+0);

            if (is_copy)
            {
                v_ast_make_expr_call(expr+1, expr+2, expr_list+1);

                v_ast_make_expr_integer(expr+2, (length: intptr_t));

                v_ast_make_stmt_call(stmt+0, 0, quark, expr, 3);
            }
            else
            {
                v_ast_make_expr_integer(expr+1, (length: intptr_t));

                v_ast_make_stmt_call(stmt+0, 0, quark, expr, 2);
            }
        }
        else
        {
            if (!is_copy)   v_continue();

            v_ast_make_expr_call(expr+1, expr+2, expr_list+2);
            v_ast_make_expr_call(expr+0, expr+2, expr_list+3);

            v_make_list(expr_list+0, expr+0, 1);

            v_ast_make_expr_identifier_q(expr+0, q_load);

            v_ast_make_expr_call(expr+0, expr+0, expr_list+0);

            v_ast_make_stmt_call(stmt+0, 0, q_store, expr+0, 2);
        }

        v_list_append(stmt_list+1, stmt_list+1, stmt+0);
    }

    //-------------------------------------------------------------
    v_ast_make_expr_identifier(expr+0, "LLVMAdd");

    v_ast_make_expr_identifier_q(expr+1, q_idx_v);

    v_ast_make_expr_integer(expr+2, 1);

    v_ast_make_expr_identifier(expr+3, "size_t");

    v_make_list(expr_list+1, expr+2, 2);

    v_ast_make_expr_identifier(expr+2, "v_cast");

    v_ast_make_expr_call(expr+2, expr+2, expr_list+1);

    v_make_list(expr_list+0, expr, 3);

    v_ast_make_expr_identifier(expr+0, "v_binop");

    v_ast_make_expr_call(expr+0, expr+0, expr_list+0);

    v_ast_make_expr_identifier_q(expr+1, q_idx);

    v_ast_make_stmt_call(stmt+0, 0, q_store, expr+0, 2);

    v_list_append(stmt_list+1, stmt_list+1, stmt+0);

    //-------------------------------------------------------------
    v_ast_make_stmt_block(stmt+0, stmt_list+1, false);

    v_ast_make_stmt_loop(stmt+0, stmt+0);

    v_list_append(stmt_list+0, stmt_list+0, stmt+0);

    //-------------------------------------------------------------
    v_ast_accept_visitor((stmt_list+0 : *v_ast_base_t), vis);
}


//---------------------------------------------------------------------
//- Enable intrinsics derive
//---------------------------------------------------------------------
export
voidc_enable_intrinsics_derive_compiler: () -> void
{
    vis = v_get_compiler();

    v_return_if(voidc_visitor_get_void_method(vis, q_internal_spec_fun_derive, 0));


    block
    {
        gctx = v_target_get_global_ctx();
        vctx = v_target_get_voidc_global_ctx();

        if (gctx == vctx) v_break();

        v_target_set_global_ctx(vctx);

        v_import("level-01/arithmetic.void");

        binop_aux: &*void := v_undef();
        binop_fun = v_get_intrinsic("v_binop", &binop_aux);

        icmp_aux: &*void := v_undef();
        icmp_fun = v_get_intrinsic("v_icmp", &icmp_aux);

        v_target_set_global_ctx(gctx);

        v_add_intrinsic("v_binop", binop_fun, binop_aux);
        v_add_intrinsic("v_icmp",  icmp_fun,  icmp_aux);

        _int = v_find_type("int");

        int_ = v_type_get_llvm_type(_int);

        v_add_constant("LLVMAdd",    _int, LLVMConstInt(int_, LLVMAdd,    0));
        v_add_constant("LLVMIntSGE", _int, LLVMConstInt(int_, LLVMIntSGE, 0));
    }

    q = v_quark_from_string("voidc.compute_key_quark_type");

    compute_key_quark_type_ctx.fun := voidc_visitor_get_intrinsic(vis, q, &compute_key_quark_type_ctx.aux);

    voidc_visitor_set_intrinsic(vis, vis, q, compute_key_quark_type, &compute_key_quark_type_ctx);

    voidc_visitor_set_intrinsic(vis, vis, q_internal_spec_fun_derive, spec_fun_derive_intrinsic, 0);
}

//---------------------------------------------------------------------
//- Enable intrinsics derive
//---------------------------------------------------------------------
export
voidc_enable_intrinsics_derive: () -> void
{
    voidc_enable_intrinsics_derive_compiler();

    v_return_if_not(voidc_has_grammar());


    gr0 = v_alloca(v_peg_grammar_t);
    v_initialize(gr0);
    defer v_terminate(gr0);

    v_peg_get_grammar(gr0);

    v_return_if(v_peg_grammar_get_action(gr0, "mk_unit_spec_fun_derive", 0));


    grammar gr0
    {
    actions:
        mk_spec_ident_identifier = mk_spec_ident_identifier_grammar_action;
        mk_unit_spec_fun_derive  = mk_unit_spec_fun_derive_grammar_action;

    parsers:
        spec_ident =+ '(' _ id:identifier _ '(' _ '_' _ ')' _ ')'       { mk_spec_ident_identifier(id) };

        unit_spec_fun_defn =+ h:unit_spec_fun_defn_hdr _'='_ "derive" _';'   { mk_unit_spec_fun_derive(h) };
    }

    v_peg_set_grammar(gr0);
}


//=====================================================================
{   voidc_unit_end_module(); }


//---------------------------------------------------------------------
{   voidc_intrinsic_quarks_ctor();
}


