//---------------------------------------------------------------------
//- Copyright (C) 2020-2024 Dmitry Borodkin <borodkin.dn@gmail.com>
//- SDPX-License-Identifier: LGPL-3.0-or-later
//---------------------------------------------------------------------
{   voidc_guard_target("generics_etc.void  must be imported into the voidc target only!");

    v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("intrinsics_derive.void");
    v_import("local_objects.void");
    v_import("heap_objects.void");
    v_import("global_objects.void");
    v_import("coercions.void");
    v_import("namespaces.void");

//  v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();

    voidc_enable_intrinsics_derive();
    voidc_enable_local_objects();
    voidc_enable_heap_objects();
    voidc_enable_global_objects();
    voidc_enable_coercions();
    voidc_enable_namespaces();
}


//=====================================================================

//---------------------------------------------------------------------
{
    q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("enabled_q", q_ref, q("voidc.internal.generics_etc_enabled"));

    v_add_symbol("q_type_generic_initialize_hooks",       q_ref, q("v.type_generic_initialize_hooks"));
    v_add_symbol("q_type_generic_obtain_llvm_type_hooks", q_ref, q("v.type_generic_obtain_llvm_type_hooks"));

    //-------------------------------------------------------------
    v_add_symbol("voidc_compile_quark_q", q_ref, q("voidc.compile_quark"));
    v_add_symbol("q_export_constant_q",   q_ref, q("v_export_constant_q"));
    v_add_symbol("q_add_constant_q",      q_ref, q("v_add_constant_q"));

    v_add_symbol("q_object_intrinsic_t", q_ref, q("v_object_intrinsic_t"));

    v_add_symbol("voidc_abstract_static_constant_q", q_ref, q("voidc.abstract_static_constant"));

    v_add_symbol("voidc_abstract_object_intrinsic_intrinsic_q", q_ref, q("voidc.abstract_object_intrinsic_intrinsic"));
}


//=====================================================================
{   voidc_unit_begin_module("generics_etc_module"); }


//---------------------------------------------------------------------
private
get_hook: (qhooks: v_quark_t, qcons: v_quark_t, paux: **void) ~> *void
{
    any = v_get_property_q(qhooks);
    if (!any)   v_return(0);

    map = v_std_any_get_pointer(v_util_map_t, any);
    v_assert(map);

    any = v_map_find(map, qcons);
    if (!any)   v_return(0);

    p = *v_std_any_get_pointer(intptr_t[2], any);
    v_assert(p);

    fun = (p[0] : *void);
    aux = (p[1] : *void);

    if (paux) *paux := aux;

    v_return(fun);
}

//---------------------------------------------------------------------
private
set_hook: (qhooks: v_quark_t, qcons: v_quark_t, fun: *void, aux: *void) ~> void
{
    a: &*v_std_any_t := v_get_property_q(qhooks);
    if (!a)
    {
        map: &v_util_map_t := {};

        v_make_map(&map);

        any: &v_std_any_t := {};

        v_std_any_set_pointer(&any, &map);

        v_add_property_q(qhooks, &any);

        a := v_get_property_q(qhooks);
    }

    map = v_std_any_get_pointer(v_util_map_t, a);

    data: &intptr_t[2] :=
    {
        (fun: intptr_t),
        (aux: intptr_t),
    };

    any: &v_std_any_t := {};

    v_std_any_set_pointer(&any, &data);

    v_map_insert(map, map, qcons, &any);
}

//---------------------------------------------------------------------
private
hook_initialize_ft = (*void, *v_type_t) ~> void;

//---------------------------------------------------------------------
export
v_type_generic_get_initialize_hook: (qcons: v_quark_t, paux: **void) ~> *hook_initialize_ft
{
    v_return((get_hook(q_type_generic_initialize_hooks, qcons, paux) : *hook_initialize_ft));
}

//---------------------------------------------------------------------
export
v_type_generic_set_initialize_hook: (qcons: v_quark_t, fun: *hook_initialize_ft, aux: *void) ~> void
{
    set_hook(q_type_generic_initialize_hooks, qcons, fun, aux);
}

//---------------------------------------------------------------------
private
my_type_generic_initialize_ctx_t = struct
{
    fun: *hook_initialize_ft;
    aux: *void;
};

private
my_type_generic_initialize: (aux: *void, type: *v_type_t) ~> void
{
    v_assert(v_type_is_generic(type));

    block
    {
        aux: &*void := v_undef();

        fun = v_type_generic_get_initialize_hook(v_type_generic_get_cons(type), &aux);
        if (!fun)   v_break();

        fun(aux, type);

        v_return();
    }

    ctx = *(aux: *my_type_generic_initialize_ctx_t);

    ctx.fun(ctx.aux, type);
}


//---------------------------------------------------------------------
private
hook_obtain_llvm_type_ft = (*void, *v_type_t) ~> LLVMTypeRef;

//---------------------------------------------------------------------
export
v_type_generic_get_obtain_llvm_type_hook: (qcons: v_quark_t, paux: **void) ~> *hook_obtain_llvm_type_ft
{
    v_return((get_hook(q_type_generic_obtain_llvm_type_hooks, qcons, paux) : *hook_obtain_llvm_type_ft));
}

//---------------------------------------------------------------------
export
v_type_generic_set_obtain_llvm_type_hook: (qcons: v_quark_t, fun: *hook_obtain_llvm_type_ft, aux: *void) ~> void
{
    set_hook(q_type_generic_obtain_llvm_type_hooks, qcons, fun, aux);
}

//---------------------------------------------------------------------
private
my_type_generic_obtain_llvm_type_ctx_t = struct
{
    fun: *hook_obtain_llvm_type_ft;
    aux: *void;
};

private
my_type_generic_obtain_llvm_type: (aux: *void, type: *v_type_t) ~> LLVMTypeRef
{
    v_assert(v_type_is_generic(type));

    block
    {
        aux: &*void := v_undef();

        fun = v_type_generic_get_obtain_llvm_type_hook(v_type_generic_get_cons(type), &aux);
        if (!fun)   v_break();

        v_return(fun(aux, type));
    }

    ctx = *(aux: *my_type_generic_obtain_llvm_type_ctx_t);

    v_return(ctx.fun(ctx.aux, type));
}


//---------------------------------------------------------------------
//- ...
//---------------------------------------------------------------------
{   t = v_generic_type(q_object_intrinsic_t, 0, 0);

    v_export_type_q(q_object_intrinsic_t, t);
}

//---------------------------------------------------------------------
private
my_abstract_object_intrinsic_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                         t: *v_type_t, v: LLVMValueRef,
                                         name: *const char, export: bool
                                        ) ~> void
{
//printf("my_abstract_object_intrinsic_intrinsic start %s\n", name);
//defer printf("my_abstract_object_intrinsic_intrinsic stop\n");

    v_assert(t == v_object_intrinsic_t);

    qname = v_quark_from_string(name);

    if (export) v_export_constant_q(qname, t, v);
    else        v_add_constant_q(qname, t, v);

    //-------------------------------------------------------------
    stmt_list = voidc_definitions_context_get_stmt_list();
    if (!stmt_list)  v_return();

    expr: &v_ast_expr_t[3] := {};

    elst: &v_ast_expr_list_t := {};

    stmt: &v_ast_stmt_t := {};

    v_ast_make_expr_integer(expr+0, qname);

    v_make_list(&elst, expr+0);

    v_ast_make_expr_identifier_q(expr+0, voidc_compile_quark_q);

    v_ast_make_expr_call(expr+0, expr+0, &elst);


    v_ast_make_expr_integer(expr+1, (v: v_quark_t));

    v_make_list(&elst, expr+1);

    v_ast_make_expr_identifier_q(expr+1, voidc_compile_quark_q);

    v_ast_make_expr_call(expr+1, expr+1, &elst);

    v_ast_make_expr_identifier(expr+2, "LLVMValueRef");

    v_make_list(&elst, expr+1, 2);

    v_ast_make_expr_identifier(expr+2, "v_cast");

    v_ast_make_expr_call(expr+2, expr+2, &elst);


    v_ast_make_expr_identifier_q(expr+1, q_object_intrinsic_t);


    if (export) v_ast_make_stmt_call(&stmt, 0, q_export_constant_q, expr, 3);
    else        v_ast_make_stmt_call(&stmt, 0, q_add_constant_q,    expr, 3);

    v_list_append(stmt_list, stmt_list, &stmt);
}

//---------------------------------------------------------------------
private
my_object_intrinsic_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    args = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    arg0 = v_list_get_item(args, 0);

    tag = v_ast_base_get_tag(arg0);

    quark: &v_quark_t := v_undef();

    if (tag == v_ast_expr_string_tag)
    {
        str = v_ast_expr_string_get_string(arg0);

        quark := v_quark_from_string(str);
    }
    else
    {
        v_assert(tag == v_ast_expr_identifier_tag);

        quark := v_ast_expr_identifier_get_name_q(arg0);
    }

    v_set_result_type(v_object_intrinsic_t);
    v_set_result_value((quark: LLVMValueRef));
}

//---------------------------------------------------------------------
private
my_postfix_call_object_intrinsic_intrinsic: (*void, vis: *voidc_visitor_t, self: *v_ast_base_t,
                                             args: *v_ast_expr_list_t, t0: *v_type_t, v0: LLVMValueRef
                                            ) ~> void
{
    v_assert(t0 == v_object_intrinsic_t);

    quark = (v0: v_quark_t);

    void_aux: &*void := v_undef();

    void_fun = v_get_intrinsic_q(quark, &void_aux);

    fun = (void_fun: *((*void, *voidc_visitor_t, *v_ast_base_t) ~> void));

    fun(void_aux, vis, self);
}


//---------------------------------------------------------------------
private
generics_etc_ctx_t = struct
{
    ini: my_type_generic_initialize_ctx_t;
    obt: my_type_generic_obtain_llvm_type_ctx_t;
};

//---------------------------------------------------------------------
export
voidc_enable_generics_etc: () ~> void
{
    v_return_if(v_find_constant_q(enabled_q, 0, 0));

    v_add_constant_q(enabled_q, void, 0);

    //--------------------------------------------------------------
    ctx = *v_malloc(generics_etc_ctx_t);

    v_add_cleaner(free, &ctx);

    ctx.ini.fun := v_type_get_initialize_hook(v_type_kind_generic, &ctx.ini.aux);
    ctx.obt.fun := v_type_get_obtain_llvm_type_hook(v_type_kind_generic, &ctx.obt.aux);

    v_type_set_initialize_hook(v_type_kind_generic, my_type_generic_initialize, &ctx.ini);
    v_type_set_obtain_llvm_type_hook(v_type_kind_generic, my_type_generic_obtain_llvm_type, &ctx.obt);

    //--------------------------------------------------------------
    v_add_intrinsic_q(voidc_abstract_object_intrinsic_intrinsic_q, my_abstract_object_intrinsic_intrinsic, 0);

    v_add_overload_q(voidc_abstract_static_constant_q, v_object_intrinsic_t,
                     voidc_abstract_object_intrinsic_intrinsic_q);

    v_add_intrinsic("v_object_intrinsic", my_object_intrinsic_intrinsic, 0);

    v_add_intrinsic("v.postfix_call_object_intrinsic_intrinsic", my_postfix_call_object_intrinsic_intrinsic, 0);

    v_add_overload("v.op_postfix_call", v_object_intrinsic_t, "v.postfix_call_object_intrinsic_intrinsic");
}


//=====================================================================
{   voidc_unit_end_module(); }


