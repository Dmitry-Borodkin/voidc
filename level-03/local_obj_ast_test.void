{   v_import("level-00");
    v_import("level-01");
    v_import("level-02");

    v_import("intrinsics_derive.void");
    v_import("local_objects.void");

    v_import("llvm-c/Core.void");

    v_import("printf.void");
}

{   v_enable_level_01();
    v_enable_level_02();

    voidc_enable_intrinsics_derive();
    voidc_enable_local_objects();
}


//=====================================================================
//- v_ast ...
//=====================================================================
{   voidc_unit_begin_module("local_obj_ast_test_module"); }

//---------------------------------------------------------------------
{   q_ref = v_reference_type(v_quark_t, 0);

    q = v_quark_ptr_from_string;

    v_add_symbol("q_initialize", q_ref, q("v_initialize"));
    v_add_symbol("q_terminate",  q_ref, q("v_terminate"));

    v_set_export_flag(true);
}

//---------------------------------------------------------------------
//{ v_debug_print_module(1); }


//---------------------------------------------------------------------
mk_expr_identifier: (id: *const char) ~> v_ast_expr_t
{
    ret = v_get_return_value();

    v_ast_make_expr_identifier(&ret, id);
}

//---------------------------------------------------------------------
mk_expr_integer: (num: intptr_t) ~> v_ast_expr_t
{
    ret = v_get_return_value();

    v_ast_make_expr_integer(&ret, num);
}

//---------------------------------------------------------------------
mk_expr_string: (str: *const char) ~> v_ast_expr_t
{
    ret = v_get_return_value();

    v_ast_make_expr_string(&ret, str);
}

//---------------------------------------------------------------------
mk_expr_char: (c: char32_t) ~> v_ast_expr_t
{
    ret = v_get_return_value();

    v_ast_make_expr_char(&ret, c);
}


//---------------------------------------------------------------------
mk_expr_compiled: (t: *v_type_t, v: LLVMValueRef) ~> v_ast_expr_t
{
    ret = v_get_return_value();

    v_ast_make_expr_compiled(&ret, t, v);
}


//---------------------------------------------------------------------
mk_expr_call: (fun: v_ast_expr_t, args: v_ast_expr_list_t) ~> v_ast_expr_t
{
    ret = v_get_return_value();

    _fun  = v_get_object_pointer(fun);
    _args = v_get_object_pointer(args);

    v_ast_make_expr_call(&ret, _fun, _args);
}


//---------------------------------------------------------------------
mk_stmt: (name: *const char, expr: v_ast_expr_t) ~> v_ast_stmt_t
{
    ret = v_get_return_value();

    _expr = v_get_object_pointer(expr);

    v_ast_make_stmt(&ret, name, _expr);
}


//---------------------------------------------------------------------
private
mk_ast_list_intrinsic: (aux: *void, vis: *voidc_visitor_t, self: *v_ast_base_t) ~> void
{
    ttag = v_get_result_type();
    vtag = v_get_result_value();

    tr = (aux: *v_type_t);

    vr = v_obtain_special_result_value(vis, tr);

    is_generic = tr == v_find_type("v_ast_generic_list_t");


    arg_list = v_ast_expr_call_get_arg_list((self: *v_ast_expr_t));

    args_count = v_list_get_size(arg_list) - (is_generic: size_t);

    if (args_count == 0)
    {
        er = mk_expr_compiled(v_pointer_type(tr, 0), vr);

        expr = v_get_object_pointer(er);

        list = v_alloca(v_ast_expr_list_t);
        v_initialize(list);
        defer v_terminate(list);

        v_make_list(list, expr, 1);

        if (is_generic) v_list_append(list, list, v_list_get_item(arg_list, 0));

        e = mk_expr_call(mk_expr_identifier("v_make_list_nil"), *list);

        v_set_result_type(INVIOLABLE_TAG);
        v_set_result_value(0);

        v_ast_accept_visitor((v_get_object_pointer(e): *v_ast_base_t), vis);

        v_set_result_type(ttag);
        v_set_result_value(vtag);

        v_adopt_result(tr, vr);

        v_return();
    }


    item_t: &*v_type_t := v_undef();

    if (is_generic)
    {
        item_t := v_find_type("v_ast_base_t");
    }
    else if (tr == v_find_type("v_ast_expr_list_t"))
    {
        item_t := v_find_type("v_ast_expr_t");
    }
    else if (tr == v_find_type("v_ast_stmt_list_t"))
    {
        item_t := v_find_type("v_ast_stmt_t");
    }


    builder = v_target_get_builder();

    lltyp: &LLVMTypeRef :=  v_undef();

    llvm_stacksave_f = v_obtain_function(voidc_llvm_stacksave_name, &lltyp);

    blk = LLVMBuildCall2(builder, lltyp, llvm_stacksave_f, 0, 0, "blk");


    expr = v_alloca(v_ast_expr_t, 2);
    v_initialize(expr, 2);
    defer v_terminate(expr, 2);

    stmt = v_alloca(v_ast_stmt_t);
    v_initialize(stmt);
    defer v_terminate(stmt);


    size_t_ = v_type_get_llvm_type(size_t);

    args_count_ = LLVMConstInt(size_t_, args_count, 0);

    item_t_ = v_type_get_llvm_type(item_t);

    buf_v = LLVMBuildArrayAlloca(builder, item_t_, args_count_, "buf_v");


    v_ast_make_expr_compiled(expr+0, v_pointer_type(item_t, 0), buf_v);

    v_ast_make_expr_integer(expr+1, args_count);

    v_ast_make_stmt_call(stmt, 0, q_initialize, expr, 2);

    v_ast_accept_visitor((stmt: *v_ast_base_t), vis);


    for (i: &int := 0; i < args_count; ++i)
    {
        i_ = LLVMConstInt(size_t_, i, 0);

        ei = LLVMBuildGEP2(builder, item_t_, buf_v, &i_, 1, "ei");

        v_set_result_type(item_t);
        v_set_result_value(ei);

        expr = v_list_get_item(arg_list, i+(is_generic: int));

        v_ast_accept_visitor((expr: *v_ast_base_t), vis);
    }


    {   er = mk_expr_compiled(v_pointer_type(tr, 0), vr);

        expr = v_get_object_pointer(er);

        list = v_alloca(v_ast_expr_list_t);
        v_initialize(list);
        defer v_terminate(list);

        v_make_list(list, expr, 1);

        if (is_generic) v_list_append(list, list, v_list_get_item(arg_list, 0));

        eb = mk_expr_compiled(v_pointer_type(v_ast_expr_t, 0), buf_v);

        expr = v_get_object_pointer(eb);

        v_list_append(list, list, expr);

        en = mk_expr_integer(args_count);

        expr = v_get_object_pointer(en);

        v_list_append(list, list, expr);

        e = mk_expr_call(mk_expr_identifier("v_make_list"), *list);

        v_set_result_type(INVIOLABLE_TAG);
        v_set_result_value(0);

        v_ast_accept_visitor((v_get_object_pointer(e): *v_ast_base_t), vis);
    }


    {   expr = v_alloca(v_ast_expr_t, 2);
        v_initialize(expr, 2);
        defer v_terminate(expr, 2);

        stmt = v_alloca(v_ast_stmt_t);
        v_initialize(stmt);
        defer v_terminate(stmt);

        v_ast_make_expr_compiled(expr+0, v_pointer_type(item_t, 0), buf_v);

        v_ast_make_expr_integer(expr+1, args_count);

        v_ast_make_stmt_call(stmt, 0, q_terminate, expr, 2);

        v_ast_accept_visitor((stmt: *v_ast_base_t), vis);
    }


    llvm_stackrestore_f = v_obtain_function(voidc_llvm_stackrestore_name, &lltyp);

    LLVMBuildCall2(builder, lltyp, llvm_stackrestore_f, &blk, 1, "");


    v_set_result_type(ttag);
    v_set_result_value(vtag);

    v_adopt_result(tr, vr);
}


//---------------------------------------------------------------------
(_:=_): (p: &v_ast_expr_t, v: v_ast_expr_t) ~> &v_ast_expr_t
{
    v_copy(&p, v_get_object_pointer(v));

    v_return(p);
}

(_:=_): (p: &v_ast_expr_list_t, v: v_ast_expr_list_t) ~> &v_ast_expr_list_t
{
    v_copy(&p, v_get_object_pointer(v));

    v_return(p);
}

(_:=_): (p: &v_ast_stmt_t, v: v_ast_stmt_t) ~> &v_ast_stmt_t
{
    v_copy(&p, v_get_object_pointer(v));

    v_return(p);
}

(_:=_): (p: &v_ast_stmt_list_t, v: v_ast_stmt_list_t) ~> &v_ast_stmt_list_t
{
    v_copy(&p, v_get_object_pointer(v));

    v_return(p);
}

(_:=_): (p: &v_ast_base_t, v: v_ast_base_t) ~> &v_ast_base_t
{
    v_copy(&p, v_get_object_pointer(v));

    v_return(p);
}

(_:=_): (p: &v_ast_generic_list_t, v: v_ast_generic_list_t) ~> &v_ast_generic_list_t
{
    v_copy(&p, v_get_object_pointer(v));

    v_return(p);
}

//---------------------------------------------------------------------
(_+=_): (l: &v_ast_expr_list_t, e: v_ast_expr_t) ~> &v_ast_expr_list_t
{
    v_list_append(&l, &l, v_get_object_pointer(e));

    v_return(l);
}

(_+=_): (l: &v_ast_stmt_list_t, s: v_ast_stmt_t) ~> &v_ast_stmt_list_t
{
    v_list_append(&l, &l, v_get_object_pointer(s));

    v_return(l);
}

(_+=_): (l: &v_ast_generic_list_t, s: v_ast_base_t) ~> &v_ast_generic_list_t
{
    v_list_append(&l, &l, v_get_object_pointer(s));

    v_return(l);
}


//---------------------------------------------------------------------
enable_local_obj_ast_test: () ~> void
{
    v_add_intrinsic("mk_expr_list",    mk_ast_list_intrinsic, v_find_type("v_ast_expr_list_t"));
    v_add_intrinsic("mk_stmt_list",    mk_ast_list_intrinsic, v_find_type("v_ast_stmt_list_t"));
    v_add_intrinsic("mk_generic_list", mk_ast_list_intrinsic, v_find_type("v_ast_generic_list_t"));
}


//=====================================================================
{   voidc_unit_end_module(); }


